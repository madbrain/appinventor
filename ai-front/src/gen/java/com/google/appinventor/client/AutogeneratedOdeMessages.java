// THIS FILE IS AUTOMATICALLY GENERATED DURING COMPILATION.
// DO NOT EDIT THIS FILE. ANY CHANGES WILL BE OVERWRITTEN.

package com.google.appinventor.client;

import com.google.gwt.i18n.client.Messages;

public interface AutogeneratedOdeMessages extends Messages {

  /* Components */
  @DefaultMessage("AccelerometerSensor")
  @Description("")
  String accelerometerSensorComponentPallette();

  @DefaultMessage("Non-visible component that can detect shaking and measure acceleration approximately in three dimensions using SI units (m/s<sup>2</sup>). The components are: <ul><li> <strong>xAccel</strong>: 0 when the phone is at rest on a flat surface, positive when the phone is tilted to the right (i.e., its left side is raised), and negative when the phone is tilted to the left (i.e., its right size is raised).</li> <li> <strong>yAccel</strong>: 0 when the phone is at rest on a flat surface, positive when its bottom is raised, and negative when its top is raised. </li> <li> <strong>zAccel</strong>: Equal to -9.8 (earth''s gravity in meters per second per second when the device is at rest parallel to the ground with the display facing up, 0 when perpendicular to the ground, and +9.8 when facing down. The value can also be affected by accelerating it with or against gravity. </li></ul>")
  @Description("")
  String AccelerometerSensorHelpStringComponentPallette();

  @DefaultMessage("ActivityStarter")
  @Description("")
  String activityStarterComponentPallette();

  @DefaultMessage("A component that can launch an activity using the <code>StartActivity</code> method. <p>Activities that can be launched include:<ul> <li> Starting another App Inventor for Android app. To do so, first find out the <em>class</em> of the other application by downloading the source code and using a file explorer or unzip utility to find a file named \"youngandroidproject/project.properties\". The first line of the file will start with \"main=\" and be followed by the class name; for example, <code>main=com.gmail.Bitdiddle.Ben.HelloPurr.Screen1</code>. (The first components indicate that it was created by Ben.Bitdiddle@gmail.com.) To make your <code>ActivityStarter</code> launch this application, set the following properties: <ul> <li> <code>ActivityPackage</code> to the class name, dropping the last component (for example, <code>com.gmail.Bitdiddle.Ben.HelloPurr</code>)</li> <li> <code>ActivityClass</code> to the entire class name (for example, <code>com.gmail.Bitdiddle.Ben.HelloPurr.Screen1</code>)</li> </ul></li> <li> Starting the camera application by setting the following properties:<ul> <li> <code>Action: android.intent.action.MAIN</code> </li> <li> <code>ActivityPackage: com.android.camera</code> </li> <li> <code>ActivityClass: com.android.camera.Camera</code></li> </ul></li><li> Performing web search. Assuming the term you want to search for is \"vampire\" (feel free to substitute your own choice), set the properties to:<ul><code> <li>Action: android.intent.action.WEB_SEARCH</li> <li>ExtraKey: query</li> <li>ExtraValue: vampire</li> <li>ActivityPackage: com.google.android.providers.enhancedgooglesearch</li> <li>ActivityClass: com.google.android.providers.enhancedgooglesearch.Launcher</li> </code></ul></li> <li> Opening a browser to a specified web page. Assuming the page you want to go to is \"www.facebook.com\" (feel free to substitute your own choice), set the properties to:<ul><code> <li>Action: android.intent.action.VIEW</li> <li>DataUri: http://www.facebook.com</li> </code> </ul> </li> </ul></p>")
  @Description("")
  String ActivityStarterHelpStringComponentPallette();

  @DefaultMessage("Ball")
  @Description("")
  String ballComponentPallette();

  @DefaultMessage("<p>A round ''sprite'' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>ImageSprite</code>s and other <code>Ball</code>s) and the edge of the Canvas, and move according to its property values.</p><p>For example, to have a <code>Ball</code> move 4 pixels toward the top of a <code>Canvas</code> every 500 milliseconds (half second), you would set the <code>Speed</code> property to 4 [pixels], the <code>Interval</code> property to 500 [milliseconds], the <code>Heading</code> property to 90 [degrees], and the <code>Enabled</code> property to <code>True</code>. These and its other properties can be changed at any time.</p><p>The difference between a Ball and an <code>ImageSprite</code> is that the latter can get its appearance from an image file, while a Ball''s appearance can only be changed by varying its <code>PaintColor</code> and <code>Radius</code> properties.</p>")
  @Description("")
  String BallHelpStringComponentPallette();

  @DefaultMessage("BarcodeScanner")
  @Description("")
  String barcodeScannerComponentPallette();

  @DefaultMessage("Component for using the Barcode Scanner to read a barcode")
  @Description("")
  String BarcodeScannerHelpStringComponentPallette();

  @DefaultMessage("BluetoothClient")
  @Description("")
  String bluetoothClientComponentPallette();

  @DefaultMessage("Bluetooth client component")
  @Description("")
  String BluetoothClientHelpStringComponentPallette();

  @DefaultMessage("BluetoothServer")
  @Description("")
  String bluetoothServerComponentPallette();

  @DefaultMessage("Bluetooth server component")
  @Description("")
  String BluetoothServerHelpStringComponentPallette();

  @DefaultMessage("Button")
  @Description("")
  String buttonComponentPallette();

  @DefaultMessage("Button with the ability to detect clicks. Many aspects of its appearance can be changed, as well as whether it is clickable (<code>Enabled</code>), can be changed in the Designer or in the Blocks Editor.")
  @Description("")
  String ButtonHelpStringComponentPallette();

  @DefaultMessage("Camcorder")
  @Description("")
  String camcorderComponentPallette();

  @DefaultMessage("A component to record a video using the device''s camcorder.After the video is recorded, the name of the file on the phone containing the clip is available as an argument to the AfterRecording event. The file name can be used, for example, to set the source property of a VideoPlayer component.")
  @Description("")
  String CamcorderHelpStringComponentPallette();

  @DefaultMessage("Camera")
  @Description("")
  String cameraComponentPallette();

  @DefaultMessage("A component to take a picture using the device''s camera. After the picture is taken, the name of the file on the phone containing the picture is available as an argument to the AfterPicture event. The file name can be used, for example, to set the Picture property of an Image component.")
  @Description("")
  String CameraHelpStringComponentPallette();

  @DefaultMessage("Canvas")
  @Description("")
  String canvasComponentPallette();

  @DefaultMessage("<p>A two-dimensional touch-sensitive rectangular panel on which drawing can be done and sprites can be moved.</p> <p>The <code>BackgroundColor</code>, <code>PaintColor</code>, <code>BackgroundImage</code>, <code>Width</code>, and <code>Height</code> of the Canvas can be set in either the Designer or in the Blocks Editor. The <code>Width</code> and <code>Height</code> are measured in pixels and must be positive.</p><p>Any location on the Canvas can be specified as a pair of (X, Y) values, where <ul> <li>X is the number of pixels away from the left edge of the Canvas</li><li>Y is the number of pixels away from the top edge of the Canvas</li></ul>.</p> <p>There are events to tell when and where a Canvas has been touched or a <code>Sprite</code> (<code>ImageSprite</code> or <code>Ball</code>) has been dragged. There are also methods for drawing points, lines, and circles.</p>")
  @Description("")
  String CanvasHelpStringComponentPallette();

  @DefaultMessage("CheckBox")
  @Description("")
  String checkBoxComponentPallette();

  @DefaultMessage("Checkbox that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.")
  @Description("")
  String CheckBoxHelpStringComponentPallette();

  @DefaultMessage("Circle")
  @Description("")
  String circleComponentPallette();

  @DefaultMessage("Circle")
  @Description("")
  String CircleHelpStringComponentPallette();

  @DefaultMessage("Clock")
  @Description("")
  String clockComponentPallette();

  @DefaultMessage("<p>Non-visible component that provides the instant in time using the internal clock on the phone. It can fire a timer at regularly set intervals and perform time calculations, manipulations, and conversions.</p> <p>Methods to convert an instant to text are also available. Acceptable patterns are empty string, MM/DD/YYYY HH:mm:ss a, or MMM d, yyyyHH:mm. The empty string will provide the default format, which is \"MMM d, yyyy HH:mm:ss a\" for FormatDateTime \"MMM d, yyyy\" for FormatDate. To see all possible format, please see <a href=\"https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\" _target=\"_blank\">here</a>. </p>")
  @Description("")
  String ClockHelpStringComponentPallette();

  @DefaultMessage("CloudDB")
  @Description("")
  String cloudDBComponentPallette();

  @DefaultMessage("Non-visible component allowing you to store data on a Internet connected database server (using Redis software). This allows the users of your App to share data with each other. By default data will be stored in a server maintained by MIT, however you can setup and run your own server. Set the \"RedisServer\" property and \"RedisPort\" Property to access your own server.")
  @Description("")
  String CloudDBHelpStringComponentPallette();

  @DefaultMessage("ContactPicker")
  @Description("")
  String contactPickerComponentPallette();

  @DefaultMessage("A button that, when clicked on, displays a list of the contacts to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact''s name </li> <li> <code>EmailAddress</code>: the contact''s primary email address </li> <li> <code>ContactUri</code>: the contact''s URI on the device </li><li> <code>EmailAddressList</code>: a list of the contact''s email addresses </li> <li> <code>PhoneNumber</code>: the contact''s primary phone number (on Later Android Verisons)</li> <li> <code>PhoneNumberList</code>: a list of the contact''s phone numbers (on Later Android Versions)</li> <li> <code>Picture</code>: the name of the file containing the contact''s image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The ContactPicker component might not work on all phones. For example, on Android systems before system 3.0, it cannot pick phone numbers, and the list of email addresses will contain only one email.")
  @Description("")
  String ContactPickerHelpStringComponentPallette();

  @DefaultMessage("DatePicker")
  @Description("")
  String datePickerComponentPallette();

  @DefaultMessage("<p>A button that, when clicked on, launches a popup dialog to allow the user to select a date.</p>")
  @Description("")
  String DatePickerHelpStringComponentPallette();

  @DefaultMessage("EmailPicker")
  @Description("")
  String emailPickerComponentPallette();

  @DefaultMessage("An EmailPicker is a kind of text box. If the user begins entering the name or email address of a contact, the phone will show a dropdown menu of choices that complete the entry. If there are many contacts, the dropdown can take several seconds to appear, and can show intermediate results while the matches are being computed. <p>The initial contents of the text box and the contents< after user entry is in the <code>Text</code> property. If the <code>Text</code> property is initially empty, the contents of the <code>Hint</code> property will be faintly shown in the text box as a hint to the user.</p> <p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes like this are usually used with <code>Button</code> components, with the user clicking on the button when text entry is complete.")
  @Description("")
  String EmailPickerHelpStringComponentPallette();

  @DefaultMessage("Ev3ColorSensor")
  @Description("")
  String ev3ColorSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3ColorSensorHelpStringComponentPallette();

  @DefaultMessage("Ev3Commands")
  @Description("")
  String ev3CommandsComponentPallette();

  @DefaultMessage("A component that provides a low-level interface to a LEGO MINDSTORMS EV3 robot, with functions to send system or direct commands to EV3 robots.")
  @Description("")
  String Ev3CommandsHelpStringComponentPallette();

  @DefaultMessage("Ev3GyroSensor")
  @Description("")
  String ev3GyroSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a gyro sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3GyroSensorHelpStringComponentPallette();

  @DefaultMessage("Ev3Motors")
  @Description("")
  String ev3MotorsComponentPallette();

  @DefaultMessage("A component that provides both high- and low-level interfaces to a LEGO MINDSTORMS EV3 robot, with functions that can control the motors.")
  @Description("")
  String Ev3MotorsHelpStringComponentPallette();

  @DefaultMessage("Ev3Sound")
  @Description("")
  String ev3SoundComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to sound functionalities on LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3SoundHelpStringComponentPallette();

  @DefaultMessage("Ev3TouchSensor")
  @Description("")
  String ev3TouchSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3TouchSensorHelpStringComponentPallette();

  @DefaultMessage("Ev3UI")
  @Description("")
  String ev3UIComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a LEGO MINDSTORMS EV3 robot, with functions to draw graphs on EV3 screen.")
  @Description("")
  String Ev3UIHelpStringComponentPallette();

  @DefaultMessage("Ev3UltrasonicSensor")
  @Description("")
  String ev3UltrasonicSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS EV3 robot.")
  @Description("")
  String Ev3UltrasonicSensorHelpStringComponentPallette();

  @DefaultMessage("FeatureCollection")
  @Description("")
  String featureCollectionComponentPallette();

  @DefaultMessage("A FeatureColletion contains one or more map features as a group. Any events fired on a feature in the collection will also trigger the corresponding event on the collection object. FeatureCollections can be loaded from external resources as a means of populating a Map with content.")
  @Description("")
  String FeatureCollectionHelpStringComponentPallette();

  @DefaultMessage("File")
  @Description("")
  String fileComponentPallette();

  @DefaultMessage("Non-visible component for storing and retrieving files. Use this component to write or read files on your device. The default behaviour is to write files to the private data directory associated with your App. The Companion is special cased to write files to /sdcard/AppInventor/data to facilitate debugging. If the file path starts with a slash (/), then the file is created relative to /sdcard. For example writing a file to /myFile.txt will write the file in /sdcard/myFile.txt.")
  @Description("")
  String FileHelpStringComponentPallette();

  @DefaultMessage("FirebaseDB")
  @Description("")
  String firebaseDBComponentPallette();

  @DefaultMessage("Non-visible component that communicates with Firebase to store and retrieve information.")
  @Description("")
  String FirebaseDBHelpStringComponentPallette();

  @DefaultMessage("Form")
  @Description("")
  String formComponentPallette();

  @DefaultMessage("Top-level component containing all other components in the program")
  @Description("")
  String FormHelpStringComponentPallette();

  @DefaultMessage("FusiontablesControl")
  @Description("")
  String fusiontablesControlComponentPallette();

  @DefaultMessage("<p>A non-visible component that communicates with Google Fusion Tables. Fusion Tables let you store, share, query and visualize data tables; this component lets you query, create, and modify these tables.</p> <p>This component uses the <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">Fusion Tables API V2.0</a>. <p>Applications using Fusion Tables must authentication to Google''s servers. There are two ways this can be done. The first way uses an API Key which you the developer obtain (see below). With this approach end-users must also login to access a Fusion Table. The second approach is to use a Service Account. With this approach you create credentials and a special \"Service Account Email Address\" which you obtain from the <a href=\"https://code.google.com/apis/console/\" target=\"_blank\">Google APIs Console</a>. You then tell the Fusion Table Control the name of the Service Account Email address and upload the secret key as an asset to your application and set the KeyFile property to point at this file. Finally you check the \"UseServiceAuthentication\" checkbox in the designer. When using a Service Account, end-users do not need to login to use Fusion Tables, your service account authenticates all access.</p> <p>To get an API key, follow these instructions.</p> <ol><li>Go to your <a href=\"https://code.google.com/apis/console/\" target=\"_blank\">Google APIs Console</a> and login if necessary.</li><li>Select the <i>Services</i> item from the menu on the left.</li><li>Choose the <i>Fusiontables</i> service from the list provided and turn it on.</li><li>Go back to the main menu and select the <i>API Access</i> item. </li></ol><p>Your API Key will be near the bottom of that pane in the section called \"Simple API Access\".You will have to provide that key as the value for the <i>ApiKey</i> property in your Fusiontables app.</p><p>Once you have an API key, set the value of the <i>Query</i> property to a valid Fusiontables SQL query and call <i>SendQuery</i> to execute the query. App Inventor will send the query to the Fusion Tables server and the <i>GotResult</i> block will fire when a result is returned from the server.Query results will be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.</p><p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure the query follows the syntax described in <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">the reference manual</a>, which means that things like capitalization for names of columns matters, and that single quotes must be used around column names if there are spaces in them.</p>")
  @Description("")
  String FusiontablesControlHelpStringComponentPallette();

  @DefaultMessage("GameClient")
  @Description("")
  String gameClientComponentPallette();

  @DefaultMessage("Provides a way for applications to communicate with online game servers")
  @Description("")
  String GameClientHelpStringComponentPallette();

  @DefaultMessage("GyroscopeSensor")
  @Description("")
  String gyroscopeSensorComponentPallette();

  @DefaultMessage("<p>Non-visible component that can measure angular velocity in three dimensions in units of degrees per second.</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have a gyroscope sensor.</p>")
  @Description("")
  String GyroscopeSensorHelpStringComponentPallette();

  @DefaultMessage("HorizontalArrangement")
  @Description("")
  String horizontalArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p>")
  @Description("")
  String HorizontalArrangementHelpStringComponentPallette();

  @DefaultMessage("HorizontalScrollArrangement")
  @Description("")
  String horizontalScrollArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed from left to right. If you wish to have components displayed one over another, use <code>VerticalArrangement</code> instead.</p><p>This version is scrollable.")
  @Description("")
  String HorizontalScrollArrangementHelpStringComponentPallette();

  @DefaultMessage("Image")
  @Description("")
  String imageComponentPallette();

  @DefaultMessage("Component for displaying images. The picture to display, and other aspects of the Image''s appearance, can be specified in the Designer or in the Blocks Editor.")
  @Description("")
  String ImageHelpStringComponentPallette();

  @DefaultMessage("ImagePicker")
  @Description("")
  String imagePickerComponentPallette();

  @DefaultMessage("A special-purpose button. When the user taps an image picker, the device''s image gallery appears, and the user can choose an image. After an image is picked, it is saved, and the <code>Selected</code> property will be the name of the file where the image is stored. In order to not fill up storage, a maximum of 10 images will be stored. Picking more images will delete previous images, in order from oldest to newest.")
  @Description("")
  String ImagePickerHelpStringComponentPallette();

  @DefaultMessage("ImageSprite")
  @Description("")
  String imageSpriteComponentPallette();

  @DefaultMessage("<p>A ''sprite'' that can be placed on a <code>Canvas</code>, where it can react to touches and drags, interact with other sprites (<code>Ball</code>s and other <code>ImageSprite</code>s) and the edge of the Canvas, and move according to its property values. Its appearance is that of the image specified in its <code>Picture</code> property (unless its <code>Visible</code> property is <code>False</code>.</p> <p>To have an <code>ImageSprite</code> move 10 pixels to the left every 1000 milliseconds (one second), for example, you would set the <code>Speed</code> property to 10 [pixels], the <code>Interval</code> property to 1000 [milliseconds], the <code>Heading</code> property to 180 [degrees], and the <code>Enabled</code> property to <code>True</code>. A sprite whose <code>Rotates</code> property is <code>True</code> will rotate its image as the sprite''s <code>Heading</code> changes. Checking for collisions with a rotated sprite currently checks the sprite''s unrotated position so that collision checking will be inaccurate for tall narrow or short wide sprites that are rotated. Any of the sprite properties can be changed at any time under program control.</p>")
  @Description("")
  String ImageSpriteHelpStringComponentPallette();

  @DefaultMessage("Label")
  @Description("")
  String labelComponentPallette();

  @DefaultMessage("A Label displays a piece of text, which is specified through the <code>Text</code> property. Other properties, all of which can be set in the Designer or Blocks Editor, control the appearance and placement of the text.")
  @Description("")
  String LabelHelpStringComponentPallette();

  @DefaultMessage("LineString")
  @Description("")
  String lineStringComponentPallette();

  @DefaultMessage("LineString")
  @Description("")
  String LineStringHelpStringComponentPallette();

  @DefaultMessage("ListPicker")
  @Description("")
  String listPickerComponentPallette();

  @DefaultMessage("<p>A button that, when clicked on, displays a list of texts for the user to choose among. The texts can be specified through the Designer or Blocks Editor by setting the <code>ElementsFromString</code> property to their string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor.</p><p>Setting property ShowFilterBar to true, will make the list searchable. Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p>")
  @Description("")
  String ListPickerHelpStringComponentPallette();

  @DefaultMessage("ListView")
  @Description("")
  String listViewComponentPallette();

  @DefaultMessage("<p>This is a visible component that displays a list of text elements. <br> The list can be set using the ElementsFromString property or using the Elements block in the blocks editor. </p>")
  @Description("")
  String ListViewHelpStringComponentPallette();

  @DefaultMessage("LocationSensor")
  @Description("")
  String locationSensorComponentPallette();

  @DefaultMessage("Non-visible component providing location information, including longitude, latitude, altitude (if supported by the device), speed (if supported by the device), and address. This can also perform \"geocoding\", converting a given address (not necessarily the current one) to a latitude (with the <code>LatitudeFromAddress</code> method) and a longitude (with the <code>LongitudeFromAddress</code> method).</p><p>In order to function, the component must have its <code>Enabled</code> property set to True, and the device must have location sensing enabled through wireless networks or GPS satellites (if outdoors).</p>Location information might not be immediately available when an app starts. You''ll have to wait a short time for a location provider to be found and used, or wait for the OnLocationChanged event")
  @Description("")
  String LocationSensorHelpStringComponentPallette();

  @DefaultMessage("Map")
  @Description("")
  String mapComponentPallette();

  @DefaultMessage("<p>A two-dimensional container that renders map tiles in the background and allows for multiple Marker elements to identify points on the map. Map tiles are supplied by OpenStreetMap contributors and the United States Geological Survey.</p><p>The Map component provides three utilities for manipulating its boundaries within App Inventor. First, a locking mechanism is provided to allow the map to be moved relative to other components on the Screen. Second, when unlocked, the user can pan the Map to any location. At this new location, the &quot;Set Initial Boundary&quot; button can be pressed to save the current Map coordinates to its properties. Lastly, if the Map is moved to a different location, for example to add Markers off-screen, then the &quot;Reset Map to Initial Bounds&quot; button can be used to re-center the Map at the starting location.</p>")
  @Description("")
  String MapHelpStringComponentPallette();

  @DefaultMessage("Marker")
  @Description("")
  String markerComponentPallette();

  @DefaultMessage("<p>An icon positioned at a point to indicate information on a map. Markers can be used to provide an info window, custom fill and stroke colors, and custom images to convey information to the user.</p>")
  @Description("")
  String MarkerHelpStringComponentPallette();

  @DefaultMessage("MediaStore")
  @Description("")
  String mediaStoreComponentPallette();

  @DefaultMessage("Non-visible component that communicates with a Web service and stores media files.")
  @Description("")
  String MediaStoreHelpStringComponentPallette();

  @DefaultMessage("NearField")
  @Description("")
  String nearFieldComponentPallette();

  @DefaultMessage("<p>Non-visible component to provide NFC capabilities. For now this component supports the reading and writing of text tags only (if supported by the device)</p><p>In order to read and write text tags, the component must have its <code>ReadMode</code> property set to True or False respectively.</p><p><strong>Note:</strong> This component will only work on Screen1 of any App Inventor app.</p>")
  @Description("")
  String NearFieldHelpStringComponentPallette();

  @DefaultMessage("Notifier")
  @Description("")
  String notifierComponentPallette();

  @DefaultMessage("The Notifier component displays alert dialogs, messages, and temporary alerts, and creates Android log entries through the following methods: <ul><li> ShowMessageDialog: displays a message which the user must dismiss by pressing a button.</li><li> ShowChooseDialog: displays a message two buttons to let the user choose one of two responses, for example, yes or no, after which the AfterChoosing event is raised.</li><li> ShowTextDialog: lets the user enter text in response to the message, after which the AfterTextInput event is raised. <li> ShowPasswordDialog: lets the user enter password in response to the message, after which the AfterTextInput event is raised. <li> ShowAlert: displays a temporary alert that goes away by itself after a short time.</li><li> ShowProgressDialog: displays an alert with a loading spinner that cannot be dismissed by the user. It can only be dismissed by using the DismissProgressDialog block.</li><li> DismissProgressDialog: Dismisses the progress dialog displayed by ShowProgressDialog.</li><li> LogError: logs an error message to the Android log. </li><li> LogInfo: logs an info message to the Android log.</li><li> LogWarning: logs a warning message to the Android log.</li><li>The messages in the dialogs (but not the alert) can be formatted using the following HTML tags:&lt;b&gt;, &lt;big&gt;, &lt;blockquote&gt;, &lt;br&gt;, &lt;cite&gt;, &lt;dfn&gt;, &lt;div&gt;, &lt;em&gt;, &lt;small&gt;, &lt;strong&gt;, &lt;sub&gt;, &lt;sup&gt;, &lt;tt&gt;. &lt;u&gt;</li><li>You can also use the font tag to specify color, for example, &lt;font color=\"blue\"&gt;. Some of the available color names are aqua, black, blue, fuchsia, green, grey, lime, maroon, navy, olive, purple, red, silver, teal, white, and yellow</li></ul>")
  @Description("")
  String NotifierHelpStringComponentPallette();

  @DefaultMessage("NxtColorSensor")
  @Description("")
  String nxtColorSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a color sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtColorSensorHelpStringComponentPallette();

  @DefaultMessage("NxtDirectCommands")
  @Description("")
  String nxtDirectCommandsComponentPallette();

  @DefaultMessage("A component that provides a low-level interface to a LEGO MINDSTORMS NXT robot, with functions to send NXT Direct Commands.")
  @Description("")
  String NxtDirectCommandsHelpStringComponentPallette();

  @DefaultMessage("NxtDrive")
  @Description("")
  String nxtDriveComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a LEGO MINDSTORMS NXT robot, with functions that can move and turn the robot.")
  @Description("")
  String NxtDriveHelpStringComponentPallette();

  @DefaultMessage("NxtLightSensor")
  @Description("")
  String nxtLightSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a light sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtLightSensorHelpStringComponentPallette();

  @DefaultMessage("NxtSoundSensor")
  @Description("")
  String nxtSoundSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a sound sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtSoundSensorHelpStringComponentPallette();

  @DefaultMessage("NxtTouchSensor")
  @Description("")
  String nxtTouchSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to a touch sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtTouchSensorHelpStringComponentPallette();

  @DefaultMessage("NxtUltrasonicSensor")
  @Description("")
  String nxtUltrasonicSensorComponentPallette();

  @DefaultMessage("A component that provides a high-level interface to an ultrasonic sensor on a LEGO MINDSTORMS NXT robot.")
  @Description("")
  String NxtUltrasonicSensorHelpStringComponentPallette();

  @DefaultMessage("OrientationSensor")
  @Description("")
  String orientationSensorComponentPallette();

  @DefaultMessage("<p>Non-visible component providing information about the device''s physical orientation in three dimensions: <ul> <li> <strong>Roll</strong>: 0 degrees when the device is level, increases to 90 degrees as the device is tilted up on its left side, and decreases to -90 degrees when the device is tilted up on its right side. </li> <li> <strong>Pitch</strong>: 0 degrees when the device is level, up to 90 degrees as the device is tilted so its top is pointing down, up to 180 degrees as it gets turned over. Similarly, as the device is tilted so its bottom points down, pitch decreases to -90 degrees, then further decreases to -180 degrees as it gets turned all the way over.</li> <li> <strong>Azimuth</strong>: 0 degrees when the top of the device is pointing north, 90 degrees when it is pointing east, 180 degrees when it is pointing south, 270 degrees when it is pointing west, etc.</li></ul> These measurements assume that the device itself is not moving.</p>")
  @Description("")
  String OrientationSensorHelpStringComponentPallette();

  @DefaultMessage("PasswordTextBox")
  @Description("")
  String passwordTextBoxComponentPallette();

  @DefaultMessage("<p>A box for entering passwords. This is the same as the ordinary <code>TextBox</code> component except this does not display the characters typed by the user.</p><p>The value of the text in the box can be found or set through the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p> <p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p>")
  @Description("")
  String PasswordTextBoxHelpStringComponentPallette();

  @DefaultMessage("Pedometer")
  @Description("")
  String pedometerComponentPallette();

  @DefaultMessage("A Component that acts like a Pedometer. It senses motion via the Accerleromter and attempts to determine if a step has been taken. Using a configurable stride length, it can estimate the distance traveled as well.")
  @Description("")
  String PedometerHelpStringComponentPallette();

  @DefaultMessage("PhoneCall")
  @Description("")
  String phoneCallComponentPallette();

  @DefaultMessage("<p>A non-visible component that makes a phone call to the number specified in the <code>PhoneNumber</code> property, which can be set either in the Designer or Blocks Editor. The component has a <code>MakePhoneCall</code> method, enabling the program to launch a phone call.</p><p>Often, this component is used with the <code>ContactPicker</code> component, which lets the user select a contact from the ones stored on the phone and sets the <code>PhoneNumber</code> property to the contact''s phone number.</p><p>To directly specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text with the specified digits (e.g., \"6505551212\"). Dashes, dots, and parentheses may be included (e.g., \"(650)-555-1212\") but will be ignored; spaces may not be included.</p>")
  @Description("")
  String PhoneCallHelpStringComponentPallette();

  @DefaultMessage("PhoneNumberPicker")
  @Description("")
  String phoneNumberPickerComponentPallette();

  @DefaultMessage("A button that, when clicked on, displays a list of the contacts'' phone numbers to choose among. After the user has made a selection, the following properties will be set to information about the chosen contact: <ul><li> <code>ContactName</code>: the contact''s name </li> <li> <code>PhoneNumber</code>: the contact''s phone number </li> <li> <code>EmailAddress</code>: the contact''s email address </li> <li> <code>Picture</code>: the name of the file containing the contact''s image, which can be used as a <code>Picture</code> property value for the <code>Image</code> or <code>ImageSprite</code> component.</li></ul></p><p>Other properties affect the appearance of the button (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be clicked on (<code>Enabled</code>).</p><p>The PhoneNumberPicker component may not work on all Android devices. For example, on Android systems before system 3.0, the returned lists of phone numbers and email addresses will be empty.")
  @Description("")
  String PhoneNumberPickerHelpStringComponentPallette();

  @DefaultMessage("PhoneStatus")
  @Description("")
  String phoneStatusComponentPallette();

  @DefaultMessage("Component that returns information about the phone.")
  @Description("")
  String PhoneStatusHelpStringComponentPallette();

  @DefaultMessage("Player")
  @Description("")
  String playerComponentPallette();

  @DefaultMessage("Multimedia component that plays audio and controls phone vibration. The name of a multimedia field is specified in the <code>Source</code> property, which can be set in the Designer or in the Blocks Editor. The length of time for a vibration is specified in the Blocks Editor in milliseconds (thousandths of a second).<p>For supported audio formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>This component is best for long sound files, such as songs, while the <code>Sound</code> component is more efficient for short files, such as sound effects.</p>")
  @Description("")
  String PlayerHelpStringComponentPallette();

  @DefaultMessage("Polygon")
  @Description("")
  String polygonComponentPallette();

  @DefaultMessage("Polygon")
  @Description("")
  String PolygonHelpStringComponentPallette();

  @DefaultMessage("ProximitySensor")
  @Description("")
  String proximitySensorComponentPallette();

  @DefaultMessage("<p>Non-visible component that can measures the proximity of an object in cm relative to the view screen of a device. This sensor is typically used to determine whether a handset is being held up to a persons ear; i.e. lets you determine how far away an object is from a device. Many devices return the absolute distance, in cm, but some return only near and far values. In this case, the sensor usually reports its maximum range value in the far state and a lesser value in the near state.</p>")
  @Description("")
  String ProximitySensorHelpStringComponentPallette();

  @DefaultMessage("Rectangle")
  @Description("")
  String rectangleComponentPallette();

  @DefaultMessage("Rectangle")
  @Description("")
  String RectangleHelpStringComponentPallette();

  @DefaultMessage("Sharing")
  @Description("")
  String sharingComponentPallette();

  @DefaultMessage("Sharing is a non-visible component that enables sharing files and/or messages between your app and other apps installed on a device. The component will display a list of the installed apps that can handle the information provided, and will allow the user to choose one to share the content with, for instance a mail app, a social network app, a texting app, and so on.<br>The file path can be taken directly from other components such as the Camera or the ImagePicker, but can also be specified directly to read from storage. Be aware that different devices treat storage differently, so a few things to try if, for instance, you have a file called arrow.gif in the folder <code>Appinventor/assets</code>, would be: <ul><li><code>\"file:///sdcard/Appinventor/assets/arrow.gif\"</code></li> or <li><code>\"/storage/Appinventor/assets/arrow.gif\"</code></li></ul>")
  @Description("")
  String SharingHelpStringComponentPallette();

  @DefaultMessage("Slider")
  @Description("")
  String sliderComponentPallette();

  @DefaultMessage("A Slider is a progress bar that adds a draggable thumb. You can touch the thumb and drag left or right to set the slider thumb position. As the Slider thumb is dragged, it will trigger the PositionChanged event, reporting the position of the Slider thumb. The reported position of the Slider thumb can be used to dynamically update another component attribute, such as the font size of a TextBox or the radius of a Ball.")
  @Description("")
  String SliderHelpStringComponentPallette();

  @DefaultMessage("Sound")
  @Description("")
  String soundComponentPallette();

  @DefaultMessage("<p>A multimedia component that plays sound files and optionally vibrates for the number of milliseconds (thousandths of a second) specified in the Blocks Editor. The name of the sound file to play can be specified either in the Designer or in the Blocks Editor.</p> <p>For supported sound file formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>This <code>Sound</code> component is best for short sound files, such as sound effects, while the <code>Player</code> component is more efficient for longer sounds, such as songs.</p><p>You might get an error if you attempt to play a sound immeditely after setting the source.</p>")
  @Description("")
  String SoundHelpStringComponentPallette();

  @DefaultMessage("SoundRecorder")
  @Description("")
  String soundRecorderComponentPallette();

  @DefaultMessage("<p>Multimedia component that records audio.</p>")
  @Description("")
  String SoundRecorderHelpStringComponentPallette();

  @DefaultMessage("SpeechRecognizer")
  @Description("")
  String speechRecognizerComponentPallette();

  @DefaultMessage("Component for using Voice Recognition to convert from speech to text")
  @Description("")
  String SpeechRecognizerHelpStringComponentPallette();

  @DefaultMessage("Spinner")
  @Description("")
  String spinnerComponentPallette();

  @DefaultMessage("<p>A spinner component that displays a pop-up with a list of elements. These elements can be set in the Designer or Blocks Editor by setting the<code>ElementsFromString</code> property to a string-separated concatenation (for example, <em>choice 1, choice 2, choice 3</em>) or by setting the <code>Elements</code> property to a List in the Blocks editor. Spinners are created with the first item already selected. So selecting it does not generate an After Picking event. Consequently it''s useful to make the first Spinner item be a non-choice like \"Select from below...\". </p>")
  @Description("")
  String SpinnerHelpStringComponentPallette();

  @DefaultMessage("Switch")
  @Description("")
  String switchComponentPallette();

  @DefaultMessage("Toggle switch that raises an event when the user clicks on it. There are many properties affecting its appearance that can be set in the Designer or Blocks Editor.")
  @Description("")
  String SwitchHelpStringComponentPallette();

  @DefaultMessage("TableArrangement")
  @Description("")
  String tableArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed in tabular form.</p>")
  @Description("")
  String TableArrangementHelpStringComponentPallette();

  @DefaultMessage("TextBox")
  @Description("")
  String textBoxComponentPallette();

  @DefaultMessage("<p>A box for the user to enter text. The initial or user-entered text value is in the <code>Text</code> property. If blank, the <code>Hint</code> property, which appears as faint text in the box, can provide the user with guidance as to what to type.</p><p>The <code>MultiLine</code> property determines if the text can havemore than one line. For a single line text box, the keyboard will closeautomatically when the user presses the Done key. To close the keyboard for multiline text boxes, the app should use the HideKeyboard method or rely on the user to press the Back key.</p><p>The <code> NumbersOnly</code> property restricts the keyboard to acceptnumeric input only.</p><p>Other properties affect the appearance of the text box (<code>TextAlignment</code>, <code>BackgroundColor</code>, etc.) and whether it can be used (<code>Enabled</code>).</p><p>Text boxes are usually used with the <code>Button</code> component, with the user clicking on the button when text entry is complete.</p><p>If the text entered by the user should not be displayed, use <code>PasswordTextBox</code> instead.</p>")
  @Description("")
  String TextBoxHelpStringComponentPallette();

  @DefaultMessage("TextToSpeech")
  @Description("")
  String textToSpeechComponentPallette();

  @DefaultMessage("The TestToSpeech component speaks a given text aloud. You can set the pitch and the rate of speech. <p>You can also set a language by supplying a language code. This changes the pronounciation of words, not the actual language spoken. For example, setting the language to French and speaking English text will sound like someone speaking English (en) with a French accent.</p> <p>You can also specify a country by supplying a country code. This can affect the pronounciation. For example, British English (GBR) will sound different from US English (USA). Not every country code will affect every language.</p> <p>The languages and countries available depend on the particular device, and can be listed with the AvailableLanguages and AvailableCountries properties.</p>")
  @Description("")
  String TextToSpeechHelpStringComponentPallette();

  @DefaultMessage("Texting")
  @Description("")
  String textingComponentPallette();

  @DefaultMessage("<p>A component that will, when the <code>SendMessage</code> method is called, send the text message specified in the <code>Message</code> property to the phone number specified in the <code>PhoneNumber</code> property.</p> <p>If the <code>ReceivingEnabled</code> property is set to 1 messages will <b>not</b> be received. If <code>ReceivingEnabled</code> is set to 2 messages will be received only when the application is running. Finally if <code>ReceivingEnabled</code> is set to 3, messages will be received when the application is running <b>and</b> when the application is not running they will be queued and a notification displayed to the user.</p> <p>When a message arrives, the <code>MessageReceived</code> event is raised and provides the sending number and message.</p> <p> An app that includes this component will receive messages even when it is in the background (i.e. when it''s not visible on the screen) and, moreso, even if the app is not running, so long as it''s installed on the phone. If the phone receives a text message when the app is not in the foreground, the phone will show a notification in the notification bar. Selecting the notification will bring up the app. As an app developer, you''ll probably want to give your users the ability to control ReceivingEnabled so that they can make the phone ignore text messages.</p> <p>If the GoogleVoiceEnabled property is true, messages can be sent over Wifi using Google Voice. This option requires that the user have a Google Voice account and that the mobile Voice app is installed on the phone. The Google Voice option works only on phones that support Android 2.0 (Eclair) or higher.</p> <p>To specify the phone number (e.g., 650-555-1212), set the <code>PhoneNumber</code> property to a Text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces may not be included.</p> <p>Another way for an app to specify a phone number would be to include a <code>PhoneNumberPicker</code> component, which lets the users select a phone numbers from the ones stored in the the phone''s contacts.</p>")
  @Description("")
  String TextingHelpStringComponentPallette();

  @DefaultMessage("TimePicker")
  @Description("")
  String timePickerComponentPallette();

  @DefaultMessage("<p>A button that, when clicked on, launches a popup dialog to allow the user to select a time.</p>")
  @Description("")
  String TimePickerHelpStringComponentPallette();

  @DefaultMessage("TinyDB")
  @Description("")
  String tinyDBComponentPallette();

  @DefaultMessage("TinyDB is a non-visible component that stores data for an app. <p> Apps created with App Inventor are initialized each time they run: If an app sets the value of a variable and the user then quits the app, the value of that variable will not be remembered the next time the app is run. In contrast, TinyDB is a <em> persistent </em> data store for the app, that is, the data stored there will be available each time the app is run. An example might be a game that saves the high score and retrieves it each time the game is played. </<p> <p> Data items are strings stored under <em>tags</em> . To store a data item, you specify the tag it should be stored under. Subsequently, you can retrieve the data that was stored under a given tag. </p><p> There is only one data store per app. Even if you have multiple TinyDB components, they will use the same data store. To get the effect of separate stores, use different keys. Also each app has its own data store. You cannot use TinyDB to pass data between two different apps on the phone, although you <em>can</em> use TinyDb to shares data between the different screens of a multi-screen app. </p> <p>When you are developing apps using the AI Companion, all the apps using that companion will share the same TinyDb. That sharing will disappear once the apps are packaged. But, during development, you should be careful to clear the TinyDb each time you start working on a new app.</p>")
  @Description("")
  String TinyDBHelpStringComponentPallette();

  @DefaultMessage("TinyWebDB")
  @Description("")
  String tinyWebDBComponentPallette();

  @DefaultMessage("Non-visible component that communicates with a Web service to store and retrieve information.")
  @Description("")
  String TinyWebDBHelpStringComponentPallette();

  @DefaultMessage("Twitter")
  @Description("")
  String twitterComponentPallette();

  @DefaultMessage("A non-visible component that enables communication with <a href=\"http://www.twitter.com\" target=\"_blank\">Twitter</a>. Once a user has logged into their Twitter account (and the authorization has been confirmed successful by the <code>IsAuthorized</code> event), many more operations are available:<ul><li> Searching Twitter for tweets or labels (<code>SearchTwitter</code>)</li><li> Sending a Tweet (<code>Tweet</code>) </li><li> Sending a Tweet with an Image (<code>TweetWithImage</code>) </li><li> Directing a message to a specific user (<code>DirectMessage</code>)</li> <li> Receiving the most recent messages directed to the logged-in user (<code>RequestDirectMessages</code>)</li> <li> Following a specific user (<code>Follow</code>)</li><li> Ceasing to follow a specific user (<code>StopFollowing</code>)</li><li> Getting a list of users following the logged-in user (<code>RequestFollowers</code>)</li> <li> Getting the most recent messages of users followed by the logged-in user (<code>RequestFriendTimeline</code>)</li> <li> Getting the most recent mentions of the logged-in user (<code>RequestMentions</code>)</li></ul></p> <p>You must obtain a Consumer Key and Consumer Secret for Twitter authorization specific to your app from http://twitter.com/oauth_clients/new")
  @Description("")
  String TwitterHelpStringComponentPallette();

  @DefaultMessage("VerticalArrangement")
  @Description("")
  String verticalArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p>")
  @Description("")
  String VerticalArrangementHelpStringComponentPallette();

  @DefaultMessage("VerticalScrollArrangement")
  @Description("")
  String verticalScrollArrangementComponentPallette();

  @DefaultMessage("<p>A formatting element in which to place components that should be displayed one below another. (The first child component is stored on top, the second beneath it, etc.) If you wish to have components displayed next to one another, use <code>HorizontalArrangement</code> instead.</p><p> This version is scrollable")
  @Description("")
  String VerticalScrollArrangementHelpStringComponentPallette();

  @DefaultMessage("VideoPlayer")
  @Description("")
  String videoPlayerComponentPallette();

  @DefaultMessage("A multimedia component capable of playing videos. When the application is run, the VideoPlayer will be displayed as a rectangle on-screen. If the user touches the rectangle, controls will appear to play/pause, skip ahead, and skip backward within the video. The application can also control behavior by calling the <code>Start</code>, <code>Pause</code>, and <code>SeekTo</code> methods. <p>Video files should be in 3GPP (.3gp) or MPEG-4 (.mp4) formats. For more details about legal formats, see <a href=\"http://developer.android.com/guide/appendix/media-formats.html\" target=\"_blank\">Android Supported Media Formats</a>.</p><p>App Inventor for Android only permits video files under 1 MB and limits the total size of an application to 5 MB, not all of which is available for media (video, audio, and sound) files. If your media files are too large, you may get errors when packaging or installing your application, in which case you should reduce the number of media files or their sizes. Most video editing software, such as Windows Movie Maker and Apple iMovie, can help you decrease the size of videos by shortening them or re-encoding the video into a more compact format.</p><p>You can also set the media source to a URL that points to a streaming video, but the URL must point to the video file itself, not to a program that plays the video.")
  @Description("")
  String VideoPlayerHelpStringComponentPallette();

  @DefaultMessage("Voting")
  @Description("")
  String votingComponentPallette();

  @DefaultMessage("The Voting component communicates with a Web service to retrieve a ballot and send back users'' votes. <p>The application should call the method <code>RequestBallot</code>, usually in the <code>Initialize</code> event handler, in order to get the ballot question and options from the Web service (specified by the <code>ServiceURL</code> property). Depending on the response from the Web service, the system will raise one of the following three events: <ol> <li> <code>GotBallot</code>, indicating that the ballot question and options were retrieved and the properties <code>BallotQuestion</code> and <code>BallotOptions</code> have been set.</li> <li> <code>NoOpenPoll</code>, indicating that no ballot question is available.</li> <li> <code>WebServiceError</code>, indicating that the service did not provide a legal response and providing an error messages.</li> </ol></p> <p>After getting the ballot, the application should allow the user to make a choice from among <code>BallotOptions</code> and set the property <code>UserChoice</code> to that choice. The application should also set <code>UserId</code> to specify which user is voting.</p> <p>Once the application has set <code>UserChoice</code> and <code>UserId</code>, the application can call <code>SendBallot</code> to send this information to the Web service. If the service successfully receives the vote, the event <code>GotBallotConfirmation</code> will be raised. Otherwise, the event <code>WebServiceError</code> will be raised with the appropriate error message.</p>")
  @Description("")
  String VotingHelpStringComponentPallette();

  @DefaultMessage("Web")
  @Description("")
  String webComponentPallette();

  @DefaultMessage("Non-visible component that provides functions for HTTP GET, POST, PUT, and DELETE requests.")
  @Description("")
  String WebHelpStringComponentPallette();

  @DefaultMessage("WebViewer")
  @Description("")
  String webViewerComponentPallette();

  @DefaultMessage("Component for viewing Web pages. The Home URL can be specified in the Designer or in the Blocks Editor. The view can be set to follow links when they are tapped, and users can fill in Web forms. Warning: This is not a full browser. For example, pressing the phone''s hardware Back key will exit the app, rather than move back in the browser history.<p />You can use the WebViewer.WebViewString property to communicate between your app and Javascript code running in the Webviewer page. In the app, you get and set WebViewString. In the WebViewer, you include Javascript that references the window.AppInventor object, using the methoods </em getWebViewString()</em> and <em>setWebViewString(text)</em>. <p />For example, if the WebViewer opens to a page that contains the Javascript command <br /> <em>document.write(\"The answer is\" + window.AppInventor.getWebViewString());</em> <br />and if you set WebView.WebVewString to \"hello\", then the web page will show </br ><em>The answer is hello</em>. <br />And if the Web page contains Javascript that executes the command <br /><em>window.AppInventor.setWebViewString(\"hello from Javascript\")</em>, <br />then the value of the WebViewString property will be <br /><em>hello from Javascript</em>.")
  @Description("")
  String WebViewerHelpStringComponentPallette();

  @DefaultMessage("YandexTranslate")
  @Description("")
  String yandexTranslateComponentPallette();

  @DefaultMessage("Use this component to translate words and sentences between different languages. This component needs Internet access, as it will request translations to the Yandex.Translate service. Specify the source and target language in the form source-target using two letter language codes. So\"en-es\" will translate from English to Spanish while \"es-ru\" will translate from Spanish to Russian. If you leave out the source language, the service will attempt to detect the source language. So providing just \"es\" will attempt to detect the source language and translate it to Spanish.<p /> This component is powered by the Yandex translation service. See http://api.yandex.com/translate/ for more information, including the list of available languages and the meanings of the language codes and status codes. <p />Note: Translation happens asynchronously in the background. When the translation is complete, the \"GotTranslation\" event is triggered.")
  @Description("")
  String YandexTranslateHelpStringComponentPallette();


  /* Properties */
  @DefaultMessage("AboutScreen")
  @Description("")
  String AboutScreenProperties();

  @DefaultMessage("Information about the screen. It appears when \"About this Application\" is selected from the system menu. Use it to inform people about your app. In multiple screen apps, each screen has its own AboutScreen info.")
  @Description("")
  String AboutScreenPropertyDescriptions();

  @DefaultMessage("AboveRangeEventEnabled")
  @Description("")
  String AboveRangeEventEnabledProperties();

  @DefaultMessage("Whether the AboveRange event should fire when the distance goes above the TopOfRange.")
  @Description("")
  String AboveRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("AccentColor")
  @Description("")
  String AccentColorProperties();

  @DefaultMessage("This is the accent color used for highlights and other user interface accents.")
  @Description("")
  String AccentColorPropertyDescriptions();

  @DefaultMessage("Accuracy")
  @Description("")
  String AccuracyProperties();

  @DefaultMessage("")
  @Description("")
  String AccuracyPropertyDescriptions();

  @DefaultMessage("Action")
  @Description("")
  String ActionProperties();

  @DefaultMessage("")
  @Description("")
  String ActionPropertyDescriptions();

  @DefaultMessage("ActionBar")
  @Description("")
  String ActionBarProperties();

  @DefaultMessage("")
  @Description("")
  String ActionBarPropertyDescriptions();

  @DefaultMessage("ActivityClass")
  @Description("")
  String ActivityClassProperties();

  @DefaultMessage("")
  @Description("")
  String ActivityClassPropertyDescriptions();

  @DefaultMessage("ActivityPackage")
  @Description("")
  String ActivityPackageProperties();

  @DefaultMessage("")
  @Description("")
  String ActivityPackagePropertyDescriptions();

  @DefaultMessage("AddressesAndNames")
  @Description("")
  String AddressesAndNamesProperties();

  @DefaultMessage("The addresses and names of paired Bluetooth devices")
  @Description("")
  String AddressesAndNamesPropertyDescriptions();

  @DefaultMessage("AlignHorizontal")
  @Description("")
  String AlignHorizontalProperties();

  @DefaultMessage("A number that encodes how contents of the arrangement are aligned horizontally. The choices are: 1 = left aligned, 2 = right aligned, 3 = horizontally centered. Alignment has no effect if the arrangement''s width is automatic.")
  @Description("")
  String AlignHorizontalPropertyDescriptions();

  @DefaultMessage("AlignVertical")
  @Description("")
  String AlignVerticalProperties();

  @DefaultMessage("A number that encodes how the contents of the arrangement are aligned vertically. The choices are: 1 = aligned at the top, 2 = vertically centered, 3 = aligned at the bottom. Alignment has no effect if the arrangement''s height is automatic.")
  @Description("")
  String AlignVerticalPropertyDescriptions();

  @DefaultMessage("AllowCookies")
  @Description("")
  String AllowCookiesProperties();

  @DefaultMessage("Whether the cookies from a response should be saved and used in subsequent requests. Cookies are only supported on Android version 2.3 or greater.")
  @Description("")
  String AllowCookiesPropertyDescriptions();

  @DefaultMessage("Altitude")
  @Description("")
  String AltitudeProperties();

  @DefaultMessage("")
  @Description("")
  String AltitudePropertyDescriptions();

  @DefaultMessage("AnchorHorizontal")
  @Description("")
  String AnchorHorizontalProperties();

  @DefaultMessage("The horizontal alignment property controls where the Marker''s anchor is located relative to its width.")
  @Description("")
  String AnchorHorizontalPropertyDescriptions();

  @DefaultMessage("AnchorVertical")
  @Description("")
  String AnchorVerticalProperties();

  @DefaultMessage("The vertical alignment property controls where the Marker''s anchor is located relative to its height.")
  @Description("")
  String AnchorVerticalPropertyDescriptions();

  @DefaultMessage("Angle")
  @Description("")
  String AngleProperties();

  @DefaultMessage("")
  @Description("")
  String AnglePropertyDescriptions();

  @DefaultMessage("Animation")
  @Description("")
  String AnimationProperties();

  @DefaultMessage("This is a limited form of animation that can attach a small number of motion types to images. The allowable motions are ScrollRightSlow, ScrollRight, ScrollRightFast, ScrollLeftSlow, ScrollLeft, ScrollLeftFast, and Stop")
  @Description("")
  String AnimationPropertyDescriptions();

  @DefaultMessage("ApiKey")
  @Description("")
  String ApiKeyProperties();

  @DefaultMessage("Your Google API Key. For help, click on the questionmark (?) next to the FusiontablesControl component in the Palette.")
  @Description("")
  String ApiKeyPropertyDescriptions();

  @DefaultMessage("AppName")
  @Description("")
  String AppNameProperties();

  @DefaultMessage("This is the display name of the installed application in the phone.If the AppName is blank, it will be set to the name of the project when the project is built.")
  @Description("")
  String AppNamePropertyDescriptions();

  @DefaultMessage("Available")
  @Description("")
  String AvailableProperties();

  @DefaultMessage("Reports whether or not the device has a proximity sensor")
  @Description("")
  String AvailablePropertyDescriptions();

  @DefaultMessage("AvailableCountries")
  @Description("")
  String AvailableCountriesProperties();

  @DefaultMessage("List of the country codes available on this device for use with TextToSpeech. Check the Android developer documentation under supported languages to find the meanings of these abbreviations.")
  @Description("")
  String AvailableCountriesPropertyDescriptions();

  @DefaultMessage("AvailableLanguages")
  @Description("")
  String AvailableLanguagesProperties();

  @DefaultMessage("List of the languages available on this device for use with TextToSpeech. Check the Android developer documentation under supported languages to find the meanings of these abbreviations.")
  @Description("")
  String AvailableLanguagesPropertyDescriptions();

  @DefaultMessage("AvailableProviders")
  @Description("")
  String AvailableProvidersProperties();

  @DefaultMessage("")
  @Description("")
  String AvailableProvidersPropertyDescriptions();

  @DefaultMessage("Azimuth")
  @Description("")
  String AzimuthProperties();

  @DefaultMessage("")
  @Description("")
  String AzimuthPropertyDescriptions();

  @DefaultMessage("BackgroundColor")
  @Description("")
  String BackgroundColorProperties();

  @DefaultMessage("Returns the component''s background color")
  @Description("")
  String BackgroundColorPropertyDescriptions();

  @DefaultMessage("BackgroundImage")
  @Description("")
  String BackgroundImageProperties();

  @DefaultMessage("The screen background image.")
  @Description("")
  String BackgroundImagePropertyDescriptions();

  @DefaultMessage("BallotOptions")
  @Description("")
  String BallotOptionsProperties();

  @DefaultMessage("The list of ballot options.")
  @Description("")
  String BallotOptionsPropertyDescriptions();

  @DefaultMessage("BallotQuestion")
  @Description("")
  String BallotQuestionProperties();

  @DefaultMessage("The question to be voted on.")
  @Description("")
  String BallotQuestionPropertyDescriptions();

  @DefaultMessage("BelowRangeEventEnabled")
  @Description("")
  String BelowRangeEventEnabledProperties();

  @DefaultMessage("Whether the BelowRange event should fire when the distance goes below the BottomOfRange.")
  @Description("")
  String BelowRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("BluetoothClient")
  @Description("")
  String BluetoothClientProperties();

  @DefaultMessage("The BluetoothClient component that should be used for communication.")
  @Description("")
  String BluetoothClientPropertyDescriptions();

  @DefaultMessage("BottomOfRange")
  @Description("")
  String BottomOfRangeProperties();

  @DefaultMessage("The bottom of the range used for the BelowRange, WithinRange, and AboveRange events.")
  @Description("")
  String BottomOfRangePropertyDescriptions();

  @DefaultMessage("BoundingBox")
  @Description("")
  String BoundingBoxProperties();

  @DefaultMessage("Bounding box for the map stored as [[North, West], [South, East]].")
  @Description("")
  String BoundingBoxPropertyDescriptions();

  @DefaultMessage("CalibrateStrideLength")
  @Description("")
  String CalibrateStrideLengthProperties();

  @DefaultMessage("")
  @Description("")
  String CalibrateStrideLengthPropertyDescriptions();

  @DefaultMessage("CenterFromString")
  @Description("")
  String CenterFromStringProperties();

  @DefaultMessage("<p>Set the initial center coordinate of the map. The value is specified as a comma-separated pair of decimal latitude and longitude coordinates, for example, <code>42.359144, -71.093612</code>.</p><p>In blocks code, it is recommended for performance reasons to use SetCenter with numerical latitude and longitude rather than convert to the string representation for use with this property.</p>")
  @Description("")
  String CenterFromStringPropertyDescriptions();

  @DefaultMessage("CharacterEncoding")
  @Description("")
  String CharacterEncodingProperties();

  @DefaultMessage("")
  @Description("")
  String CharacterEncodingPropertyDescriptions();

  @DefaultMessage("Checked")
  @Description("")
  String CheckedProperties();

  @DefaultMessage("")
  @Description("")
  String CheckedPropertyDescriptions();

  @DefaultMessage("CloseScreenAnimation")
  @Description("")
  String CloseScreenAnimationProperties();

  @DefaultMessage("The animation for closing current screen and returning to the previous screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none")
  @Description("")
  String CloseScreenAnimationPropertyDescriptions();

  @DefaultMessage("ColorChangedEventEnabled")
  @Description("")
  String ColorChangedEventEnabledProperties();

  @DefaultMessage("Whether the ColorChanged event should fire when the DetectColor property is set to True and the detected color changes.")
  @Description("")
  String ColorChangedEventEnabledPropertyDescriptions();

  @DefaultMessage("ColorLeft")
  @Description("")
  String ColorLeftProperties();

  @DefaultMessage("The color of slider to the left of the thumb.")
  @Description("")
  String ColorLeftPropertyDescriptions();

  @DefaultMessage("ColorRight")
  @Description("")
  String ColorRightProperties();

  @DefaultMessage("The color of slider to the left of the thumb.")
  @Description("")
  String ColorRightPropertyDescriptions();

  @DefaultMessage("Columns")
  @Description("")
  String ColumnsProperties();

  @DefaultMessage("")
  @Description("")
  String ColumnsPropertyDescriptions();

  @DefaultMessage("ConsumerKey")
  @Description("")
  String ConsumerKeyProperties();

  @DefaultMessage("The the consumer key to be used when authorizing with Twitter via OAuth.")
  @Description("")
  String ConsumerKeyPropertyDescriptions();

  @DefaultMessage("ConsumerSecret")
  @Description("")
  String ConsumerSecretProperties();

  @DefaultMessage("The consumer secret to be used when authorizing with Twitter via OAuth")
  @Description("")
  String ConsumerSecretPropertyDescriptions();

  @DefaultMessage("ContactName")
  @Description("")
  String ContactNameProperties();

  @DefaultMessage("")
  @Description("")
  String ContactNamePropertyDescriptions();

  @DefaultMessage("ContactUri")
  @Description("")
  String ContactUriProperties();

  @DefaultMessage("URI that specifies the location of the contact on the device.")
  @Description("")
  String ContactUriPropertyDescriptions();

  @DefaultMessage("Country")
  @Description("")
  String CountryProperties();

  @DefaultMessage("Country code to use for speech generation. This can affect the pronounciation. For example, British English (GBR) will sound different from US English (USA). Not every country code will affect every language.")
  @Description("")
  String CountryPropertyDescriptions();

  @DefaultMessage("CurrentAddress")
  @Description("")
  String CurrentAddressProperties();

  @DefaultMessage("")
  @Description("")
  String CurrentAddressPropertyDescriptions();

  @DefaultMessage("CurrentPageTitle")
  @Description("")
  String CurrentPageTitleProperties();

  @DefaultMessage("Title of the page currently viewed")
  @Description("")
  String CurrentPageTitlePropertyDescriptions();

  @DefaultMessage("CurrentUrl")
  @Description("")
  String CurrentUrlProperties();

  @DefaultMessage("URL of the page currently viewed. This could be different from the Home URL if new pages were visited by following links.")
  @Description("")
  String CurrentUrlPropertyDescriptions();

  @DefaultMessage("DataType")
  @Description("")
  String DataTypeProperties();

  @DefaultMessage("")
  @Description("")
  String DataTypePropertyDescriptions();

  @DefaultMessage("DataUri")
  @Description("")
  String DataUriProperties();

  @DefaultMessage("")
  @Description("")
  String DataUriPropertyDescriptions();

  @DefaultMessage("Day")
  @Description("")
  String DayProperties();

  @DefaultMessage("the Day of the month that was last picked using the DatePicker.")
  @Description("")
  String DayPropertyDescriptions();

  @DefaultMessage("DefaultRedisServer")
  @Description("")
  String DefaultRedisServerProperties();

  @DefaultMessage("The Default Redis Server to use.")
  @Description("")
  String DefaultRedisServerPropertyDescriptions();

  @DefaultMessage("DefaultURL")
  @Description("")
  String DefaultURLProperties();

  @DefaultMessage("")
  @Description("")
  String DefaultURLPropertyDescriptions();

  @DefaultMessage("DelimiterByte")
  @Description("")
  String DelimiterByteProperties();

  @DefaultMessage("")
  @Description("")
  String DelimiterBytePropertyDescriptions();

  @DefaultMessage("Description")
  @Description("")
  String DescriptionProperties();

  @DefaultMessage("The description displayed in the info window that appears when the user clicks on the map feature.")
  @Description("")
  String DescriptionPropertyDescriptions();

  @DefaultMessage("DetectColor")
  @Description("")
  String DetectColorProperties();

  @DefaultMessage("Whether the sensor should detect color or light. True indicates that the sensor should detect color; False indicates that the sensor should detect light. If the DetectColor property is set to True, the BelowRange, WithinRange, and AboveRange events will not occur and the sensor will not generate color. If the DetectColor property is set to False, the ColorChanged event will not occur.")
  @Description("")
  String DetectColorPropertyDescriptions();

  @DefaultMessage("DeveloperBucket")
  @Description("")
  String DeveloperBucketProperties();

  @DefaultMessage("")
  @Description("")
  String DeveloperBucketPropertyDescriptions();

  @DefaultMessage("DirectMessages")
  @Description("")
  String DirectMessagesProperties();

  @DefaultMessage("This property contains a list of the most recent messages mentioning the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>Authorized</code> event.</li> <li> Call the <code>RequestDirectMessages</code> method.</li> <li> Wait for the <code>DirectMessagesReceived</code> event.</li></ol>The value of this property will then be set to the list of direct messages retrieved (and maintain that value until any subsequent call to <code>RequestDirectMessages</code>).")
  @Description("")
  String DirectMessagesPropertyDescriptions();

  @DefaultMessage("Distance")
  @Description("")
  String DistanceProperties();

  @DefaultMessage("Returns the distance from the object to the device")
  @Description("")
  String DistancePropertyDescriptions();

  @DefaultMessage("DistanceInterval")
  @Description("")
  String DistanceIntervalProperties();

  @DefaultMessage("Determines the minimum distance interval, in meters, that the sensor will try to use for sending out location updates. For example, if this is set to 5, then the sensor will fire a LocationChanged event only after 5 meters have been traversed. However, the sensor does not guarantee that an update will be received at exactly the distance interval. It may take more than 5 meters to fire an event, for instance.")
  @Description("")
  String DistanceIntervalPropertyDescriptions();

  @DefaultMessage("Draggable")
  @Description("")
  String DraggableProperties();

  @DefaultMessage("The Draggable property is used to set whether or not the user can drag the Marker by long-pressing and then dragging the marker to a new location.")
  @Description("")
  String DraggablePropertyDescriptions();

  @DefaultMessage("DriveMotors")
  @Description("")
  String DriveMotorsProperties();

  @DefaultMessage("The motor ports that are used for driving: the left wheel''s motor port followed by the right wheel''s motor port.")
  @Description("")
  String DriveMotorsPropertyDescriptions();

  @DefaultMessage("EastLongitude")
  @Description("")
  String EastLongitudeProperties();

  @DefaultMessage("")
  @Description("")
  String EastLongitudePropertyDescriptions();

  @DefaultMessage("ElapsedTime")
  @Description("")
  String ElapsedTimeProperties();

  @DefaultMessage("Time elapsed in milliseconds since the pedometer was started.")
  @Description("")
  String ElapsedTimePropertyDescriptions();

  @DefaultMessage("Elements")
  @Description("")
  String ElementsProperties();

  @DefaultMessage("returns a list of text elements to be picked from.")
  @Description("")
  String ElementsPropertyDescriptions();

  @DefaultMessage("ElementsFromString")
  @Description("")
  String ElementsFromStringProperties();

  @DefaultMessage("sets the Spinner list to the elements passed in the comma-separated string")
  @Description("")
  String ElementsFromStringPropertyDescriptions();

  @DefaultMessage("EmailAddress")
  @Description("")
  String EmailAddressProperties();

  @DefaultMessage("")
  @Description("")
  String EmailAddressPropertyDescriptions();

  @DefaultMessage("EmailAddressList")
  @Description("")
  String EmailAddressListProperties();

  @DefaultMessage("")
  @Description("")
  String EmailAddressListPropertyDescriptions();

  @DefaultMessage("EnableInfobox")
  @Description("")
  String EnableInfoboxProperties();

  @DefaultMessage("Enable or disable the infobox window display when the user taps the feature.")
  @Description("")
  String EnableInfoboxPropertyDescriptions();

  @DefaultMessage("EnablePan")
  @Description("")
  String EnablePanProperties();

  @DefaultMessage("Enable two-finger panning of the Map")
  @Description("")
  String EnablePanPropertyDescriptions();

  @DefaultMessage("EnableRotation")
  @Description("")
  String EnableRotationProperties();

  @DefaultMessage("If set to true, the user can use multitouch gestures to rotate the map around its current center.")
  @Description("")
  String EnableRotationPropertyDescriptions();

  @DefaultMessage("EnableSpeedRegulation")
  @Description("")
  String EnableSpeedRegulationProperties();

  @DefaultMessage("The robot adjusts the power to maintain the speed if speed regulation is enabled.")
  @Description("")
  String EnableSpeedRegulationPropertyDescriptions();

  @DefaultMessage("EnableZoom")
  @Description("")
  String EnableZoomProperties();

  @DefaultMessage("If this property is set to true, multitouch zoom gestures are allowed on the map. Otherwise, the map zoom cannot be changed by the user except via the zoom control buttons.")
  @Description("")
  String EnableZoomPropertyDescriptions();

  @DefaultMessage("Enabled")
  @Description("")
  String EnabledProperties();

  @DefaultMessage("If set, user can tap check box to cause action.")
  @Description("")
  String EnabledPropertyDescriptions();

  @DefaultMessage("ExtraKey")
  @Description("")
  String ExtraKeyProperties();

  @DefaultMessage("Returns the extra key that will be passed to the activity.DEPRECATED: New code should use Extras property instead.")
  @Description("")
  String ExtraKeyPropertyDescriptions();

  @DefaultMessage("ExtraValue")
  @Description("")
  String ExtraValueProperties();

  @DefaultMessage("Returns the extra value that will be passed to the activity.DEPRECATED: New code should use Extras property instead.")
  @Description("")
  String ExtraValuePropertyDescriptions();

  @DefaultMessage("Extras")
  @Description("")
  String ExtrasProperties();

  @DefaultMessage("")
  @Description("")
  String ExtrasPropertyDescriptions();

  @DefaultMessage("Features")
  @Description("")
  String FeaturesProperties();

  @DefaultMessage("The list of features placed on this map. This list also includes any features created by calls to FeatureFromDescription")
  @Description("")
  String FeaturesPropertyDescriptions();

  @DefaultMessage("FeaturesFromGeoJSON")
  @Description("")
  String FeaturesFromGeoJSONProperties();

  @DefaultMessage("Loads a collection of features from the given string. If the string is not valid GeoJSON, the ErrorLoadingFeatureCollection error will be run with url = <string>.")
  @Description("")
  String FeaturesFromGeoJSONPropertyDescriptions();

  @DefaultMessage("FillColor")
  @Description("")
  String FillColorProperties();

  @DefaultMessage("The paint color used to fill in the map feature.")
  @Description("")
  String FillColorPropertyDescriptions();

  @DefaultMessage("FirebaseToken")
  @Description("")
  String FirebaseTokenProperties();

  @DefaultMessage("")
  @Description("")
  String FirebaseTokenPropertyDescriptions();

  @DefaultMessage("FirebaseURL")
  @Description("")
  String FirebaseURLProperties();

  @DefaultMessage("Gets the URL for this FirebaseDB.")
  @Description("")
  String FirebaseURLPropertyDescriptions();

  @DefaultMessage("FollowLinks")
  @Description("")
  String FollowLinksProperties();

  @DefaultMessage("Determines whether to follow links when they are tapped in the WebViewer. If you follow links, you can use GoBack and GoForward to navigate the browser history.")
  @Description("")
  String FollowLinksPropertyDescriptions();

  @DefaultMessage("Followers")
  @Description("")
  String FollowersProperties();

  @DefaultMessage("This property contains a list of the followers of the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Call the <code>RequestFollowers</code> method.</li> <li> Wait for the <code>FollowersReceived</code> event.</li></ol>The value of this property will then be set to the list of followers (and maintain its value until any subsequent call to <code>RequestFollowers</code>).")
  @Description("")
  String FollowersPropertyDescriptions();

  @DefaultMessage("FontBold")
  @Description("")
  String FontBoldProperties();

  @DefaultMessage("If set, button text is displayed in bold.")
  @Description("")
  String FontBoldPropertyDescriptions();

  @DefaultMessage("FontItalic")
  @Description("")
  String FontItalicProperties();

  @DefaultMessage("If set, button text is displayed in italics.")
  @Description("")
  String FontItalicPropertyDescriptions();

  @DefaultMessage("FontSize")
  @Description("")
  String FontSizeProperties();

  @DefaultMessage("Point size for button text.")
  @Description("")
  String FontSizePropertyDescriptions();

  @DefaultMessage("FontTypeface")
  @Description("")
  String FontTypefaceProperties();

  @DefaultMessage("Font family for button text.")
  @Description("")
  String FontTypefacePropertyDescriptions();

  @DefaultMessage("FriendTimeline")
  @Description("")
  String FriendTimelineProperties();

  @DefaultMessage("This property contains the 20 most recent messages of users being followed. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Specify users to follow with one or more calls to the <code>Follow</code> method.</li> <li> Call the <code>RequestFriendTimeline</code> method.</li> <li> Wait for the <code>FriendTimelineReceived</code> event.</li> </ol>The value of this property will then be set to the list of messages (and maintain its value until any subsequent call to <code>RequestFriendTimeline</code>.")
  @Description("")
  String FriendTimelinePropertyDescriptions();

  @DefaultMessage("FullScreen")
  @Description("")
  String FullScreenProperties();

  @DefaultMessage("")
  @Description("")
  String FullScreenPropertyDescriptions();

  @DefaultMessage("GameId")
  @Description("")
  String GameIdProperties();

  @DefaultMessage("The game name for this application. The same game ID can have one or more game instances.")
  @Description("")
  String GameIdPropertyDescriptions();

  @DefaultMessage("GenerateColor")
  @Description("")
  String GenerateColorProperties();

  @DefaultMessage("The color that should generated by the sensor. Only None, Red, Green, or Blue are valid values. The sensor will not generate color when the DetectColor property is set to True.")
  @Description("")
  String GenerateColorPropertyDescriptions();

  @DefaultMessage("GenerateLight")
  @Description("")
  String GenerateLightProperties();

  @DefaultMessage("Whether the light sensor should generate light.")
  @Description("")
  String GenerateLightPropertyDescriptions();

  @DefaultMessage("GoogleVoiceEnabled")
  @Description("")
  String GoogleVoiceEnabledProperties();

  @DefaultMessage("If true, then SendMessage will attempt to send messages over Wifi using Google Voice. This requires that the Google Voice app must be installed and set up on the phone or tablet, with a Google Voice account. If GoogleVoiceEnabled is false, the device must have phone and texting service in order to send or receive messages with this component.")
  @Description("")
  String GoogleVoiceEnabledPropertyDescriptions();

  @DefaultMessage("HTMLFormat")
  @Description("")
  String HTMLFormatProperties();

  @DefaultMessage("If true, then this label will show html text else it will show plain text. Note: Not all HTML is supported.")
  @Description("")
  String HTMLFormatPropertyDescriptions();

  @DefaultMessage("HasAccuracy")
  @Description("")
  String HasAccuracyProperties();

  @DefaultMessage("")
  @Description("")
  String HasAccuracyPropertyDescriptions();

  @DefaultMessage("HasAltitude")
  @Description("")
  String HasAltitudeProperties();

  @DefaultMessage("")
  @Description("")
  String HasAltitudePropertyDescriptions();

  @DefaultMessage("HasLongitudeLatitude")
  @Description("")
  String HasLongitudeLatitudeProperties();

  @DefaultMessage("")
  @Description("")
  String HasLongitudeLatitudePropertyDescriptions();

  @DefaultMessage("HasMargins")
  @Description("")
  String HasMarginsProperties();

  @DefaultMessage("Reports whether or not the label appears with margins. All four margins (left, right, top, bottom) are the same. This property has no effect in the designer, where labels are always shown with margins.")
  @Description("")
  String HasMarginsPropertyDescriptions();

  @DefaultMessage("Heading")
  @Description("")
  String HeadingProperties();

  @DefaultMessage("Returns the sprite''s heading in degrees above the positive x-axis. Zero degrees is toward the right of the screen; 90 degrees is toward the top of the screen.")
  @Description("")
  String HeadingPropertyDescriptions();

  @DefaultMessage("Height")
  @Description("")
  String HeightProperties();

  @DefaultMessage("Specifies the component''s vertical height, measured in pixels.")
  @Description("")
  String HeightPropertyDescriptions();

  @DefaultMessage("HeightPercent")
  @Description("")
  String HeightPercentProperties();

  @DefaultMessage("Specifies the component''s vertical height as a percentage of the height of its parent Component.")
  @Description("")
  String HeightPercentPropertyDescriptions();

  @DefaultMessage("HighByteFirst")
  @Description("")
  String HighByteFirstProperties();

  @DefaultMessage("")
  @Description("")
  String HighByteFirstPropertyDescriptions();

  @DefaultMessage("Hint")
  @Description("")
  String HintProperties();

  @DefaultMessage("Text that should appear faintly in the input box to provide a hint as to what the user should enter. This can only be seen if the <code>Text</code> property is empty.")
  @Description("")
  String HintPropertyDescriptions();

  @DefaultMessage("HolePoints")
  @Description("")
  String HolePointsProperties();

  @DefaultMessage("")
  @Description("")
  String HolePointsPropertyDescriptions();

  @DefaultMessage("HolePointsFromString")
  @Description("")
  String HolePointsFromStringProperties();

  @DefaultMessage("Constructs holes in a polygon from a given list of coordinates per hole.")
  @Description("")
  String HolePointsFromStringPropertyDescriptions();

  @DefaultMessage("HomeUrl")
  @Description("")
  String HomeUrlProperties();

  @DefaultMessage("URL of the page the WebViewer should initially open to. Setting this will load the page.")
  @Description("")
  String HomeUrlPropertyDescriptions();

  @DefaultMessage("Hour")
  @Description("")
  String HourProperties();

  @DefaultMessage("The hour of the last time set using the time picker. The hour is in a 24 hour format. If the last time set was 11:53 pm, this property will return 23.")
  @Description("")
  String HourPropertyDescriptions();

  @DefaultMessage("Icon")
  @Description("")
  String IconProperties();

  @DefaultMessage("")
  @Description("")
  String IconPropertyDescriptions();

  @DefaultMessage("IgnoreSslErrors")
  @Description("")
  String IgnoreSslErrorsProperties();

  @DefaultMessage("Determine whether or not to ignore SSL errors. Set to true to ignore errors. Use this to accept self signed certificates from websites.")
  @Description("")
  String IgnoreSslErrorsPropertyDescriptions();

  @DefaultMessage("Image")
  @Description("")
  String ImageProperties();

  @DefaultMessage("Specifies the path of the component''s image. If there is both an Image and a BackgroundColor, only the Image will be visible.")
  @Description("")
  String ImagePropertyDescriptions();

  @DefaultMessage("ImageAsset")
  @Description("")
  String ImageAssetProperties();

  @DefaultMessage("The ImageAsset property is used to provide an alternative image for the Marker.")
  @Description("")
  String ImageAssetPropertyDescriptions();

  @DefaultMessage("InstanceId")
  @Description("")
  String InstanceIdProperties();

  @DefaultMessage("The game instance id. Taken together,the game ID and the instance ID uniquely identify the game.")
  @Description("")
  String InstanceIdPropertyDescriptions();

  @DefaultMessage("Instant")
  @Description("")
  String InstantProperties();

  @DefaultMessage("The instant of the last time set using the time picker")
  @Description("")
  String InstantPropertyDescriptions();

  @DefaultMessage("Interval")
  @Description("")
  String IntervalProperties();

  @DefaultMessage("The interval in milliseconds at which the sprite''s position is updated. For example, if the interval is 50 and the speed is 10, then the sprite will move 10 pixels every 50 milliseconds.")
  @Description("")
  String IntervalPropertyDescriptions();

  @DefaultMessage("InvitedInstances")
  @Description("")
  String InvitedInstancesProperties();

  @DefaultMessage("The set of game instances to which this player has been invited but has not yet joined. To ensure current values are returned, first invoke GetInstanceLists.")
  @Description("")
  String InvitedInstancesPropertyDescriptions();

  @DefaultMessage("IsAccepting")
  @Description("")
  String IsAcceptingProperties();

  @DefaultMessage("")
  @Description("")
  String IsAcceptingPropertyDescriptions();

  @DefaultMessage("IsConnected")
  @Description("")
  String IsConnectedProperties();

  @DefaultMessage("")
  @Description("")
  String IsConnectedPropertyDescriptions();

  @DefaultMessage("IsPlaying")
  @Description("")
  String IsPlayingProperties();

  @DefaultMessage("Reports whether the media is playing")
  @Description("")
  String IsPlayingPropertyDescriptions();

  @DefaultMessage("ItemBackgroundColor")
  @Description("")
  String ItemBackgroundColorProperties();

  @DefaultMessage("The background color of the ListPicker items.")
  @Description("")
  String ItemBackgroundColorPropertyDescriptions();

  @DefaultMessage("ItemTextColor")
  @Description("")
  String ItemTextColorProperties();

  @DefaultMessage("The text color of the ListPicker items.")
  @Description("")
  String ItemTextColorPropertyDescriptions();

  @DefaultMessage("JoinedInstances")
  @Description("")
  String JoinedInstancesProperties();

  @DefaultMessage("The set of game instances in which this player is participating. To ensure current values are returned, first invoke GetInstanceLists.")
  @Description("")
  String JoinedInstancesPropertyDescriptions();

  @DefaultMessage("KeepRunningWhenOnPause")
  @Description("")
  String KeepRunningWhenOnPauseProperties();

  @DefaultMessage("If set to true, it will keep sensing for proximity changes even when the app is not visible")
  @Description("")
  String KeepRunningWhenOnPausePropertyDescriptions();

  @DefaultMessage("KeyFile")
  @Description("")
  String KeyFileProperties();

  @DefaultMessage("Specifies the path of the private key file. This key file is used to get access to the FusionTables API.")
  @Description("")
  String KeyFilePropertyDescriptions();

  @DefaultMessage("Language")
  @Description("")
  String LanguageProperties();

  @DefaultMessage("Sets the language for TextToSpeech. This changes the way that words are pronounced, not the actual language that is spoken. For example setting the language to and speaking English text with sound like someone speaking English with a Frernch accent.")
  @Description("")
  String LanguagePropertyDescriptions();

  @DefaultMessage("LastMessage")
  @Description("")
  String LastMessageProperties();

  @DefaultMessage("")
  @Description("")
  String LastMessagePropertyDescriptions();

  @DefaultMessage("Latitude")
  @Description("")
  String LatitudeProperties();

  @DefaultMessage("")
  @Description("")
  String LatitudePropertyDescriptions();

  @DefaultMessage("Leader")
  @Description("")
  String LeaderProperties();

  @DefaultMessage("The game''s leader. At any time, each game instance has only one leader, but the leader may change with time. Initially, the leader is the game instance creator. Application writers determine special properties of the leader. The leader value is updated each time a successful communication is made with the server.")
  @Description("")
  String LeaderPropertyDescriptions();

  @DefaultMessage("LegacyMode")
  @Description("")
  String LegacyModeProperties();

  @DefaultMessage("Prior to the release that added this property the AccelerometerSensor component passed through sensor values directly as received from the Android system. However these values do not compensate for tablets that default to Landscape mode, requiring the MIT App Inventor programmer to compensate. However compensating would result in incorrect results in Portrait mode devices such as phones. We now detect Landscape mode tablets and perform the compensation. However if your project is already compensating for the change, you will now get incorrect results. Although our preferred solution is for you to update your project, you can also just set this property to “true” and our compensation code will be deactivated. Note: We recommend that you update your project as we may remove this property in a future release.")
  @Description("")
  String LegacyModePropertyDescriptions();

  @DefaultMessage("LineWidth")
  @Description("")
  String LineWidthProperties();

  @DefaultMessage("The width of lines drawn on the canvas.")
  @Description("")
  String LineWidthPropertyDescriptions();

  @DefaultMessage("LoadingDialogMessage")
  @Description("")
  String LoadingDialogMessageProperties();

  @DefaultMessage("Set the loading message for the dialog.")
  @Description("")
  String LoadingDialogMessagePropertyDescriptions();

  @DefaultMessage("LocationSensor")
  @Description("")
  String LocationSensorProperties();

  @DefaultMessage("Uses the provided LocationSensor for user location data rather than the built-in location provider.")
  @Description("")
  String LocationSensorPropertyDescriptions();

  @DefaultMessage("Longitude")
  @Description("")
  String LongitudeProperties();

  @DefaultMessage("")
  @Description("")
  String LongitudePropertyDescriptions();

  @DefaultMessage("Loop")
  @Description("")
  String LoopProperties();

  @DefaultMessage("If true, the player will loop when it plays. Setting Loop while the player is playing will affect the current playing.")
  @Description("")
  String LoopPropertyDescriptions();

  @DefaultMessage("Magnitude")
  @Description("")
  String MagnitudeProperties();

  @DefaultMessage("")
  @Description("")
  String MagnitudePropertyDescriptions();

  @DefaultMessage("MapType")
  @Description("")
  String MapTypeProperties();

  @DefaultMessage("The type of tile layer to use as the base of the map. Valid values are: 1 (Roads), 2 (Aerial), 3 (Terrain)")
  @Description("")
  String MapTypePropertyDescriptions();

  @DefaultMessage("MaxValue")
  @Description("")
  String MaxValueProperties();

  @DefaultMessage("Sets the maximum value of slider. Changing the maximum value also resets Thumbposition to be halfway between the minimum and the (new) maximum. If the new maximum is less than the current minimum, then minimum and maximum will both be set to this value. Setting MaxValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.")
  @Description("")
  String MaxValuePropertyDescriptions();

  @DefaultMessage("MaximumRange")
  @Description("")
  String MaximumRangeProperties();

  @DefaultMessage("Reports the Maximum Range of the device''s ProximitySensor")
  @Description("")
  String MaximumRangePropertyDescriptions();

  @DefaultMessage("Mentions")
  @Description("")
  String MentionsProperties();

  @DefaultMessage("This property contains a list of mentions of the logged-in user. Initially, the list is empty. To set it, the program must: <ol> <li> Call the <code>Authorize</code> method.</li> <li> Wait for the <code>IsAuthorized</code> event.</li> <li> Call the <code>RequestMentions</code> method.</li> <li> Wait for the <code>MentionsReceived</code> event.</li></ol>The value of this property will then be set to the list of mentions (and will maintain its value until any subsequent calls to <code>RequestMentions</code>).")
  @Description("")
  String MentionsPropertyDescriptions();

  @DefaultMessage("Message")
  @Description("")
  String MessageProperties();

  @DefaultMessage("The message that will be sent when the SendMessage method is called.")
  @Description("")
  String MessagePropertyDescriptions();

  @DefaultMessage("MinValue")
  @Description("")
  String MinValueProperties();

  @DefaultMessage("Sets the minimum value of slider. Changing the minimum value also resets Thumbposition to be halfway between the (new) minimum and the maximum. If the new minimum is greater than the current maximum, then minimum and maximum will both be set to this value. Setting MinValue resets the thumb position to halfway between MinValue and MaxValue and signals the PositionChanged event.")
  @Description("")
  String MinValuePropertyDescriptions();

  @DefaultMessage("MinimumInterval")
  @Description("")
  String MinimumIntervalProperties();

  @DefaultMessage("The minimum interval, in milliseconds, between sounds. If you play a sound, all further Play() calls will be ignored until the interval has elapsed.")
  @Description("")
  String MinimumIntervalPropertyDescriptions();

  @DefaultMessage("Minute")
  @Description("")
  String MinuteProperties();

  @DefaultMessage("The minute of the last time set using the time picker")
  @Description("")
  String MinutePropertyDescriptions();

  @DefaultMessage("Mode")
  @Description("")
  String ModeProperties();

  @DefaultMessage("The sensor mode can be a text constant of either \"rate\" or \"angle\", which correspond to SetAngleMode or SetRateMode respectively.")
  @Description("")
  String ModePropertyDescriptions();

  @DefaultMessage("Month")
  @Description("")
  String MonthProperties();

  @DefaultMessage("the number of the Month that was last picked using the DatePicker. Note that months start in 1 = January, 12 = December.")
  @Description("")
  String MonthPropertyDescriptions();

  @DefaultMessage("MonthInText")
  @Description("")
  String MonthInTextProperties();

  @DefaultMessage("Returns the name of the Month that was last picked using the DatePicker, in textual format.")
  @Description("")
  String MonthInTextPropertyDescriptions();

  @DefaultMessage("MotorPorts")
  @Description("")
  String MotorPortsProperties();

  @DefaultMessage("The motor ports that the motors are connected to. The ports are specified by a sequence of port letters.")
  @Description("")
  String MotorPortsPropertyDescriptions();

  @DefaultMessage("Moving")
  @Description("")
  String MovingProperties();

  @DefaultMessage("")
  @Description("")
  String MovingPropertyDescriptions();

  @DefaultMessage("MultiLine")
  @Description("")
  String MultiLineProperties();

  @DefaultMessage("If true, then this text box accepts multiple lines of input, which are entered using the return key. For single line text boxes there is a Done key instead of a return key, and pressing Done hides the keyboard. The app should call the HideKeyboard method to hide the keyboard for a mutiline text box.")
  @Description("")
  String MultiLinePropertyDescriptions();

  @DefaultMessage("Namespace")
  @Description("")
  String NamespaceProperties();

  @DefaultMessage("Namespace for storing data.")
  @Description("")
  String NamespacePropertyDescriptions();

  @DefaultMessage("NorthLatitude")
  @Description("")
  String NorthLatitudeProperties();

  @DefaultMessage("")
  @Description("")
  String NorthLatitudePropertyDescriptions();

  @DefaultMessage("NotifierLength")
  @Description("")
  String NotifierLengthProperties();

  @DefaultMessage("specifies the length of time that the alert is shown -- either \"short\" or \"long\".")
  @Description("")
  String NotifierLengthPropertyDescriptions();

  @DefaultMessage("NumbersOnly")
  @Description("")
  String NumbersOnlyProperties();

  @DefaultMessage("If true, then this text box accepts only numbers as keyboard input. Numbers can include a decimal point and an optional leading minus sign. This applies to keyboard input only. Even if NumbersOnly is true, you can use [set Text to] to enter any text at all.")
  @Description("")
  String NumbersOnlyPropertyDescriptions();

  @DefaultMessage("On")
  @Description("")
  String OnProperties();

  @DefaultMessage("")
  @Description("")
  String OnPropertyDescriptions();

  @DefaultMessage("OpenScreenAnimation")
  @Description("")
  String OpenScreenAnimationProperties();

  @DefaultMessage("The animation for switching to another screen. Valid options are default, fade, zoom, slidehorizontal, slidevertical, and none")
  @Description("")
  String OpenScreenAnimationPropertyDescriptions();

  @DefaultMessage("PaintColor")
  @Description("")
  String PaintColorProperties();

  @DefaultMessage("The color in which lines are drawn")
  @Description("")
  String PaintColorPropertyDescriptions();

  @DefaultMessage("PasswordVisible")
  @Description("")
  String PasswordVisibleProperties();

  @DefaultMessage("Visibility of password.")
  @Description("")
  String PasswordVisiblePropertyDescriptions();

  @DefaultMessage("Persist")
  @Description("")
  String PersistProperties();

  @DefaultMessage("If true, variables will retain their values when off-line and the App exits. Values will be uploaded to Firebase the next time the App is run while connected to the network. This is useful for applications which will gather data while not connected to the network. Note: AppendValue and RemoveFirst will not work correctly when off-line, they require a network connection.<br/><br/> <i>Note</i>: If you set Persist on any Firebase component, on any screen, it makes all Firebase components on all screens persistent. This is a limitation of the low level Firebase library. Also be aware that if you want to set persist to true, you should do so before connecting the Companion for incremental development.")
  @Description("")
  String PersistPropertyDescriptions();

  @DefaultMessage("PhoneNumber")
  @Description("")
  String PhoneNumberProperties();

  @DefaultMessage("The number that the message will be sent to when the SendMessage method is called. The number is a text string with the specified digits (e.g., 6505551212). Dashes, dots, and parentheses may be included (e.g., (650)-555-1212) but will be ignored; spaces should not be included.")
  @Description("")
  String PhoneNumberPropertyDescriptions();

  @DefaultMessage("PhoneNumberList")
  @Description("")
  String PhoneNumberListProperties();

  @DefaultMessage("")
  @Description("")
  String PhoneNumberListPropertyDescriptions();

  @DefaultMessage("Picture")
  @Description("")
  String PictureProperties();

  @DefaultMessage("")
  @Description("")
  String PicturePropertyDescriptions();

  @DefaultMessage("Pitch")
  @Description("")
  String PitchProperties();

  @DefaultMessage("Sets the Pitch for TextToSpeech The values should be between 0 and 2 where lower values lower the tone of synthesized voice and greater values raise it.")
  @Description("")
  String PitchPropertyDescriptions();

  @DefaultMessage("PlayOnlyInForeground")
  @Description("")
  String PlayOnlyInForegroundProperties();

  @DefaultMessage("If true, the player will pause playing when leaving the current screen; if false (default option), the player continues playing whenever the current screen is displaying or not.")
  @Description("")
  String PlayOnlyInForegroundPropertyDescriptions();

  @DefaultMessage("Players")
  @Description("")
  String PlayersProperties();

  @DefaultMessage("The current set of players for this game instance. Each player is designated by an email address, which is a string. The list of players is updated each time a successful communication is made with the game server.")
  @Description("")
  String PlayersPropertyDescriptions();

  @DefaultMessage("Points")
  @Description("")
  String PointsProperties();

  @DefaultMessage("Gets or sets the sequence of points used to draw the polygon.")
  @Description("")
  String PointsPropertyDescriptions();

  @DefaultMessage("PointsFromString")
  @Description("")
  String PointsFromStringProperties();

  @DefaultMessage("Constructs a polygon from the given list of coordinates.")
  @Description("")
  String PointsFromStringPropertyDescriptions();

  @DefaultMessage("PressedEventEnabled")
  @Description("")
  String PressedEventEnabledProperties();

  @DefaultMessage("Whether the Pressed event should fire when the touch sensor is pressed.")
  @Description("")
  String PressedEventEnabledPropertyDescriptions();

  @DefaultMessage("PrimaryColor")
  @Description("")
  String PrimaryColorProperties();

  @DefaultMessage("This is the primary color used for Material UI elements, such as the ActionBar.")
  @Description("")
  String PrimaryColorPropertyDescriptions();

  @DefaultMessage("PrimaryColorDark")
  @Description("")
  String PrimaryColorDarkProperties();

  @DefaultMessage("This is the primary color used for darker elements in Material UI.")
  @Description("")
  String PrimaryColorDarkPropertyDescriptions();

  @DefaultMessage("ProjectBucket")
  @Description("")
  String ProjectBucketProperties();

  @DefaultMessage("Gets the ProjectBucket for this FirebaseDB.")
  @Description("")
  String ProjectBucketPropertyDescriptions();

  @DefaultMessage("ProjectID")
  @Description("")
  String ProjectIDProperties();

  @DefaultMessage("Gets the ProjectID for this CloudDB project.")
  @Description("")
  String ProjectIDPropertyDescriptions();

  @DefaultMessage("Prompt")
  @Description("")
  String PromptProperties();

  @DefaultMessage("Text with the current title for the Spinner window")
  @Description("")
  String PromptPropertyDescriptions();

  @DefaultMessage("PromptforPermission")
  @Description("")
  String PromptforPermissionProperties();

  @DefaultMessage("If True, then prompt the user of the WebView to give permission to access the geolocation API. If False, then assume permission is granted.")
  @Description("")
  String PromptforPermissionPropertyDescriptions();

  @DefaultMessage("ProviderLocked")
  @Description("")
  String ProviderLockedProperties();

  @DefaultMessage("")
  @Description("")
  String ProviderLockedPropertyDescriptions();

  @DefaultMessage("ProviderName")
  @Description("")
  String ProviderNameProperties();

  @DefaultMessage("")
  @Description("")
  String ProviderNamePropertyDescriptions();

  @DefaultMessage("PublicInstances")
  @Description("")
  String PublicInstancesProperties();

  @DefaultMessage("The set of game instances that have been marked public. To ensure current values are returned, first invoke {@link #GetInstanceLists}.")
  @Description("")
  String PublicInstancesPropertyDescriptions();

  @DefaultMessage("Query")
  @Description("")
  String QueryProperties();

  @DefaultMessage("The query to send to the Fusion Tables API. <p>For legal query formats and examples, see the <a href=\"https://developers.google.com/fusiontables/docs/v2/getting_started\" target=\"_blank\">Fusion Tables API v2.0 reference manual</a>.</p> <p>Note that you do not need to worry about UTF-encoding the query. But you do need to make sure it follows the syntax described in the reference manual, which means that things like capitalization for names of columns matters, and that single quotes need to be used around column names if there are spaces in them.</p>")
  @Description("")
  String QueryPropertyDescriptions();

  @DefaultMessage("Radius")
  @Description("")
  String RadiusProperties();

  @DefaultMessage("The radius of the circle in meters.")
  @Description("")
  String RadiusPropertyDescriptions();

  @DefaultMessage("ReadMode")
  @Description("")
  String ReadModeProperties();

  @DefaultMessage("")
  @Description("")
  String ReadModePropertyDescriptions();

  @DefaultMessage("ReceivingEnabled")
  @Description("")
  String ReceivingEnabledProperties();

  @DefaultMessage("If set to 1 (OFF) no messages will be received. If set to 2 (FOREGROUND) or3 (ALWAYS) the component will respond to messages if it is running. If the app is not running then the message will be discarded if set to 2 (FOREGROUND). If set to 3 (ALWAYS) and the app is not running the phone will show a notification. Selecting the notification will bring up the app and signal the MessageReceived event. Messages received when the app is dormant will be queued, and so several MessageReceived events might appear when the app awakens. As an app developer, it would be a good idea to give your users control over this property, so they can make their phones ignore text messages when your app is installed.")
  @Description("")
  String ReceivingEnabledPropertyDescriptions();

  @DefaultMessage("RedisPort")
  @Description("")
  String RedisPortProperties();

  @DefaultMessage("The Redis Server port to use. Defaults to 6381")
  @Description("")
  String RedisPortPropertyDescriptions();

  @DefaultMessage("RedisServer")
  @Description("")
  String RedisServerProperties();

  @DefaultMessage("The Redis Server to use to store data. A setting of \"DEFAULT\" means that the MIT server will be used.")
  @Description("")
  String RedisServerPropertyDescriptions();

  @DefaultMessage("ReleasedEventEnabled")
  @Description("")
  String ReleasedEventEnabledProperties();

  @DefaultMessage("Whether the Released event should fire when the touch sensor is released.")
  @Description("")
  String ReleasedEventEnabledPropertyDescriptions();

  @DefaultMessage("RequestHeaders")
  @Description("")
  String RequestHeadersProperties();

  @DefaultMessage("The request headers, as a list of two-element sublists. The first element of each sublist represents the request header field name. The second element of each sublist represents the request header field values, either a single value or a list containing multiple values.")
  @Description("")
  String RequestHeadersPropertyDescriptions();

  @DefaultMessage("ResponseFileName")
  @Description("")
  String ResponseFileNameProperties();

  @DefaultMessage("The name of the file where the response should be saved. If SaveResponse is true and ResponseFileName is empty, then a new file name will be generated.")
  @Description("")
  String ResponseFileNamePropertyDescriptions();

  @DefaultMessage("Result")
  @Description("")
  String ResultProperties();

  @DefaultMessage("")
  @Description("")
  String ResultPropertyDescriptions();

  @DefaultMessage("ResultName")
  @Description("")
  String ResultNameProperties();

  @DefaultMessage("")
  @Description("")
  String ResultNamePropertyDescriptions();

  @DefaultMessage("ResultType")
  @Description("")
  String ResultTypeProperties();

  @DefaultMessage("")
  @Description("")
  String ResultTypePropertyDescriptions();

  @DefaultMessage("ResultUri")
  @Description("")
  String ResultUriProperties();

  @DefaultMessage("")
  @Description("")
  String ResultUriPropertyDescriptions();

  @DefaultMessage("ReverseDirection")
  @Description("")
  String ReverseDirectionProperties();

  @DefaultMessage("It specifies if the direction of the motors is reversed.")
  @Description("")
  String ReverseDirectionPropertyDescriptions();

  @DefaultMessage("Roll")
  @Description("")
  String RollProperties();

  @DefaultMessage("")
  @Description("")
  String RollPropertyDescriptions();

  @DefaultMessage("Rotates")
  @Description("")
  String RotatesProperties();

  @DefaultMessage("If true, the sprite image rotates to match the sprite''s heading. If false, the sprite image does not rotate when the sprite changes heading. The sprite rotates around its centerpoint.")
  @Description("")
  String RotatesPropertyDescriptions();

  @DefaultMessage("Rotation")
  @Description("")
  String RotationProperties();

  @DefaultMessage("Sets or gets the rotation of the map in decimal degrees if any")
  @Description("")
  String RotationPropertyDescriptions();

  @DefaultMessage("RotationAngle")
  @Description("")
  String RotationAngleProperties();

  @DefaultMessage("The angle at which the image picture appears rotated. This rotation does not appear on the designer screen, only on the device.")
  @Description("")
  String RotationAnglePropertyDescriptions();

  @DefaultMessage("Rows")
  @Description("")
  String RowsProperties();

  @DefaultMessage("")
  @Description("")
  String RowsPropertyDescriptions();

  @DefaultMessage("SaveResponse")
  @Description("")
  String SaveResponseProperties();

  @DefaultMessage("Whether the response should be saved in a file.")
  @Description("")
  String SaveResponsePropertyDescriptions();

  @DefaultMessage("SavedRecording")
  @Description("")
  String SavedRecordingProperties();

  @DefaultMessage("Specifies the path to the file where the recording should be stored. If this proprety is the empty string, then starting a recording will create a file in an appropriate location. If the property is not the empty string, it should specify a complete path to a file in an existing directory, including a file name with the extension .3gp.")
  @Description("")
  String SavedRecordingPropertyDescriptions();

  @DefaultMessage("ScalePictureToFit")
  @Description("")
  String ScalePictureToFitProperties();

  @DefaultMessage("Specifies whether the image should be resized to match the size of the ImageView.")
  @Description("")
  String ScalePictureToFitPropertyDescriptions();

  @DefaultMessage("ScaleUnits")
  @Description("")
  String ScaleUnitsProperties();

  @DefaultMessage("")
  @Description("")
  String ScaleUnitsPropertyDescriptions();

  @DefaultMessage("Scaling")
  @Description("")
  String ScalingProperties();

  @DefaultMessage("This property determines how the picture scales according to the Height or Width of the Image. Scale proportionally (0) preserves the picture aspect ratio. Scale to fit (1) matches the Image area, even if the aspect ratio changes.")
  @Description("")
  String ScalingPropertyDescriptions();

  @DefaultMessage("ScreenOrientation")
  @Description("")
  String ScreenOrientationProperties();

  @DefaultMessage("The requested screen orientation, specified as a text value. Commonly used values are landscape, portrait, sensor, user and unspecified. See the Android developer documentation for ActivityInfo.Screen_Orientation for the complete list of possible settings.")
  @Description("")
  String ScreenOrientationPropertyDescriptions();

  @DefaultMessage("Scrollable")
  @Description("")
  String ScrollableProperties();

  @DefaultMessage("When checked, there will be a vertical scrollbar on the screen, and the height of the application can exceed the physical height of the device. When unchecked, the application height is constrained to the height of the device.")
  @Description("")
  String ScrollablePropertyDescriptions();

  @DefaultMessage("SearchResults")
  @Description("")
  String SearchResultsProperties();

  @DefaultMessage("This property, which is initially empty, is set to a list of search results after the program: <ol><li>Calls the <code>SearchTwitter</code> method.</li> <li>Waits for the <code>SearchSuccessful</code> event.</li></ol>The value of the property will then be the same as the parameter to <code>SearchSuccessful</code>. Note that it is not necessary to call the <code>Authorize</code> method before calling <code>SearchTwitter</code>.")
  @Description("")
  String SearchResultsPropertyDescriptions();

  @DefaultMessage("Secure")
  @Description("")
  String SecureProperties();

  @DefaultMessage("Whether to invoke SSP (Simple Secure Pairing), which is supported on devices with Bluetooth v2.1 or higher. When working with embedded Bluetooth devices, this property may need to be set to False. For Android 2.0-2.2, this property setting will be ignored.")
  @Description("")
  String SecurePropertyDescriptions();

  @DefaultMessage("Selection")
  @Description("")
  String SelectionProperties();

  @DefaultMessage("Returns the current selected item in the spinner")
  @Description("")
  String SelectionPropertyDescriptions();

  @DefaultMessage("SelectionColor")
  @Description("")
  String SelectionColorProperties();

  @DefaultMessage("The color of the item when it is selected.")
  @Description("")
  String SelectionColorPropertyDescriptions();

  @DefaultMessage("SelectionIndex")
  @Description("")
  String SelectionIndexProperties();

  @DefaultMessage("The index of the currently selected item, starting at 1. If no item is selected, the value will be 0.")
  @Description("")
  String SelectionIndexPropertyDescriptions();

  @DefaultMessage("Sensitivity")
  @Description("")
  String SensitivityProperties();

  @DefaultMessage("A number that encodes how sensitive the accelerometer is. The choices are: 1 = weak, 2 = moderate, 3 = strong.")
  @Description("")
  String SensitivityPropertyDescriptions();

  @DefaultMessage("SensorPort")
  @Description("")
  String SensorPortProperties();

  @DefaultMessage("The sensor port that the sensor is connected to.")
  @Description("")
  String SensorPortPropertyDescriptions();

  @DefaultMessage("SensorValueChangedEventEnabled")
  @Description("")
  String SensorValueChangedEventEnabledProperties();

  @DefaultMessage("Whether the SensorValueChanged event should fire when the sensor value changed.")
  @Description("")
  String SensorValueChangedEventEnabledPropertyDescriptions();

  @DefaultMessage("ServiceAccountEmail")
  @Description("")
  String ServiceAccountEmailProperties();

  @DefaultMessage("The Service Account Email Address when service account authentication is in use.")
  @Description("")
  String ServiceAccountEmailPropertyDescriptions();

  @DefaultMessage("ServiceURL")
  @Description("")
  String ServiceURLProperties();

  @DefaultMessage("The URL of the Voting service")
  @Description("")
  String ServiceURLPropertyDescriptions();

  @DefaultMessage("ServiceUrl")
  @Description("")
  String ServiceUrlProperties();

  @DefaultMessage("The URL of the game server.")
  @Description("")
  String ServiceUrlPropertyDescriptions();

  @DefaultMessage("Shape")
  @Description("")
  String ShapeProperties();

  @DefaultMessage("Specifies the button''s shape (default, rounded, rectangular, oval). The shape will not be visible if an Image is being displayed.")
  @Description("")
  String ShapePropertyDescriptions();

  @DefaultMessage("ShowCompass")
  @Description("")
  String ShowCompassProperties();

  @DefaultMessage("Show a compass icon rotated based on user orientation.")
  @Description("")
  String ShowCompassPropertyDescriptions();

  @DefaultMessage("ShowFeedback")
  @Description("")
  String ShowFeedbackProperties();

  @DefaultMessage("Specifies if a visual feedback should be shown for a button that as an image as background.")
  @Description("")
  String ShowFeedbackPropertyDescriptions();

  @DefaultMessage("ShowFilterBar")
  @Description("")
  String ShowFilterBarProperties();

  @DefaultMessage("Sets visibility of ShowFilterBar. True will show the bar, False will hide it.")
  @Description("")
  String ShowFilterBarPropertyDescriptions();

  @DefaultMessage("ShowListsAsJson")
  @Description("")
  String ShowListsAsJsonProperties();

  @DefaultMessage("If false, lists will be converted to strings using Lisp notation, i.e., as symbols separated by spaces, e.g., (a 1 b2 (c d). If true, lists will appear as in Json or Python, e.g. [\"a\", 1, \"b\", 2, [\"c\", \"d\"]]. This property appears only in Screen 1, and the value for Screen 1 determines the behavior for all screens. The property defaults to \"false\" meaning that the App Inventor programmer must explicitly set it to \"true\" if JSON/Python syntax is desired. At some point in the future we will alter the system so that new projects are created with this property set to \"true\" by default. Existing projects will not be impacted. The App Inventor programmer can also set it back to \"false\" in newer projects if desired.")
  @Description("")
  String ShowListsAsJsonPropertyDescriptions();

  @DefaultMessage("ShowLoadingDialog")
  @Description("")
  String ShowLoadingDialogProperties();

  @DefaultMessage("Whether or not to show the loading dialog")
  @Description("")
  String ShowLoadingDialogPropertyDescriptions();

  @DefaultMessage("ShowScale")
  @Description("")
  String ShowScaleProperties();

  @DefaultMessage("Shows a scale reference on the map.")
  @Description("")
  String ShowScalePropertyDescriptions();

  @DefaultMessage("ShowStatusBar")
  @Description("")
  String ShowStatusBarProperties();

  @DefaultMessage("The status bar is the topmost bar on the screen. This property reports whether the status bar is visible.")
  @Description("")
  String ShowStatusBarPropertyDescriptions();

  @DefaultMessage("ShowUser")
  @Description("")
  String ShowUserProperties();

  @DefaultMessage("Show the user''s location on the map.")
  @Description("")
  String ShowUserPropertyDescriptions();

  @DefaultMessage("ShowZoom")
  @Description("")
  String ShowZoomProperties();

  @DefaultMessage("Show zoom buttons on the map.")
  @Description("")
  String ShowZoomPropertyDescriptions();

  @DefaultMessage("SimpleSteps")
  @Description("")
  String SimpleStepsProperties();

  @DefaultMessage("The number of simple steps taken since the pedometer has started.")
  @Description("")
  String SimpleStepsPropertyDescriptions();

  @DefaultMessage("Sizing")
  @Description("")
  String SizingProperties();

  @DefaultMessage("If set to fixed, screen layouts will be created for a single fixed-size screen and autoscaled. If set to responsive, screen layouts will use the actual resolution of the device. See the documentation on responsive design in App Inventor for more information. This property appears on Screen1 only and controls the sizing for all screens in the app.")
  @Description("")
  String SizingPropertyDescriptions();

  @DefaultMessage("Source")
  @Description("")
  String SourceProperties();

  @DefaultMessage("The \"path\" to the video. Usually, this will be the name of the video file, which should be added in the Designer.")
  @Description("")
  String SourcePropertyDescriptions();

  @DefaultMessage("SouthLatitude")
  @Description("")
  String SouthLatitudeProperties();

  @DefaultMessage("")
  @Description("")
  String SouthLatitudePropertyDescriptions();

  @DefaultMessage("SpeechRate")
  @Description("")
  String SpeechRateProperties();

  @DefaultMessage("Sets the SpeechRate for TextToSpeech. The values should be between 0 and 2 where lower values slow down the pitch and greater values accelerate it.")
  @Description("")
  String SpeechRatePropertyDescriptions();

  @DefaultMessage("Speed")
  @Description("")
  String SpeedProperties();

  @DefaultMessage("he speed at which the sprite moves. The sprite moves this many pixels every interval.")
  @Description("")
  String SpeedPropertyDescriptions();

  @DefaultMessage("StopBeforeDisconnect")
  @Description("")
  String StopBeforeDisconnectProperties();

  @DefaultMessage("Whether to stop the drive motors before disconnecting.")
  @Description("")
  String StopBeforeDisconnectPropertyDescriptions();

  @DefaultMessage("StopDetectionTimeout")
  @Description("")
  String StopDetectionTimeoutProperties();

  @DefaultMessage("The duration in milliseconds of idleness (no steps detected) after which to go into a \"stopped\" state")
  @Description("")
  String StopDetectionTimeoutPropertyDescriptions();

  @DefaultMessage("StrideLength")
  @Description("")
  String StrideLengthProperties();

  @DefaultMessage("Set the average stride length in meters.")
  @Description("")
  String StrideLengthPropertyDescriptions();

  @DefaultMessage("StrokeColor")
  @Description("")
  String StrokeColorProperties();

  @DefaultMessage("The paint color used to outline the map feature.")
  @Description("")
  String StrokeColorPropertyDescriptions();

  @DefaultMessage("StrokeWidth")
  @Description("")
  String StrokeWidthProperties();

  @DefaultMessage("The width of the stroke used to outline the map feature.")
  @Description("")
  String StrokeWidthPropertyDescriptions();

  @DefaultMessage("TachoCountChangedEventEnabled")
  @Description("")
  String TachoCountChangedEventEnabledProperties();

  @DefaultMessage("Whether the TachoCountChanged event should fire when the angle is changed.")
  @Description("")
  String TachoCountChangedEventEnabledPropertyDescriptions();

  @DefaultMessage("Text")
  @Description("")
  String TextProperties();

  @DefaultMessage("Text to display on button.")
  @Description("")
  String TextPropertyDescriptions();

  @DefaultMessage("TextAlignment")
  @Description("")
  String TextAlignmentProperties();

  @DefaultMessage("Left, center, or right.")
  @Description("")
  String TextAlignmentPropertyDescriptions();

  @DefaultMessage("TextColor")
  @Description("")
  String TextColorProperties();

  @DefaultMessage("Color for button text.")
  @Description("")
  String TextColorPropertyDescriptions();

  @DefaultMessage("TextSize")
  @Description("")
  String TextSizeProperties();

  @DefaultMessage("The text size of the listview items.")
  @Description("")
  String TextSizePropertyDescriptions();

  @DefaultMessage("TextToWrite")
  @Description("")
  String TextToWriteProperties();

  @DefaultMessage("")
  @Description("")
  String TextToWritePropertyDescriptions();

  @DefaultMessage("Theme")
  @Description("")
  String ThemeProperties();

  @DefaultMessage("Sets the theme used by the application.")
  @Description("")
  String ThemePropertyDescriptions();

  @DefaultMessage("ThumbColorActive")
  @Description("")
  String ThumbColorActiveProperties();

  @DefaultMessage("")
  @Description("")
  String ThumbColorActivePropertyDescriptions();

  @DefaultMessage("ThumbColorInactive")
  @Description("")
  String ThumbColorInactiveProperties();

  @DefaultMessage("")
  @Description("")
  String ThumbColorInactivePropertyDescriptions();

  @DefaultMessage("ThumbEnabled")
  @Description("")
  String ThumbEnabledProperties();

  @DefaultMessage("Sets whether or not to display the slider thumb.")
  @Description("")
  String ThumbEnabledPropertyDescriptions();

  @DefaultMessage("ThumbPosition")
  @Description("")
  String ThumbPositionProperties();

  @DefaultMessage("Sets the position of the slider thumb. If this value is greater than MaxValue, then it will be set to same value as MaxValue. If this value is less than MinValue, then it will be set to same value as MinValue.")
  @Description("")
  String ThumbPositionPropertyDescriptions();

  @DefaultMessage("TimeInterval")
  @Description("")
  String TimeIntervalProperties();

  @DefaultMessage("Determines the minimum time interval, in milliseconds, that the sensor will try to use for sending out location updates. However, location updates will only be received when the location of the phone actually changes, and use of the specified time interval is not guaranteed. For example, if 1000 is used as the time interval, location updates will never be fired sooner than 1000ms, but they may be fired anytime after.")
  @Description("")
  String TimeIntervalPropertyDescriptions();

  @DefaultMessage("TimerAlwaysFires")
  @Description("")
  String TimerAlwaysFiresProperties();

  @DefaultMessage("Will fire even when application is not showing on the screen if true")
  @Description("")
  String TimerAlwaysFiresPropertyDescriptions();

  @DefaultMessage("TimerEnabled")
  @Description("")
  String TimerEnabledProperties();

  @DefaultMessage("Fires timer if true")
  @Description("")
  String TimerEnabledPropertyDescriptions();

  @DefaultMessage("TimerInterval")
  @Description("")
  String TimerIntervalProperties();

  @DefaultMessage("Interval between timer events in ms")
  @Description("")
  String TimerIntervalPropertyDescriptions();

  @DefaultMessage("Title")
  @Description("")
  String TitleProperties();

  @DefaultMessage("The title displayed in the info window that appears when the user clicks on the map feature.")
  @Description("")
  String TitlePropertyDescriptions();

  @DefaultMessage("TitleVisible")
  @Description("")
  String TitleVisibleProperties();

  @DefaultMessage("The title bar is the top gray bar on the screen. This property reports whether the title bar is visible.")
  @Description("")
  String TitleVisiblePropertyDescriptions();

  @DefaultMessage("Token")
  @Description("")
  String TokenProperties();

  @DefaultMessage("This field contains the authentication token used to login to the backed Redis server. For the \"DEFAULT\" server, do not edit this value, the system will fill it in for you. A system administrator may also provide a special value to you which can be used to share data between multiple projects from multiple people. If using your own Redis server, set a password in the server''s config and enter it here.")
  @Description("")
  String TokenPropertyDescriptions();

  @DefaultMessage("TopOfRange")
  @Description("")
  String TopOfRangeProperties();

  @DefaultMessage("The top of the range used for the BelowRange, WithinRange, and AboveRange events.")
  @Description("")
  String TopOfRangePropertyDescriptions();

  @DefaultMessage("TrackColorActive")
  @Description("")
  String TrackColorActiveProperties();

  @DefaultMessage("Color of the toggle track when switched on")
  @Description("")
  String TrackColorActivePropertyDescriptions();

  @DefaultMessage("TrackColorInactive")
  @Description("")
  String TrackColorInactiveProperties();

  @DefaultMessage("Color of the toggle track when switched off")
  @Description("")
  String TrackColorInactivePropertyDescriptions();

  @DefaultMessage("TutorialURL")
  @Description("")
  String TutorialURLProperties();

  @DefaultMessage("A URL to use to populate the Tutorial Sidebar while editing a project. Used as a teaching aid.")
  @Description("")
  String TutorialURLPropertyDescriptions();

  @DefaultMessage("TwitPic_API_Key")
  @Description("")
  String TwitPic_API_KeyProperties();

  @DefaultMessage("The API Key for image uploading, provided by TwitPic.")
  @Description("")
  String TwitPic_API_KeyPropertyDescriptions();

  @DefaultMessage("Type")
  @Description("")
  String TypeProperties();

  @DefaultMessage("The type of the feature. For rectangles, this returns the text \"Rectangle\".")
  @Description("")
  String TypePropertyDescriptions();

  @DefaultMessage("Unit")
  @Description("")
  String UnitProperties();

  @DefaultMessage("The distance unit, which can be either \"cm\" or \"inch\".")
  @Description("")
  String UnitPropertyDescriptions();

  @DefaultMessage("Url")
  @Description("")
  String UrlProperties();

  @DefaultMessage("The URL for the web request.")
  @Description("")
  String UrlPropertyDescriptions();

  @DefaultMessage("UseExternalScanner")
  @Description("")
  String UseExternalScannerProperties();

  @DefaultMessage("If true App Inventor will look for and use an external scanning program such as \"Bar Code Scanner.\"")
  @Description("")
  String UseExternalScannerPropertyDescriptions();

  @DefaultMessage("UseFront")
  @Description("")
  String UseFrontProperties();

  @DefaultMessage("Specifies whether the front-facing camera should be used (when available). If the device does not have a front-facing camera, this option will be ignored and the camera will open normally.")
  @Description("")
  String UseFrontPropertyDescriptions();

  @DefaultMessage("UseGPS")
  @Description("")
  String UseGPSProperties();

  @DefaultMessage("")
  @Description("")
  String UseGPSPropertyDescriptions();

  @DefaultMessage("UseSSL")
  @Description("")
  String UseSSLProperties();

  @DefaultMessage("Set to true to use SSL to talk to CloudDB/Redis server. This should be set to True for the \"DEFAULT\" server.")
  @Description("")
  String UseSSLPropertyDescriptions();

  @DefaultMessage("UseServiceAuthentication")
  @Description("")
  String UseServiceAuthenticationProperties();

  @DefaultMessage("Indicates whether a service account should be used for authentication")
  @Description("")
  String UseServiceAuthenticationPropertyDescriptions();

  @DefaultMessage("UserChoice")
  @Description("")
  String UserChoiceProperties();

  @DefaultMessage("The ballot choice to send to the server, which must be set before <code>SendBallot</code> is called. This must be one of <code>BallotOptions</code>.")
  @Description("")
  String UserChoicePropertyDescriptions();

  @DefaultMessage("UserEmailAddress")
  @Description("")
  String UserEmailAddressProperties();

  @DefaultMessage("The email address associated with this device. This property has been deprecated and always returns the empty text value.")
  @Description("")
  String UserEmailAddressPropertyDescriptions();

  @DefaultMessage("UserId")
  @Description("")
  String UserIdProperties();

  @DefaultMessage("A text identifying the voter that is sent to the Voting server along with the vote. This must be set before <code>SendBallot</code> is called.")
  @Description("")
  String UserIdPropertyDescriptions();

  @DefaultMessage("UserLatitude")
  @Description("")
  String UserLatitudeProperties();

  @DefaultMessage("Returns the user''s latitude if ShowUser is enabled.")
  @Description("")
  String UserLatitudePropertyDescriptions();

  @DefaultMessage("UserLongitude")
  @Description("")
  String UserLongitudeProperties();

  @DefaultMessage("Returns the user''s longitude if ShowUser is enabled.")
  @Description("")
  String UserLongitudePropertyDescriptions();

  @DefaultMessage("Username")
  @Description("")
  String UsernameProperties();

  @DefaultMessage("The user name of the authorized user. Empty if there is no authorized user.")
  @Description("")
  String UsernamePropertyDescriptions();

  @DefaultMessage("UsesLocation")
  @Description("")
  String UsesLocationProperties();

  @DefaultMessage("Whether or not to give the application permission to use the Javascript geolocation API. This property is available only in the designer.")
  @Description("")
  String UsesLocationPropertyDescriptions();

  @DefaultMessage("VersionCode")
  @Description("")
  String VersionCodeProperties();

  @DefaultMessage("An integer value which must be incremented each time a new Android Application Package File (APK) is created for the Google Play Store.")
  @Description("")
  String VersionCodePropertyDescriptions();

  @DefaultMessage("VersionName")
  @Description("")
  String VersionNameProperties();

  @DefaultMessage("A string which can be changed to allow Google Play Store users to distinguish between different versions of the App.")
  @Description("")
  String VersionNamePropertyDescriptions();

  @DefaultMessage("Visible")
  @Description("")
  String VisibleProperties();

  @DefaultMessage("Specifies whether the component should be visible on the screen. Value is true if the component is showing and false if hidden.")
  @Description("")
  String VisiblePropertyDescriptions();

  @DefaultMessage("Volume")
  @Description("")
  String VolumeProperties();

  @DefaultMessage("Sets the volume to a number between 0 and 100. Values less than 0 will be treated as 0, and values greater than 100 will be treated as 100.")
  @Description("")
  String VolumePropertyDescriptions();

  @DefaultMessage("WalkSteps")
  @Description("")
  String WalkStepsProperties();

  @DefaultMessage("the number of walk steps taken since the pedometer has started.")
  @Description("")
  String WalkStepsPropertyDescriptions();

  @DefaultMessage("WebRTC")
  @Description("")
  String WebRTCProperties();

  @DefaultMessage("If True we are using WebRTC to talk to the server.")
  @Description("")
  String WebRTCPropertyDescriptions();

  @DefaultMessage("WebViewString")
  @Description("")
  String WebViewStringProperties();

  @DefaultMessage("Gets the WebView''s String, which is viewable through Javascript in the WebView as the window.AppInventor object")
  @Description("")
  String WebViewStringPropertyDescriptions();

  @DefaultMessage("WestLongitude")
  @Description("")
  String WestLongitudeProperties();

  @DefaultMessage("")
  @Description("")
  String WestLongitudePropertyDescriptions();

  @DefaultMessage("WheelDiameter")
  @Description("")
  String WheelDiameterProperties();

  @DefaultMessage("The diameter of the wheels used for driving.")
  @Description("")
  String WheelDiameterPropertyDescriptions();

  @DefaultMessage("Width")
  @Description("")
  String WidthProperties();

  @DefaultMessage("Specifies the component''s horizontal width, measured in pixels.")
  @Description("")
  String WidthPropertyDescriptions();

  @DefaultMessage("WidthPercent")
  @Description("")
  String WidthPercentProperties();

  @DefaultMessage("Specifies the component''s horizontal width as a percentage of the Width of its parent Component.")
  @Description("")
  String WidthPercentPropertyDescriptions();

  @DefaultMessage("WithinRangeEventEnabled")
  @Description("")
  String WithinRangeEventEnabledProperties();

  @DefaultMessage("Whether the WithinRange event should fire when the distance goes between the BottomOfRange and the TopOfRange.")
  @Description("")
  String WithinRangeEventEnabledPropertyDescriptions();

  @DefaultMessage("WriteType")
  @Description("")
  String WriteTypeProperties();

  @DefaultMessage("")
  @Description("")
  String WriteTypePropertyDescriptions();

  @DefaultMessage("X")
  @Description("")
  String XProperties();

  @DefaultMessage("The horizontal coordinate of the left edge of the sprite, increasing as the sprite moves to the right.")
  @Description("")
  String XPropertyDescriptions();

  @DefaultMessage("XAccel")
  @Description("")
  String XAccelProperties();

  @DefaultMessage("")
  @Description("")
  String XAccelPropertyDescriptions();

  @DefaultMessage("XAngularVelocity")
  @Description("")
  String XAngularVelocityProperties();

  @DefaultMessage("The angular velocity around the X axis, in degrees per second.")
  @Description("")
  String XAngularVelocityPropertyDescriptions();

  @DefaultMessage("Y")
  @Description("")
  String YProperties();

  @DefaultMessage("The vertical coordinate of the top of the sprite, increasing as the sprite moves down.")
  @Description("")
  String YPropertyDescriptions();

  @DefaultMessage("YAccel")
  @Description("")
  String YAccelProperties();

  @DefaultMessage("")
  @Description("")
  String YAccelPropertyDescriptions();

  @DefaultMessage("YAngularVelocity")
  @Description("")
  String YAngularVelocityProperties();

  @DefaultMessage("The angular velocity around the Y axis, in degrees per second.")
  @Description("")
  String YAngularVelocityPropertyDescriptions();

  @DefaultMessage("Year")
  @Description("")
  String YearProperties();

  @DefaultMessage("the Year that was last picked using the DatePicker")
  @Description("")
  String YearPropertyDescriptions();

  @DefaultMessage("Z")
  @Description("")
  String ZProperties();

  @DefaultMessage("How the sprite should be layered relative to other sprits, with higher-numbered layers in front of lower-numbered layers.")
  @Description("")
  String ZPropertyDescriptions();

  @DefaultMessage("ZAccel")
  @Description("")
  String ZAccelProperties();

  @DefaultMessage("")
  @Description("")
  String ZAccelPropertyDescriptions();

  @DefaultMessage("ZAngularVelocity")
  @Description("")
  String ZAngularVelocityProperties();

  @DefaultMessage("The angular velocity around the Z axis, in degrees per second.")
  @Description("")
  String ZAngularVelocityPropertyDescriptions();

  @DefaultMessage("ZoomLevel")
  @Description("")
  String ZoomLevelProperties();

  @DefaultMessage("The zoom level of the map. Valid values of ZoomLevel are dependent on the tile provider and the latitude and longitude of the map. For example, zoom levels are more constrained over oceans than dense city centers to conserve space for storing tiles, so valid values may be 1-7 over ocean and 1-18 over cities. Tile providers may send warning or error tiles if the zoom level is too great for the server to support.")
  @Description("")
  String ZoomLevelPropertyDescriptions();


  /* Methods */
  @DefaultMessage("AcceptConnection")
  @Description("")
  String AcceptConnectionMethods();

  @DefaultMessage("Accept an incoming connection with the Serial Port Profile (SPP).")
  @Description("")
  String AcceptConnectionMethodDescriptions();

  @DefaultMessage("AcceptConnectionWithUUID")
  @Description("")
  String AcceptConnectionWithUUIDMethods();

  @DefaultMessage("Accept an incoming connection with a specific UUID.")
  @Description("")
  String AcceptConnectionWithUUIDMethodDescriptions();

  @DefaultMessage("AddDays")
  @Description("")
  String AddDaysMethods();

  @DefaultMessage("An instant in time some days after the argument")
  @Description("")
  String AddDaysMethodDescriptions();

  @DefaultMessage("AddDuration")
  @Description("")
  String AddDurationMethods();

  @DefaultMessage("An instant in time some duration after the argument")
  @Description("")
  String AddDurationMethodDescriptions();

  @DefaultMessage("AddHours")
  @Description("")
  String AddHoursMethods();

  @DefaultMessage("An instant in time some hours after the argument")
  @Description("")
  String AddHoursMethodDescriptions();

  @DefaultMessage("AddMinutes")
  @Description("")
  String AddMinutesMethods();

  @DefaultMessage("An instant in time some minutes after the argument")
  @Description("")
  String AddMinutesMethodDescriptions();

  @DefaultMessage("AddMonths")
  @Description("")
  String AddMonthsMethods();

  @DefaultMessage("An instant in time some months after the argument")
  @Description("")
  String AddMonthsMethodDescriptions();

  @DefaultMessage("AddSeconds")
  @Description("")
  String AddSecondsMethods();

  @DefaultMessage("An instant in time some seconds after the argument")
  @Description("")
  String AddSecondsMethodDescriptions();

  @DefaultMessage("AddWeeks")
  @Description("")
  String AddWeeksMethods();

  @DefaultMessage("An instant in time some weeks after the argument")
  @Description("")
  String AddWeeksMethodDescriptions();

  @DefaultMessage("AddYears")
  @Description("")
  String AddYearsMethods();

  @DefaultMessage("An instant in time some years after the argument")
  @Description("")
  String AddYearsMethodDescriptions();

  @DefaultMessage("AppendToFile")
  @Description("")
  String AppendToFileMethods();

  @DefaultMessage("Appends text to the end of a file storage, creating the file if it does not exist. See the help text under SaveFile for information about where files are written.")
  @Description("")
  String AppendToFileMethodDescriptions();

  @DefaultMessage("AppendValue")
  @Description("")
  String AppendValueMethods();

  @DefaultMessage("Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.")
  @Description("")
  String AppendValueMethodDescriptions();

  @DefaultMessage("AppendValueToList")
  @Description("")
  String AppendValueToListMethods();

  @DefaultMessage("Append a value to the end of a list atomically. If two devices use this function simultaneously, both will be appended and no data lost.")
  @Description("")
  String AppendValueToListMethodDescriptions();

  @DefaultMessage("AskForPermission")
  @Description("")
  String AskForPermissionMethods();

  @DefaultMessage("Ask the user to grant access to a dangerous permission.")
  @Description("")
  String AskForPermissionMethodDescriptions();

  @DefaultMessage("Authorize")
  @Description("")
  String AuthorizeMethods();

  @DefaultMessage("Redirects user to login to Twitter via the Web browser using the OAuth protocol if we don''t already have authorization.")
  @Description("")
  String AuthorizeMethodDescriptions();

  @DefaultMessage("BearingToFeature")
  @Description("")
  String BearingToFeatureMethods();

  @DefaultMessage("Returns the bearing from the Marker to the given map feature, in degrees from due north. If the centroids parameter is true, the bearing will be to the center of the map feature. Otherwise, the bearing will be computed to the point in the feature nearest the Marker.")
  @Description("")
  String BearingToFeatureMethodDescriptions();

  @DefaultMessage("BearingToPoint")
  @Description("")
  String BearingToPointMethods();

  @DefaultMessage("Returns the bearing from the Marker to the given latitude and longitude, in degrees from due north.")
  @Description("")
  String BearingToPointMethodDescriptions();

  @DefaultMessage("Bounce")
  @Description("")
  String BounceMethods();

  @DefaultMessage("Makes this sprite bounce, as if off a wall. For normal bouncing, the edge argument should be the one returned by EdgeReached.")
  @Description("")
  String BounceMethodDescriptions();

  @DefaultMessage("Bounds")
  @Description("")
  String BoundsMethods();

  @DefaultMessage("Returns the bounding box of the Rectangle in the format ((North West) (South East)).")
  @Description("")
  String BoundsMethodDescriptions();

  @DefaultMessage("BuildRequestData")
  @Description("")
  String BuildRequestDataMethods();

  @DefaultMessage("Converts a list of two-element sublists, representing name and value pairs, to a string formatted as application/x-www-form-urlencoded media type, suitable to pass to PostText.")
  @Description("")
  String BuildRequestDataMethodDescriptions();

  @DefaultMessage("BytesAvailableToReceive")
  @Description("")
  String BytesAvailableToReceiveMethods();

  @DefaultMessage("Returns an estimate of the number of bytes that can be received without blocking")
  @Description("")
  String BytesAvailableToReceiveMethodDescriptions();

  @DefaultMessage("CanGoBack")
  @Description("")
  String CanGoBackMethods();

  @DefaultMessage("Returns true if the WebViewer can go back in the history list.")
  @Description("")
  String CanGoBackMethodDescriptions();

  @DefaultMessage("CanGoForward")
  @Description("")
  String CanGoForwardMethods();

  @DefaultMessage("Returns true if the WebViewer can go forward in the history list.")
  @Description("")
  String CanGoForwardMethodDescriptions();

  @DefaultMessage("Center")
  @Description("")
  String CenterMethods();

  @DefaultMessage("Returns the center of the Rectangle as a list of the form (Latitude Longitude).")
  @Description("")
  String CenterMethodDescriptions();

  @DefaultMessage("Centroid")
  @Description("")
  String CentroidMethods();

  @DefaultMessage("Returns the centroid of the Polygon as a (latitude, longitude) pair.")
  @Description("")
  String CentroidMethodDescriptions();

  @DefaultMessage("CheckAuthorized")
  @Description("")
  String CheckAuthorizedMethods();

  @DefaultMessage("Checks whether we already have access, and if so, causes IsAuthorized event handler to be called.")
  @Description("")
  String CheckAuthorizedMethodDescriptions();

  @DefaultMessage("Clear")
  @Description("")
  String ClearMethods();

  @DefaultMessage("Clears anything drawn on this Canvas but not any background color or image.")
  @Description("")
  String ClearMethodDescriptions();

  @DefaultMessage("ClearAll")
  @Description("")
  String ClearAllMethods();

  @DefaultMessage("Clear the entire data store")
  @Description("")
  String ClearAllMethodDescriptions();

  @DefaultMessage("ClearCaches")
  @Description("")
  String ClearCachesMethods();

  @DefaultMessage("Clear WebView caches.")
  @Description("")
  String ClearCachesMethodDescriptions();

  @DefaultMessage("ClearCookies")
  @Description("")
  String ClearCookiesMethods();

  @DefaultMessage("Clears all cookies for this Web component.")
  @Description("")
  String ClearCookiesMethodDescriptions();

  @DefaultMessage("ClearLocations")
  @Description("")
  String ClearLocationsMethods();

  @DefaultMessage("Clear stored location permissions.")
  @Description("")
  String ClearLocationsMethodDescriptions();

  @DefaultMessage("ClearTag")
  @Description("")
  String ClearTagMethods();

  @DefaultMessage("Clear the entry with the given tag")
  @Description("")
  String ClearTagMethodDescriptions();

  @DefaultMessage("CloudConnected")
  @Description("")
  String CloudConnectedMethods();

  @DefaultMessage("returns True if we are on the network and will likely be able to connect to the CloudDB server.")
  @Description("")
  String CloudConnectedMethodDescriptions();

  @DefaultMessage("CollidingWith")
  @Description("")
  String CollidingWithMethods();

  @DefaultMessage("Indicates whether a collision has been registered between this sprite and the passed sprite.")
  @Description("")
  String CollidingWithMethodDescriptions();

  @DefaultMessage("Connect")
  @Description("")
  String ConnectMethods();

  @DefaultMessage("Connect to the Bluetooth device with the specified address and the Serial Port Profile (SPP). Returns true if the connection was successful.")
  @Description("")
  String ConnectMethodDescriptions();

  @DefaultMessage("ConnectWithUUID")
  @Description("")
  String ConnectWithUUIDMethods();

  @DefaultMessage("Connect to the Bluetooth device with the specified address and UUID. Returns true if the connection was successful.")
  @Description("")
  String ConnectWithUUIDMethodDescriptions();

  @DefaultMessage("CreateMarker")
  @Description("")
  String CreateMarkerMethods();

  @DefaultMessage("Create a new marker with default properties at the specified latitude and longitude.")
  @Description("")
  String CreateMarkerMethodDescriptions();

  @DefaultMessage("DayOfMonth")
  @Description("")
  String DayOfMonthMethods();

  @DefaultMessage("The day of the month")
  @Description("")
  String DayOfMonthMethodDescriptions();

  @DefaultMessage("DeAuthorize")
  @Description("")
  String DeAuthorizeMethods();

  @DefaultMessage("Removes Twitter authorization from this running app instance")
  @Description("")
  String DeAuthorizeMethodDescriptions();

  @DefaultMessage("Delete")
  @Description("")
  String DeleteMethods();

  @DefaultMessage("Performs an HTTP DELETE request using the Url property and retrieves the response.<br> If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br> If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String DeleteMethodDescriptions();

  @DefaultMessage("DeleteFile")
  @Description("")
  String DeleteFileMethods();

  @DefaultMessage("Delete a file on the robot.")
  @Description("")
  String DeleteFileMethodDescriptions();

  @DefaultMessage("DirectMessage")
  @Description("")
  String DirectMessageMethods();

  @DefaultMessage("This sends a direct (private) message to the specified user. The message will be trimmed if it exceeds 160characters. <p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String DirectMessageMethodDescriptions();

  @DefaultMessage("Disconnect")
  @Description("")
  String DisconnectMethods();

  @DefaultMessage("Disconnect from the connected Bluetooth device.")
  @Description("")
  String DisconnectMethodDescriptions();

  @DefaultMessage("DismissProgressDialog")
  @Description("")
  String DismissProgressDialogMethods();

  @DefaultMessage("Dismiss a previously displayed ProgressDialog box")
  @Description("")
  String DismissProgressDialogMethodDescriptions();

  @DefaultMessage("DisplayDropdown")
  @Description("")
  String DisplayDropdownMethods();

  @DefaultMessage("displays the dropdown list for selection, same action as when the user clicks on the spinner.")
  @Description("")
  String DisplayDropdownMethodDescriptions();

  @DefaultMessage("DistanceToFeature")
  @Description("")
  String DistanceToFeatureMethods();

  @DefaultMessage("Compute the distance, in meters, between two map features.")
  @Description("")
  String DistanceToFeatureMethodDescriptions();

  @DefaultMessage("DistanceToPoint")
  @Description("")
  String DistanceToPointMethods();

  @DefaultMessage("Compute the distance, in meters, between a map feature and a latitude, longitude point.")
  @Description("")
  String DistanceToPointMethodDescriptions();

  @DefaultMessage("DoQuery")
  @Description("")
  String DoQueryMethods();

  @DefaultMessage("DEPRECATED. This block is deprecated as of the end of 2012. Use SendQuery.")
  @Description("")
  String DoQueryMethodDescriptions();

  @DefaultMessage("DoScan")
  @Description("")
  String DoScanMethods();

  @DefaultMessage("Begins a barcode scan, using the camera. When the scan is complete, the AfterScan event will be raised.")
  @Description("")
  String DoScanMethodDescriptions();

  @DefaultMessage("DownloadFile")
  @Description("")
  String DownloadFileMethods();

  @DefaultMessage("Download a file to the robot.")
  @Description("")
  String DownloadFileMethodDescriptions();

  @DefaultMessage("DrawArc")
  @Description("")
  String DrawArcMethods();

  @DefaultMessage("Draw an arc on Canvas, by drawing an arc from a specified oval (specified by left, top, right & bottom). Start angle is 0 when heading to the right, and increase when rotate clockwise. When useCenter is true, a sector will be drawed instead of an arc. When fill is true, a filled arc (or sector) will be drawed instead of just an outline.")
  @Description("")
  String DrawArcMethodDescriptions();

  @DefaultMessage("DrawCircle")
  @Description("")
  String DrawCircleMethods();

  @DefaultMessage("Draw a circle on the screen.")
  @Description("")
  String DrawCircleMethodDescriptions();

  @DefaultMessage("DrawIcon")
  @Description("")
  String DrawIconMethods();

  @DefaultMessage("Draw a built-in icon on screen.")
  @Description("")
  String DrawIconMethodDescriptions();

  @DefaultMessage("DrawLine")
  @Description("")
  String DrawLineMethods();

  @DefaultMessage("Draw a line on the screen.")
  @Description("")
  String DrawLineMethodDescriptions();

  @DefaultMessage("DrawPoint")
  @Description("")
  String DrawPointMethods();

  @DefaultMessage("Draw a point on the screen.")
  @Description("")
  String DrawPointMethodDescriptions();

  @DefaultMessage("DrawRect")
  @Description("")
  String DrawRectMethods();

  @DefaultMessage("Draw a rectangle on the screen.")
  @Description("")
  String DrawRectMethodDescriptions();

  @DefaultMessage("DrawShape")
  @Description("")
  String DrawShapeMethods();

  @DefaultMessage("Draws a shape on the canvas. pointList should be a list contains sub-lists with two number which represents a coordinate. The first point and last point does not need to be the same. e.g. ((x1 y1) (x2 y2) (x3 y3)) When fill is true, the shape will be filled.")
  @Description("")
  String DrawShapeMethodDescriptions();

  @DefaultMessage("DrawText")
  @Description("")
  String DrawTextMethods();

  @DefaultMessage("Draws the specified text relative to the specified coordinates using the values of the FontSize and TextAlignment properties.")
  @Description("")
  String DrawTextMethodDescriptions();

  @DefaultMessage("DrawTextAtAngle")
  @Description("")
  String DrawTextAtAngleMethods();

  @DefaultMessage("Draws the specified text starting at the specified coordinates at the specified angle using the values of the FontSize and TextAlignment properties.")
  @Description("")
  String DrawTextAtAngleMethodDescriptions();

  @DefaultMessage("Duration")
  @Description("")
  String DurationMethods();

  @DefaultMessage("Milliseconds elapsed between instants")
  @Description("")
  String DurationMethodDescriptions();

  @DefaultMessage("DurationToDays")
  @Description("")
  String DurationToDaysMethods();

  @DefaultMessage("convert duration to days")
  @Description("")
  String DurationToDaysMethodDescriptions();

  @DefaultMessage("DurationToHours")
  @Description("")
  String DurationToHoursMethods();

  @DefaultMessage("convert duration to hours")
  @Description("")
  String DurationToHoursMethodDescriptions();

  @DefaultMessage("DurationToMinutes")
  @Description("")
  String DurationToMinutesMethods();

  @DefaultMessage("convert duration to minutes")
  @Description("")
  String DurationToMinutesMethodDescriptions();

  @DefaultMessage("DurationToSeconds")
  @Description("")
  String DurationToSecondsMethods();

  @DefaultMessage("convert duration to seconds")
  @Description("")
  String DurationToSecondsMethodDescriptions();

  @DefaultMessage("DurationToWeeks")
  @Description("")
  String DurationToWeeksMethods();

  @DefaultMessage("convert duration to weeks")
  @Description("")
  String DurationToWeeksMethodDescriptions();

  @DefaultMessage("FeatureFromDescription")
  @Description("")
  String FeatureFromDescriptionMethods();

  @DefaultMessage("Convert a feature description into an App Inventor map feature. Currently the only supported conversion is from a GeoJSON point to Marker component. If the feature has properties, they will be mapped into App Inventor properties using the following mapping: description becomes Description; draggable becomes Draggable; infobox becomes EnableInfobox; fill becomes FillColor; image becomes ImageAsset; stroke becomes StrokeColor; stroke-width becomes StrokeWidth; title becomes Title; visible becomes Visible")
  @Description("")
  String FeatureFromDescriptionMethodDescriptions();

  @DefaultMessage("FillScreen")
  @Description("")
  String FillScreenMethods();

  @DefaultMessage("Fill the screen with a color.")
  @Description("")
  String FillScreenMethodDescriptions();

  @DefaultMessage("Follow")
  @Description("")
  String FollowMethods();

  @DefaultMessage("Starts following a user.")
  @Description("")
  String FollowMethodDescriptions();

  @DefaultMessage("ForgetLogin")
  @Description("")
  String ForgetLoginMethods();

  @DefaultMessage("Forget end-users login credentials. Has no effect on service authentication")
  @Description("")
  String ForgetLoginMethodDescriptions();

  @DefaultMessage("FormatDate")
  @Description("")
  String FormatDateMethods();

  @DefaultMessage("Text representing the date of an instant in the specified pattern")
  @Description("")
  String FormatDateMethodDescriptions();

  @DefaultMessage("FormatDateTime")
  @Description("")
  String FormatDateTimeMethods();

  @DefaultMessage("Text representing the date and time of an instant in the specified pattern")
  @Description("")
  String FormatDateTimeMethodDescriptions();

  @DefaultMessage("FormatTime")
  @Description("")
  String FormatTimeMethods();

  @DefaultMessage("Text representing the time of an instant")
  @Description("")
  String FormatTimeMethodDescriptions();

  @DefaultMessage("Get")
  @Description("")
  String GetMethods();

  @DefaultMessage("Performs an HTTP GET request using the Url property and retrieves the response.<br> If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br> If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String GetMethodDescriptions();

  @DefaultMessage("GetBackgroundPixelColor")
  @Description("")
  String GetBackgroundPixelColorMethods();

  @DefaultMessage("Gets the color of the specified point. This includes the background and any drawn points, lines, or circles but not sprites.")
  @Description("")
  String GetBackgroundPixelColorMethodDescriptions();

  @DefaultMessage("GetBatteryCurrent")
  @Description("")
  String GetBatteryCurrentMethods();

  @DefaultMessage("Get the battery current.")
  @Description("")
  String GetBatteryCurrentMethodDescriptions();

  @DefaultMessage("GetBatteryLevel")
  @Description("")
  String GetBatteryLevelMethods();

  @DefaultMessage("Get the battery level for the robot. Returns the voltage in millivolts.")
  @Description("")
  String GetBatteryLevelMethodDescriptions();

  @DefaultMessage("GetBatteryVoltage")
  @Description("")
  String GetBatteryVoltageMethods();

  @DefaultMessage("Get the battery voltage.")
  @Description("")
  String GetBatteryVoltageMethodDescriptions();

  @DefaultMessage("GetBrickName")
  @Description("")
  String GetBrickNameMethods();

  @DefaultMessage("Get the brick name of the robot.")
  @Description("")
  String GetBrickNameMethodDescriptions();

  @DefaultMessage("GetColor")
  @Description("")
  String GetColorMethods();

  @DefaultMessage("Returns the current detected color, or the color None if the color can not be read or if the DetectColor property is set to False.")
  @Description("")
  String GetColorMethodDescriptions();

  @DefaultMessage("GetColorCode")
  @Description("")
  String GetColorCodeMethods();

  @DefaultMessage("It returns the color code from 0 to 7 corresponding to no color, black, blue, green, yellow, red, white and brown.")
  @Description("")
  String GetColorCodeMethodDescriptions();

  @DefaultMessage("GetColorName")
  @Description("")
  String GetColorNameMethods();

  @DefaultMessage("Return the color name in one of \"No Color\", \"Black\", \"Blue\", \"Green\", \"Yellow\", \"Red\", \"White\", \"Brown\".")
  @Description("")
  String GetColorNameMethodDescriptions();

  @DefaultMessage("GetCurrentProgramName")
  @Description("")
  String GetCurrentProgramNameMethods();

  @DefaultMessage("Get the name of currently running program on the robot.")
  @Description("")
  String GetCurrentProgramNameMethodDescriptions();

  @DefaultMessage("GetDistance")
  @Description("")
  String GetDistanceMethods();

  @DefaultMessage("Returns the current distance in centimeters as a value between 0 and 254, or -1 if the distance can not be read.")
  @Description("")
  String GetDistanceMethodDescriptions();

  @DefaultMessage("GetDuration")
  @Description("")
  String GetDurationMethods();

  @DefaultMessage("Returns duration of the video in milliseconds.")
  @Description("")
  String GetDurationMethodDescriptions();

  @DefaultMessage("GetFirmwareBuild")
  @Description("")
  String GetFirmwareBuildMethods();

  @DefaultMessage("Get the firmware build on EV3.")
  @Description("")
  String GetFirmwareBuildMethodDescriptions();

  @DefaultMessage("GetFirmwareVersion")
  @Description("")
  String GetFirmwareVersionMethods();

  @DefaultMessage("Get the firmware and protocol version numbers for the robot as a list where the first element is the firmware version number and the second element is the protocol version number.")
  @Description("")
  String GetFirmwareVersionMethodDescriptions();

  @DefaultMessage("GetHardwareVersion")
  @Description("")
  String GetHardwareVersionMethods();

  @DefaultMessage("Get the hardware version of EV3.")
  @Description("")
  String GetHardwareVersionMethodDescriptions();

  @DefaultMessage("GetInputValues")
  @Description("")
  String GetInputValuesMethods();

  @DefaultMessage("Reads the values of an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.")
  @Description("")
  String GetInputValuesMethodDescriptions();

  @DefaultMessage("GetInstaller")
  @Description("")
  String GetInstallerMethods();

  @DefaultMessage("Return the app that installed us")
  @Description("")
  String GetInstallerMethodDescriptions();

  @DefaultMessage("GetInstanceLists")
  @Description("")
  String GetInstanceListsMethods();

  @DefaultMessage("Updates the InstancesJoined and InstancesInvited lists. This procedure can be called before setting the InstanceId.")
  @Description("")
  String GetInstanceListsMethodDescriptions();

  @DefaultMessage("GetLightLevel")
  @Description("")
  String GetLightLevelMethods();

  @DefaultMessage("Returns the current light level as a value between 0 and 1023, or -1 if the light level can not be read.")
  @Description("")
  String GetLightLevelMethodDescriptions();

  @DefaultMessage("GetMessages")
  @Description("")
  String GetMessagesMethods();

  @DefaultMessage("Retrieves messages of the specified type.")
  @Description("")
  String GetMessagesMethodDescriptions();

  @DefaultMessage("GetMillis")
  @Description("")
  String GetMillisMethods();

  @DefaultMessage("The instant in time measured as milliseconds since 1970.")
  @Description("")
  String GetMillisMethodDescriptions();

  @DefaultMessage("GetOSBuild")
  @Description("")
  String GetOSBuildMethods();

  @DefaultMessage("Get the OS build on EV3.")
  @Description("")
  String GetOSBuildMethodDescriptions();

  @DefaultMessage("GetOSVersion")
  @Description("")
  String GetOSVersionMethods();

  @DefaultMessage("Get the OS version on EV3.")
  @Description("")
  String GetOSVersionMethodDescriptions();

  @DefaultMessage("GetOutputState")
  @Description("")
  String GetOutputStateMethods();

  @DefaultMessage("Reads the output state of a motor on the robot.")
  @Description("")
  String GetOutputStateMethodDescriptions();

  @DefaultMessage("GetPixelColor")
  @Description("")
  String GetPixelColorMethods();

  @DefaultMessage("Gets the color of the specified point.")
  @Description("")
  String GetPixelColorMethodDescriptions();

  @DefaultMessage("GetRows")
  @Description("")
  String GetRowsMethods();

  @DefaultMessage("Gets all the rows from a specified fusion table. The tableId field is the id of therequired fusion table. The columns field is a comma-separeted list of the columns to retrieve.")
  @Description("")
  String GetRowsMethodDescriptions();

  @DefaultMessage("GetRowsWithConditions")
  @Description("")
  String GetRowsWithConditionsMethods();

  @DefaultMessage("Gets all the rows from a fusion table that meet certain conditions. The tableId field isthe id of the required fusion table. The columns field is a comma-separeted list of the columns toretrieve. The conditions field specifies what rows to retrieve from the table, for example the rows in whicha particular column value is not null.")
  @Description("")
  String GetRowsWithConditionsMethodDescriptions();

  @DefaultMessage("GetSensorValue")
  @Description("")
  String GetSensorValueMethods();

  @DefaultMessage("Returns the current angle or rotation speed based on current mode, or -1 if the value cannot be read from sensor.")
  @Description("")
  String GetSensorValueMethodDescriptions();

  @DefaultMessage("GetSoundLevel")
  @Description("")
  String GetSoundLevelMethods();

  @DefaultMessage("Returns the current sound level as a value between 0 and 1023, or -1 if the sound level can not be read.")
  @Description("")
  String GetSoundLevelMethodDescriptions();

  @DefaultMessage("GetTachoCount")
  @Description("")
  String GetTachoCountMethods();

  @DefaultMessage("Get the current tacho count.")
  @Description("")
  String GetTachoCountMethodDescriptions();

  @DefaultMessage("GetTagList")
  @Description("")
  String GetTagListMethods();

  @DefaultMessage("Get the list of tags for this application. When complete a \"TagList\" event will be triggered with the list of known tags.")
  @Description("")
  String GetTagListMethodDescriptions();

  @DefaultMessage("GetTags")
  @Description("")
  String GetTagsMethods();

  @DefaultMessage("Return a list of all the tags in the data store")
  @Description("")
  String GetTagsMethodDescriptions();

  @DefaultMessage("GetText")
  @Description("")
  String GetTextMethods();

  @DefaultMessage("Solicits speech input from the user. After the speech is converted to text, the AfterGettingText event will be raised.")
  @Description("")
  String GetTextMethodDescriptions();

  @DefaultMessage("GetValue")
  @Description("")
  String GetValueMethods();

  @DefaultMessage("GetValue asks the Web service to get the value stored under the given tag. It is up to the Web service what to return if there is no value stored under the tag. This component just accepts whatever is returned.")
  @Description("")
  String GetValueMethodDescriptions();

  @DefaultMessage("GetVersionName")
  @Description("")
  String GetVersionNameMethods();

  @DefaultMessage("Return the our VersionName property")
  @Description("")
  String GetVersionNameMethodDescriptions();

  @DefaultMessage("GetWifiIpAddress")
  @Description("")
  String GetWifiIpAddressMethods();

  @DefaultMessage("Returns the IP address of the phone in the form of a String")
  @Description("")
  String GetWifiIpAddressMethodDescriptions();

  @DefaultMessage("GoBack")
  @Description("")
  String GoBackMethods();

  @DefaultMessage("Go back to the previous page in the history list. Does nothing if there is no previous page.")
  @Description("")
  String GoBackMethodDescriptions();

  @DefaultMessage("GoForward")
  @Description("")
  String GoForwardMethods();

  @DefaultMessage("Go forward to the next page in the history list. Does nothing if there is no next page.")
  @Description("")
  String GoForwardMethodDescriptions();

  @DefaultMessage("GoHome")
  @Description("")
  String GoHomeMethods();

  @DefaultMessage("Loads the home URL page. This happens automatically when the home URL is changed.")
  @Description("")
  String GoHomeMethodDescriptions();

  @DefaultMessage("GoToUrl")
  @Description("")
  String GoToUrlMethods();

  @DefaultMessage("Load the page at the given URL.")
  @Description("")
  String GoToUrlMethodDescriptions();

  @DefaultMessage("HideInfobox")
  @Description("")
  String HideInfoboxMethods();

  @DefaultMessage("Hide the infobox if it is shown. If the infobox is not visible this function has no effect.")
  @Description("")
  String HideInfoboxMethodDescriptions();

  @DefaultMessage("HideKeyboard")
  @Description("")
  String HideKeyboardMethods();

  @DefaultMessage("Hide the keyboard. Only multiline text boxes need this. Single line text boxes close the keyboard when the users presses the Done key.")
  @Description("")
  String HideKeyboardMethodDescriptions();

  @DefaultMessage("Hour")
  @Description("")
  String HourMethods();

  @DefaultMessage("The hour of the day")
  @Description("")
  String HourMethodDescriptions();

  @DefaultMessage("HtmlTextDecode")
  @Description("")
  String HtmlTextDecodeMethods();

  @DefaultMessage("Decodes the given HTML text value. HTML character entities such as &amp;amp;, &amp;lt;, &amp;gt;, &amp;apos;, and &amp;quot; are changed to &amp;, &lt;, &gt;, &#39;, and &quot;. Entities such as &amp;#xhhhh, and &amp;#nnnn are changed to the appropriate characters.")
  @Description("")
  String HtmlTextDecodeMethodDescriptions();

  @DefaultMessage("InsertRow")
  @Description("")
  String InsertRowMethods();

  @DefaultMessage("Inserts a row into the specified fusion table. The tableId field is the id of thefusion table. The columns is a comma-separated list of the columns to insert values into. The values field specifies what values to insert into each column.")
  @Description("")
  String InsertRowMethodDescriptions();

  @DefaultMessage("InstallationId")
  @Description("")
  String InstallationIdMethods();

  @DefaultMessage("Return the ACRA Installation ID")
  @Description("")
  String InstallationIdMethodDescriptions();

  @DefaultMessage("Invite")
  @Description("")
  String InviteMethods();

  @DefaultMessage("Invites a player to this game instance.")
  @Description("")
  String InviteMethodDescriptions();

  @DefaultMessage("IsDevicePaired")
  @Description("")
  String IsDevicePairedMethods();

  @DefaultMessage("Checks whether the Bluetooth device with the specified address is paired.")
  @Description("")
  String IsDevicePairedMethodDescriptions();

  @DefaultMessage("IsPressed")
  @Description("")
  String IsPressedMethods();

  @DefaultMessage("Returns true if the touch sensor is pressed.")
  @Description("")
  String IsPressedMethodDescriptions();

  @DefaultMessage("JsonTextDecode")
  @Description("")
  String JsonTextDecodeMethods();

  @DefaultMessage("Decodes the given JSON encoded value to produce a corresponding AppInventor value. A JSON list [x, y, z] decodes to a list (x y z), A JSON object with name A and value B, (denoted as A:B enclosed in curly braces) decodes to a list ((A B)), that is, a list containing the two-element list (A B).")
  @Description("")
  String JsonTextDecodeMethodDescriptions();

  @DefaultMessage("KeepAlive")
  @Description("")
  String KeepAliveMethods();

  @DefaultMessage("Keep Alive. Returns the current sleep time limit in milliseconds.")
  @Description("")
  String KeepAliveMethodDescriptions();

  @DefaultMessage("LatitudeFromAddress")
  @Description("")
  String LatitudeFromAddressMethods();

  @DefaultMessage("Derives latitude of given address")
  @Description("")
  String LatitudeFromAddressMethodDescriptions();

  @DefaultMessage("LaunchPicker")
  @Description("")
  String LaunchPickerMethods();

  @DefaultMessage("Launches the TimePicker popup.")
  @Description("")
  String LaunchPickerMethodDescriptions();

  @DefaultMessage("LeaveInstance")
  @Description("")
  String LeaveInstanceMethods();

  @DefaultMessage("Leaves the current instance.")
  @Description("")
  String LeaveInstanceMethodDescriptions();

  @DefaultMessage("ListFiles")
  @Description("")
  String ListFilesMethods();

  @DefaultMessage("Returns a list containing the names of matching files found on the robot.")
  @Description("")
  String ListFilesMethodDescriptions();

  @DefaultMessage("LoadFromURL")
  @Description("")
  String LoadFromURLMethods();

  @DefaultMessage("<p>Load a feature collection in <a href=\"https://en.wikipedia.org/wiki/GeoJSON\">GeoJSON</a> format from the given url. On success, the event GotFeatures will be raised with the given url and a list of the features parsed from the GeoJSON as a list of (key, value) pairs. On failure, the LoadError event will be raised with any applicable HTTP response code and error message.</p>")
  @Description("")
  String LoadFromURLMethodDescriptions();

  @DefaultMessage("LogError")
  @Description("")
  String LogErrorMethods();

  @DefaultMessage("Writes an error message to the Android system log. See the Google Android documentation for how to access the log.")
  @Description("")
  String LogErrorMethodDescriptions();

  @DefaultMessage("LogInfo")
  @Description("")
  String LogInfoMethods();

  @DefaultMessage("Writes an information message to the Android log.")
  @Description("")
  String LogInfoMethodDescriptions();

  @DefaultMessage("LogWarning")
  @Description("")
  String LogWarningMethods();

  @DefaultMessage("Writes a warning message to the Android log. See the Google Android documentation for how to access the log.")
  @Description("")
  String LogWarningMethodDescriptions();

  @DefaultMessage("LongitudeFromAddress")
  @Description("")
  String LongitudeFromAddressMethods();

  @DefaultMessage("Derives longitude of given address")
  @Description("")
  String LongitudeFromAddressMethodDescriptions();

  @DefaultMessage("LsGetStatus")
  @Description("")
  String LsGetStatusMethods();

  @DefaultMessage("Returns the count of available bytes to read.")
  @Description("")
  String LsGetStatusMethodDescriptions();

  @DefaultMessage("LsRead")
  @Description("")
  String LsReadMethods();

  @DefaultMessage("Reads unsigned low speed data from an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.")
  @Description("")
  String LsReadMethodDescriptions();

  @DefaultMessage("LsWrite")
  @Description("")
  String LsWriteMethods();

  @DefaultMessage("Writes low speed data to an input sensor on the robot. Assumes sensor type has been configured via SetInputMode.")
  @Description("")
  String LsWriteMethodDescriptions();

  @DefaultMessage("MakeDate")
  @Description("")
  String MakeDateMethods();

  @DefaultMessage("Allows the user to set the clock to be a date value.Valid values for the month field are 1-12 and 1-31 for the day field.")
  @Description("")
  String MakeDateMethodDescriptions();

  @DefaultMessage("MakeInstant")
  @Description("")
  String MakeInstantMethods();

  @DefaultMessage("An instant in time specified by MM/dd/YYYY hh:mm:ss or MM/dd/YYYY or hh:mm")
  @Description("")
  String MakeInstantMethodDescriptions();

  @DefaultMessage("MakeInstantFromMillis")
  @Description("")
  String MakeInstantFromMillisMethods();

  @DefaultMessage("An instant in time specified by the milliseconds since 1970.")
  @Description("")
  String MakeInstantFromMillisMethodDescriptions();

  @DefaultMessage("MakeInstantFromParts")
  @Description("")
  String MakeInstantFromPartsMethods();

  @DefaultMessage("Allows the user to set the date and time to be displayed when the clock opens.Valid values for the month field are 1-12 and 1-31 for the day field.")
  @Description("")
  String MakeInstantFromPartsMethodDescriptions();

  @DefaultMessage("MakeNewInstance")
  @Description("")
  String MakeNewInstanceMethods();

  @DefaultMessage("Asks the server to create a new instance of this game.")
  @Description("")
  String MakeNewInstanceMethodDescriptions();

  @DefaultMessage("MakePhoneCall")
  @Description("")
  String MakePhoneCallMethods();

  @DefaultMessage("Makes a phone call using the number in the PhoneNumber property.")
  @Description("")
  String MakePhoneCallMethodDescriptions();

  @DefaultMessage("MakePhoneCallDirect")
  @Description("")
  String MakePhoneCallDirectMethods();

  @DefaultMessage("Makes a phone call using the number in the PhoneNumber property.")
  @Description("")
  String MakePhoneCallDirectMethodDescriptions();

  @DefaultMessage("MakeTime")
  @Description("")
  String MakeTimeMethods();

  @DefaultMessage("Allows the user to set the time of the clock - Valid format is hh:mm:ss")
  @Description("")
  String MakeTimeMethodDescriptions();

  @DefaultMessage("MessageRead")
  @Description("")
  String MessageReadMethods();

  @DefaultMessage("Read a message from a mailbox (1-10) on the robot.")
  @Description("")
  String MessageReadMethodDescriptions();

  @DefaultMessage("MessageWrite")
  @Description("")
  String MessageWriteMethods();

  @DefaultMessage("Write a message to a mailbox (1-10) on the robot.")
  @Description("")
  String MessageWriteMethodDescriptions();

  @DefaultMessage("Minute")
  @Description("")
  String MinuteMethods();

  @DefaultMessage("The minute of the hour")
  @Description("")
  String MinuteMethodDescriptions();

  @DefaultMessage("Month")
  @Description("")
  String MonthMethods();

  @DefaultMessage("The month of the year represented as a number from 1 to 12)")
  @Description("")
  String MonthMethodDescriptions();

  @DefaultMessage("MonthName")
  @Description("")
  String MonthNameMethods();

  @DefaultMessage("The name of the month")
  @Description("")
  String MonthNameMethodDescriptions();

  @DefaultMessage("MoveBackward")
  @Description("")
  String MoveBackwardMethods();

  @DefaultMessage("Move the robot backward the given distance, with the specified percentage of maximum power, by powering both drive motors backward.")
  @Description("")
  String MoveBackwardMethodDescriptions();

  @DefaultMessage("MoveBackwardIndefinitely")
  @Description("")
  String MoveBackwardIndefinitelyMethods();

  @DefaultMessage("Move the robot backward indefinitely, with the specified percentage of maximum power, by powering both drive motors backward.")
  @Description("")
  String MoveBackwardIndefinitelyMethodDescriptions();

  @DefaultMessage("MoveForward")
  @Description("")
  String MoveForwardMethods();

  @DefaultMessage("Move the robot forward the given distance, with the specified percentage of maximum power, by powering both drive motors forward.")
  @Description("")
  String MoveForwardMethodDescriptions();

  @DefaultMessage("MoveForwardIndefinitely")
  @Description("")
  String MoveForwardIndefinitelyMethods();

  @DefaultMessage("Move the robot forward indefinitely, with the specified percentage of maximum power, by powering both drive motors forward.")
  @Description("")
  String MoveForwardIndefinitelyMethodDescriptions();

  @DefaultMessage("MoveIntoBounds")
  @Description("")
  String MoveIntoBoundsMethods();

  @DefaultMessage("Moves the sprite back in bounds if part of it extends out of bounds, having no effect otherwise. If the sprite is too wide to fit on the canvas, this aligns the left side of the sprite with the left side of the canvas. If the sprite is too tall to fit on the canvas, this aligns the top side of the sprite with the top side of the canvas.")
  @Description("")
  String MoveIntoBoundsMethodDescriptions();

  @DefaultMessage("MoveTo")
  @Description("")
  String MoveToMethods();

  @DefaultMessage("Moves the sprite so that its left top corner is at the specfied x and y coordinates.")
  @Description("")
  String MoveToMethodDescriptions();

  @DefaultMessage("Now")
  @Description("")
  String NowMethods();

  @DefaultMessage("The current instant in time read from phone''s clock")
  @Description("")
  String NowMethodDescriptions();

  @DefaultMessage("Open")
  @Description("")
  String OpenMethods();

  @DefaultMessage("Opens the picker, as though the user clicked on it.")
  @Description("")
  String OpenMethodDescriptions();

  @DefaultMessage("PanTo")
  @Description("")
  String PanToMethods();

  @DefaultMessage("Pan the map center to the given latitude and longitude and adjust the zoom level to the specified zoom.")
  @Description("")
  String PanToMethodDescriptions();

  @DefaultMessage("Pause")
  @Description("")
  String PauseMethods();

  @DefaultMessage("Pauses playback of the video. Playback can be resumed at the same location by calling the <code>Start</code> method.")
  @Description("")
  String PauseMethodDescriptions();

  @DefaultMessage("Play")
  @Description("")
  String PlayMethods();

  @DefaultMessage("Plays the sound specified by the Source property.")
  @Description("")
  String PlayMethodDescriptions();

  @DefaultMessage("PlaySoundFile")
  @Description("")
  String PlaySoundFileMethods();

  @DefaultMessage("Play a sound file on the robot.")
  @Description("")
  String PlaySoundFileMethodDescriptions();

  @DefaultMessage("PlayTone")
  @Description("")
  String PlayToneMethods();

  @DefaultMessage("Make the robot play a tone.")
  @Description("")
  String PlayToneMethodDescriptions();

  @DefaultMessage("PointInDirection")
  @Description("")
  String PointInDirectionMethods();

  @DefaultMessage("Turns the sprite to point towards the point with coordinates as (x, y).")
  @Description("")
  String PointInDirectionMethodDescriptions();

  @DefaultMessage("PointTowards")
  @Description("")
  String PointTowardsMethods();

  @DefaultMessage("Turns the sprite to point towards a designated target sprite. The new heading will be parallel to the line joining the centerpoints of the two sprites.")
  @Description("")
  String PointTowardsMethodDescriptions();

  @DefaultMessage("PostFile")
  @Description("")
  String PostFileMethods();

  @DefaultMessage("Performs an HTTP POST request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PostFileMethodDescriptions();

  @DefaultMessage("PostMedia")
  @Description("")
  String PostMediaMethods();

  @DefaultMessage("Asks the Web service to store the given media file.")
  @Description("")
  String PostMediaMethodDescriptions();

  @DefaultMessage("PostText")
  @Description("")
  String PostTextMethods();

  @DefaultMessage("Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PostTextMethodDescriptions();

  @DefaultMessage("PostTextWithEncoding")
  @Description("")
  String PostTextWithEncodingMethods();

  @DefaultMessage("Performs an HTTP POST request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PostTextWithEncodingMethodDescriptions();

  @DefaultMessage("PutFile")
  @Description("")
  String PutFileMethods();

  @DefaultMessage("Performs an HTTP PUT request using the Url property and data from the specified file.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PutFileMethodDescriptions();

  @DefaultMessage("PutText")
  @Description("")
  String PutTextMethods();

  @DefaultMessage("Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using UTF-8 encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The responseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PutTextMethodDescriptions();

  @DefaultMessage("PutTextWithEncoding")
  @Description("")
  String PutTextWithEncodingMethods();

  @DefaultMessage("Performs an HTTP PUT request using the Url property and the specified text.<br>The characters of the text are encoded using the given encoding.<br>If the SaveResponse property is true, the response will be saved in a file and the GotFile event will be triggered. The ResponseFileName property can be used to specify the name of the file.<br>If the SaveResponse property is false, the GotText event will be triggered.")
  @Description("")
  String PutTextWithEncodingMethodDescriptions();

  @DefaultMessage("ReadFrom")
  @Description("")
  String ReadFromMethods();

  @DefaultMessage("Reads text from a file in storage. Prefix the filename with / to read from a specific file on the SD card. for instance /myFile.txt will read the file /sdcard/myFile.txt. To read assets packaged with an application (also works for the Companion) start the filename with // (two slashes). If a filename does not start with a slash, it will be read from the applications private storage (for packaged apps) and from /sdcard/AppInventor/data for the Companion.")
  @Description("")
  String ReadFromMethodDescriptions();

  @DefaultMessage("ReceiveSigned1ByteNumber")
  @Description("")
  String ReceiveSigned1ByteNumberMethods();

  @DefaultMessage("Receive a signed 1-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveSigned1ByteNumberMethodDescriptions();

  @DefaultMessage("ReceiveSigned2ByteNumber")
  @Description("")
  String ReceiveSigned2ByteNumberMethods();

  @DefaultMessage("Receive a signed 2-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveSigned2ByteNumberMethodDescriptions();

  @DefaultMessage("ReceiveSigned4ByteNumber")
  @Description("")
  String ReceiveSigned4ByteNumberMethods();

  @DefaultMessage("Receive a signed 4-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveSigned4ByteNumberMethodDescriptions();

  @DefaultMessage("ReceiveSignedBytes")
  @Description("")
  String ReceiveSignedBytesMethods();

  @DefaultMessage("Receive multiple signed byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.")
  @Description("")
  String ReceiveSignedBytesMethodDescriptions();

  @DefaultMessage("ReceiveText")
  @Description("")
  String ReceiveTextMethods();

  @DefaultMessage("Receive text from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.")
  @Description("")
  String ReceiveTextMethodDescriptions();

  @DefaultMessage("ReceiveUnsigned1ByteNumber")
  @Description("")
  String ReceiveUnsigned1ByteNumberMethods();

  @DefaultMessage("Receive an unsigned 1-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveUnsigned1ByteNumberMethodDescriptions();

  @DefaultMessage("ReceiveUnsigned2ByteNumber")
  @Description("")
  String ReceiveUnsigned2ByteNumberMethods();

  @DefaultMessage("Receive a unsigned 2-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveUnsigned2ByteNumberMethodDescriptions();

  @DefaultMessage("ReceiveUnsigned4ByteNumber")
  @Description("")
  String ReceiveUnsigned4ByteNumberMethods();

  @DefaultMessage("Receive a unsigned 4-byte number from the connected Bluetooth device.")
  @Description("")
  String ReceiveUnsigned4ByteNumberMethodDescriptions();

  @DefaultMessage("ReceiveUnsignedBytes")
  @Description("")
  String ReceiveUnsignedBytesMethods();

  @DefaultMessage("Receive multiple unsigned byte values from the connected Bluetooth device. If numberOfBytes is less than 0, read until a delimiter byte value is received.")
  @Description("")
  String ReceiveUnsignedBytesMethodDescriptions();

  @DefaultMessage("RecordVideo")
  @Description("")
  String RecordVideoMethods();

  @DefaultMessage("Records a video, then raises the AfterRecoding event.")
  @Description("")
  String RecordVideoMethodDescriptions();

  @DefaultMessage("RemoveFirst")
  @Description("")
  String RemoveFirstMethods();

  @DefaultMessage("Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.")
  @Description("")
  String RemoveFirstMethodDescriptions();

  @DefaultMessage("RemoveFirstFromList")
  @Description("")
  String RemoveFirstFromListMethods();

  @DefaultMessage("Return the first element of a list and atomically remove it. If two devices use this function simultaneously, one will get the first element and the the other will get the second element, or an error if there is no available element. When the element is available, the \"FirstRemoved\" event will be triggered.")
  @Description("")
  String RemoveFirstFromListMethodDescriptions();

  @DefaultMessage("RequestBallot")
  @Description("")
  String RequestBallotMethods();

  @DefaultMessage("Send a request for a ballot to the Web service specified by the property <code>ServiceURL</code>. When the completes, one of the following events will be raised: <code>GotBallot</code>, <code>NoOpenPoll</code>, or <code>WebServiceError</code>.")
  @Description("")
  String RequestBallotMethodDescriptions();

  @DefaultMessage("RequestDirectMessages")
  @Description("")
  String RequestDirectMessagesMethods();

  @DefaultMessage("Requests the 20 most recent direct messages sent to the logged-in user. When the messages have been retrieved, the system will raise the <code>DirectMessagesReceived</code> event and set the <code>DirectMessages</code> property to the list of messages.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String RequestDirectMessagesMethodDescriptions();

  @DefaultMessage("RequestFocus")
  @Description("")
  String RequestFocusMethods();

  @DefaultMessage("Sets the textbox active.")
  @Description("")
  String RequestFocusMethodDescriptions();

  @DefaultMessage("RequestFollowers")
  @Description("")
  String RequestFollowersMethods();

  @DefaultMessage("Gets who is following you.")
  @Description("")
  String RequestFollowersMethodDescriptions();

  @DefaultMessage("RequestFriendTimeline")
  @Description("")
  String RequestFriendTimelineMethods();

  @DefaultMessage("Gets the most recent 20 messages in the user''s timeline.")
  @Description("")
  String RequestFriendTimelineMethodDescriptions();

  @DefaultMessage("RequestMentions")
  @Description("")
  String RequestMentionsMethods();

  @DefaultMessage("Requests the 20 most recent mentions of the logged-in user. When the mentions have been retrieved, the system will raise the <code>MentionsReceived</code> event and set the <code>Mentions</code> property to the list of mentions.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String RequestMentionsMethodDescriptions();

  @DefaultMessage("RequestTranslation")
  @Description("")
  String RequestTranslationMethods();

  @DefaultMessage("By providing a target language to translate to (for instance, ''es'' for Spanish, ''en'' for English, or ''ru'' for Russian), and a word or sentence to translate, this method will request a translation to the Yandex.Translate service.Once the text is translated by the external service, the event GotTranslation will be executed.Note: Yandex.Translate will attempt to detect the source language. You can also specify prepending it to the language translation. I.e., es-ru will specify Spanish to Russian translation.")
  @Description("")
  String RequestTranslationMethodDescriptions();

  @DefaultMessage("Reset")
  @Description("")
  String ResetMethods();

  @DefaultMessage("Resets the step counter, distance measure and time running.")
  @Description("")
  String ResetMethodDescriptions();

  @DefaultMessage("ResetInputScaledValue")
  @Description("")
  String ResetInputScaledValueMethods();

  @DefaultMessage("Reset the scaled value of an input sensor on the robot.")
  @Description("")
  String ResetInputScaledValueMethodDescriptions();

  @DefaultMessage("ResetMotorPosition")
  @Description("")
  String ResetMotorPositionMethods();

  @DefaultMessage("Reset motor position.")
  @Description("")
  String ResetMotorPositionMethodDescriptions();

  @DefaultMessage("ResetTachoCount")
  @Description("")
  String ResetTachoCountMethods();

  @DefaultMessage("Set the current tacho count to zero.")
  @Description("")
  String ResetTachoCountMethodDescriptions();

  @DefaultMessage("ResolveActivity")
  @Description("")
  String ResolveActivityMethods();

  @DefaultMessage("Returns the name of the activity that corresponds to this ActivityStarter, or an empty string if no corresponding activity can be found.")
  @Description("")
  String ResolveActivityMethodDescriptions();

  @DefaultMessage("Resume")
  @Description("")
  String ResumeMethods();

  @DefaultMessage("Resumes playing the sound after a pause.")
  @Description("")
  String ResumeMethodDescriptions();

  @DefaultMessage("RotateInDistance")
  @Description("")
  String RotateInDistanceMethods();

  @DefaultMessage("Rotate the motors in a distance.")
  @Description("")
  String RotateInDistanceMethodDescriptions();

  @DefaultMessage("RotateInDuration")
  @Description("")
  String RotateInDurationMethods();

  @DefaultMessage("Rotate the motors in a period of time.")
  @Description("")
  String RotateInDurationMethodDescriptions();

  @DefaultMessage("RotateInTachoCounts")
  @Description("")
  String RotateInTachoCountsMethods();

  @DefaultMessage("Rotate the motors in a number of tacho counts.")
  @Description("")
  String RotateInTachoCountsMethodDescriptions();

  @DefaultMessage("RotateIndefinitely")
  @Description("")
  String RotateIndefinitelyMethods();

  @DefaultMessage("Start to rotate the motors.")
  @Description("")
  String RotateIndefinitelyMethodDescriptions();

  @DefaultMessage("RotateSyncInDistance")
  @Description("")
  String RotateSyncInDistanceMethods();

  @DefaultMessage("Rotate the motors at the same speed for a distance in cm.")
  @Description("")
  String RotateSyncInDistanceMethodDescriptions();

  @DefaultMessage("RotateSyncInDuration")
  @Description("")
  String RotateSyncInDurationMethods();

  @DefaultMessage("Rotate the motors at the same speed in a period of time.")
  @Description("")
  String RotateSyncInDurationMethodDescriptions();

  @DefaultMessage("RotateSyncInTachoCounts")
  @Description("")
  String RotateSyncInTachoCountsMethods();

  @DefaultMessage("Rotate the motors at the same speed in a number of tacho counts.")
  @Description("")
  String RotateSyncInTachoCountsMethodDescriptions();

  @DefaultMessage("RotateSyncIndefinitely")
  @Description("")
  String RotateSyncIndefinitelyMethods();

  @DefaultMessage("Start to rotate the motors at the same speed.")
  @Description("")
  String RotateSyncIndefinitelyMethodDescriptions();

  @DefaultMessage("Save")
  @Description("")
  String SaveMethods();

  @DefaultMessage("Saves the pedometer state to the phone. Permits permits accumulation of steps and distance between invocations of an App that uses the pedometer. Different Apps will have their own saved state.")
  @Description("")
  String SaveMethodDescriptions();

  @DefaultMessage("SaveAs")
  @Description("")
  String SaveAsMethods();

  @DefaultMessage("Saves a picture of this Canvas to the device''s external storage in the file named fileName. fileName must end with one of .jpg, .jpeg, or .png, which determines the file type.")
  @Description("")
  String SaveAsMethodDescriptions();

  @DefaultMessage("SaveFile")
  @Description("")
  String SaveFileMethods();

  @DefaultMessage("Saves text to a file. If the filename begins with a slash (/) the file is written to the sdcard. For example writing to /myFile.txt will write the file to /sdcard/myFile.txt. If the filename does not start with a slash, it will be written in the programs private data directory where it will not be accessible to other programs on the phone. There is a special exception for the AI Companion where these files are written to /sdcard/AppInventor/data to facilitate debugging. Note that this block will overwrite a file if it already exists.If you want to add content to a file use the append block.")
  @Description("")
  String SaveFileMethodDescriptions();

  @DefaultMessage("SdkLevel")
  @Description("")
  String SdkLevelMethods();

  @DefaultMessage("Get the current Android SDK Level")
  @Description("")
  String SdkLevelMethodDescriptions();

  @DefaultMessage("SearchTwitter")
  @Description("")
  String SearchTwitterMethods();

  @DefaultMessage("This searches Twitter for the given String query.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String SearchTwitterMethodDescriptions();

  @DefaultMessage("Second")
  @Description("")
  String SecondMethods();

  @DefaultMessage("The second of the minute")
  @Description("")
  String SecondMethodDescriptions();

  @DefaultMessage("SeekTo")
  @Description("")
  String SeekToMethods();

  @DefaultMessage("Seeks to the requested time (specified in milliseconds) in the video. If the video is paused, the frame shown will not be updated by the seek. The player can jump only to key frames in the video, so seeking to times that differ by short intervals may not actually move to different frames.")
  @Description("")
  String SeekToMethodDescriptions();

  @DefaultMessage("Send1ByteNumber")
  @Description("")
  String Send1ByteNumberMethods();

  @DefaultMessage("Send a 1-byte number to the connected Bluetooth device.")
  @Description("")
  String Send1ByteNumberMethodDescriptions();

  @DefaultMessage("Send2ByteNumber")
  @Description("")
  String Send2ByteNumberMethods();

  @DefaultMessage("Send a 2-byte number to the connected Bluetooth device.")
  @Description("")
  String Send2ByteNumberMethodDescriptions();

  @DefaultMessage("Send4ByteNumber")
  @Description("")
  String Send4ByteNumberMethods();

  @DefaultMessage("Send a 4-byte number to the connected Bluetooth device.")
  @Description("")
  String Send4ByteNumberMethodDescriptions();

  @DefaultMessage("SendBallot")
  @Description("")
  String SendBallotMethods();

  @DefaultMessage("Send a completed ballot to the Web service. This should not be called until the properties <code>UserId</code> and <code>UserChoice</code> have been set by the application.")
  @Description("")
  String SendBallotMethodDescriptions();

  @DefaultMessage("SendBytes")
  @Description("")
  String SendBytesMethods();

  @DefaultMessage("Send a list of byte values to the connected Bluetooth device.")
  @Description("")
  String SendBytesMethodDescriptions();

  @DefaultMessage("SendMessage")
  @Description("")
  String SendMessageMethods();

  @DefaultMessage("Send a text message")
  @Description("")
  String SendMessageMethodDescriptions();

  @DefaultMessage("SendMessageDirect")
  @Description("")
  String SendMessageDirectMethods();

  @DefaultMessage("Send a text message directly")
  @Description("")
  String SendMessageDirectMethodDescriptions();

  @DefaultMessage("SendQuery")
  @Description("")
  String SendQueryMethods();

  @DefaultMessage("Send the query to the Fusiontables server.")
  @Description("")
  String SendQueryMethodDescriptions();

  @DefaultMessage("SendText")
  @Description("")
  String SendTextMethods();

  @DefaultMessage("Send text to the connected Bluetooth device.")
  @Description("")
  String SendTextMethodDescriptions();

  @DefaultMessage("ServerCommand")
  @Description("")
  String ServerCommandMethods();

  @DefaultMessage("Sends the specified command to the game server.")
  @Description("")
  String ServerCommandMethodDescriptions();

  @DefaultMessage("SetAmbientMode")
  @Description("")
  String SetAmbientModeMethods();

  @DefaultMessage("Make the sensor read the light level without reflected light.")
  @Description("")
  String SetAmbientModeMethodDescriptions();

  @DefaultMessage("SetAngleMode")
  @Description("")
  String SetAngleModeMethods();

  @DefaultMessage("Measures the orientation of the sensor.")
  @Description("")
  String SetAngleModeMethodDescriptions();

  @DefaultMessage("SetBackgroundPixelColor")
  @Description("")
  String SetBackgroundPixelColorMethods();

  @DefaultMessage("Sets the color of the specified point. This differs from DrawPoint by having an argument for color.")
  @Description("")
  String SetBackgroundPixelColorMethodDescriptions();

  @DefaultMessage("SetBrickName")
  @Description("")
  String SetBrickNameMethods();

  @DefaultMessage("Set the brick name of the robot.")
  @Description("")
  String SetBrickNameMethodDescriptions();

  @DefaultMessage("SetCenter")
  @Description("")
  String SetCenterMethods();

  @DefaultMessage("Moves the Rectangle so that it is centered on the given latitude and longitude while attempting to maintain the width and height of the Rectangle as measured from the center to the edges.")
  @Description("")
  String SetCenterMethodDescriptions();

  @DefaultMessage("SetCmUnit")
  @Description("")
  String SetCmUnitMethods();

  @DefaultMessage("Measure the distance in centimeters.")
  @Description("")
  String SetCmUnitMethodDescriptions();

  @DefaultMessage("SetColorMode")
  @Description("")
  String SetColorModeMethods();

  @DefaultMessage("Enter the color detection mode.")
  @Description("")
  String SetColorModeMethodDescriptions();

  @DefaultMessage("SetDateToDisplay")
  @Description("")
  String SetDateToDisplayMethods();

  @DefaultMessage("Allows the user to set the date to be displayed when the date picker opens.Valid values for the month field are 1-12 and 1-31 for the day field.")
  @Description("")
  String SetDateToDisplayMethodDescriptions();

  @DefaultMessage("SetDateToDisplayFromInstant")
  @Description("")
  String SetDateToDisplayFromInstantMethods();

  @DefaultMessage("Allows the user to set the date from the instant to be displayed when the date picker opens.")
  @Description("")
  String SetDateToDisplayFromInstantMethodDescriptions();

  @DefaultMessage("SetInchUnit")
  @Description("")
  String SetInchUnitMethods();

  @DefaultMessage("Measure the distance in inches.")
  @Description("")
  String SetInchUnitMethodDescriptions();

  @DefaultMessage("SetInputMode")
  @Description("")
  String SetInputModeMethods();

  @DefaultMessage("Configure an input sensor on the robot.")
  @Description("")
  String SetInputModeMethodDescriptions();

  @DefaultMessage("SetInstance")
  @Description("")
  String SetInstanceMethods();

  @DefaultMessage("Sets InstanceId and joins the specified instance.")
  @Description("")
  String SetInstanceMethodDescriptions();

  @DefaultMessage("SetLeader")
  @Description("")
  String SetLeaderMethods();

  @DefaultMessage("Tells the server to set the leader to playerId. Only the current leader may successfully set a new leader.")
  @Description("")
  String SetLeaderMethodDescriptions();

  @DefaultMessage("SetLocation")
  @Description("")
  String SetLocationMethods();

  @DefaultMessage("Set the location of the marker.")
  @Description("")
  String SetLocationMethodDescriptions();

  @DefaultMessage("SetOutputState")
  @Description("")
  String SetOutputStateMethods();

  @DefaultMessage("Sets the output state of a motor on the robot.")
  @Description("")
  String SetOutputStateMethodDescriptions();

  @DefaultMessage("SetRateMode")
  @Description("")
  String SetRateModeMethods();

  @DefaultMessage("Measures the angular velocity of the sensor.")
  @Description("")
  String SetRateModeMethodDescriptions();

  @DefaultMessage("SetReflectedMode")
  @Description("")
  String SetReflectedModeMethods();

  @DefaultMessage("Make the sensor read the light level with reflected light.")
  @Description("")
  String SetReflectedModeMethodDescriptions();

  @DefaultMessage("SetTimeToDisplay")
  @Description("")
  String SetTimeToDisplayMethods();

  @DefaultMessage("Set the time to be shown in the Time Picker popup. Current time is shown by default.")
  @Description("")
  String SetTimeToDisplayMethodDescriptions();

  @DefaultMessage("SetTimeToDisplayFromInstant")
  @Description("")
  String SetTimeToDisplayFromInstantMethods();

  @DefaultMessage("Set the time from the instant to be shown in the Time Picker popup. Current time is shown by default.")
  @Description("")
  String SetTimeToDisplayFromInstantMethodDescriptions();

  @DefaultMessage("ShareFile")
  @Description("")
  String ShareFileMethods();

  @DefaultMessage("Shares a file through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the file inserted on it.")
  @Description("")
  String ShareFileMethodDescriptions();

  @DefaultMessage("ShareFileWithMessage")
  @Description("")
  String ShareFileWithMessageMethods();

  @DefaultMessage("Shares both a file and a message through any capable application installed on the phone by displaying a list of available apps and allowing the user to choose one from the list. The selected app will open with the file and message inserted on it.")
  @Description("")
  String ShareFileWithMessageMethodDescriptions();

  @DefaultMessage("ShareMessage")
  @Description("")
  String ShareMessageMethods();

  @DefaultMessage("Shares a message through any capable application installed on the phone by displaying a list of the available apps and allowing the user to choose one from the list. The selected app will open with the message inserted on it.")
  @Description("")
  String ShareMessageMethodDescriptions();

  @DefaultMessage("ShowAlert")
  @Description("")
  String ShowAlertMethods();

  @DefaultMessage("Display a temporary notification")
  @Description("")
  String ShowAlertMethodDescriptions();

  @DefaultMessage("ShowChooseDialog")
  @Description("")
  String ShowChooseDialogMethods();

  @DefaultMessage("Shows a dialog box with two buttons, from which the user can choose. If cancelable is true there will be an additional CANCEL button. Pressing a button will raise the AfterChoosing event. The \"choice\" parameter to AfterChoosing will be the text on the button that was pressed, or \"Cancel\" if the CANCEL button was pressed.")
  @Description("")
  String ShowChooseDialogMethodDescriptions();

  @DefaultMessage("ShowInfobox")
  @Description("")
  String ShowInfoboxMethods();

  @DefaultMessage("Show the infobox for the feature. This will show the infobox even if")
  @Description("")
  String ShowInfoboxMethodDescriptions();

  @DefaultMessage("ShowMessageDialog")
  @Description("")
  String ShowMessageDialogMethods();

  @DefaultMessage("Display an alert dialog with a single button that dismisses the alert.")
  @Description("")
  String ShowMessageDialogMethodDescriptions();

  @DefaultMessage("ShowPasswordDialog")
  @Description("")
  String ShowPasswordDialogMethods();

  @DefaultMessage("Shows a dialog box where the user can enter password (input is masked), after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering password will raise the AfterTextInput event. The \"response\" parameter to AfterTextInput will be the entered password, or \"Cancel\" if CANCEL button was pressed.")
  @Description("")
  String ShowPasswordDialogMethodDescriptions();

  @DefaultMessage("ShowProgressDialog")
  @Description("")
  String ShowProgressDialogMethods();

  @DefaultMessage("Shows a dialog box with an optional title and message (use empty strings if they are not wanted). This dialog box contains a spinning artifact to indicate that the program is working. It cannot be canceled by the user but must be dismissed by the App Inventor Program by using the DismissProgressDialog block.")
  @Description("")
  String ShowProgressDialogMethodDescriptions();

  @DefaultMessage("ShowTextDialog")
  @Description("")
  String ShowTextDialogMethods();

  @DefaultMessage("Shows a dialog box where the user can enter text, after which the AfterTextInput event will be raised. If cancelable is true there will be an additional CANCEL button. Entering text will raise the AfterTextInput event. The \"response\" parameter to AfterTextInput will be the text that was entered, or \"Cancel\" if the CANCEL button was pressed.")
  @Description("")
  String ShowTextDialogMethodDescriptions();

  @DefaultMessage("Speak")
  @Description("")
  String SpeakMethods();

  @DefaultMessage("Speaks the given message.")
  @Description("")
  String SpeakMethodDescriptions();

  @DefaultMessage("Start")
  @Description("")
  String StartMethods();

  @DefaultMessage("Starts playback of the video.")
  @Description("")
  String StartMethodDescriptions();

  @DefaultMessage("StartActivity")
  @Description("")
  String StartActivityMethods();

  @DefaultMessage("Start the activity corresponding to this ActivityStarter.")
  @Description("")
  String StartActivityMethodDescriptions();

  @DefaultMessage("StartProgram")
  @Description("")
  String StartProgramMethods();

  @DefaultMessage("Start execution of a previously downloaded program on the robot.")
  @Description("")
  String StartProgramMethodDescriptions();

  @DefaultMessage("Stop")
  @Description("")
  String StopMethods();

  @DefaultMessage("Resets to start of video and pauses it if video was playing.")
  @Description("")
  String StopMethodDescriptions();

  @DefaultMessage("StopAccepting")
  @Description("")
  String StopAcceptingMethods();

  @DefaultMessage("Stop accepting an incoming connection.")
  @Description("")
  String StopAcceptingMethodDescriptions();

  @DefaultMessage("StopFollowing")
  @Description("")
  String StopFollowingMethods();

  @DefaultMessage("Stops following a user.")
  @Description("")
  String StopFollowingMethodDescriptions();

  @DefaultMessage("StopProgram")
  @Description("")
  String StopProgramMethods();

  @DefaultMessage("Stop execution of the currently running program on the robot.")
  @Description("")
  String StopProgramMethodDescriptions();

  @DefaultMessage("StopSound")
  @Description("")
  String StopSoundMethods();

  @DefaultMessage("Stop any sound on the robot.")
  @Description("")
  String StopSoundMethodDescriptions();

  @DefaultMessage("StopSoundPlayback")
  @Description("")
  String StopSoundPlaybackMethods();

  @DefaultMessage("Stop sound playback.")
  @Description("")
  String StopSoundPlaybackMethodDescriptions();

  @DefaultMessage("StoreValue")
  @Description("")
  String StoreValueMethods();

  @DefaultMessage("Asks the Web service to store the given value under the given tag")
  @Description("")
  String StoreValueMethodDescriptions();

  @DefaultMessage("SystemTime")
  @Description("")
  String SystemTimeMethods();

  @DefaultMessage("The phone''s internal time")
  @Description("")
  String SystemTimeMethodDescriptions();

  @DefaultMessage("TakePicture")
  @Description("")
  String TakePictureMethods();

  @DefaultMessage("Takes a picture, then raises the AfterPicture event. If useFront is true, adds an extra to the intent that requests the front-facing camera.")
  @Description("")
  String TakePictureMethodDescriptions();

  @DefaultMessage("ToggleDirection")
  @Description("")
  String ToggleDirectionMethods();

  @DefaultMessage("Toggle the direction of motors.")
  @Description("")
  String ToggleDirectionMethodDescriptions();

  @DefaultMessage("TurnClockwiseIndefinitely")
  @Description("")
  String TurnClockwiseIndefinitelyMethods();

  @DefaultMessage("Turn the robot clockwise indefinitely, with the specified percentage of maximum power, by powering the left drive motor forward and the right drive motor backward.")
  @Description("")
  String TurnClockwiseIndefinitelyMethodDescriptions();

  @DefaultMessage("TurnCounterClockwiseIndefinitely")
  @Description("")
  String TurnCounterClockwiseIndefinitelyMethods();

  @DefaultMessage("Turn the robot counterclockwise indefinitely, with the specified percentage of maximum power, by powering the right drive motor forward and the left drive motor backward.")
  @Description("")
  String TurnCounterClockwiseIndefinitelyMethodDescriptions();

  @DefaultMessage("Tweet")
  @Description("")
  String TweetMethods();

  @DefaultMessage("This sends a tweet as the logged-in user with the specified Text, which will be trimmed if it exceeds 160 characters. <p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String TweetMethodDescriptions();

  @DefaultMessage("TweetWithImage")
  @Description("")
  String TweetWithImageMethods();

  @DefaultMessage("This sends a tweet as the logged-in user with the specified Text and a path to the image to be uploaded, which will be trimmed if it exceeds 160 characters. If an image is not found or invalid, only the text will be tweeted.<p><u>Requirements</u>: This should only be called after the <code>IsAuthorized</code> event has been raised, indicating that the user has successfully logged in to Twitter.</p>")
  @Description("")
  String TweetWithImageMethodDescriptions();

  @DefaultMessage("Unauthenticate")
  @Description("")
  String UnauthenticateMethods();

  @DefaultMessage("If you are having difficulty with the Companion and you are switching between different Firebase accounts, you may need to use this function to clear internal Firebase caches. You can just use the \"Do It\" function on this block in the blocks editor. Note: You should not normally need to use this block as part of an application.")
  @Description("")
  String UnauthenticateMethodDescriptions();

  @DefaultMessage("UriDecode")
  @Description("")
  String UriDecodeMethods();

  @DefaultMessage("Decodes the encoded text value.")
  @Description("")
  String UriDecodeMethodDescriptions();

  @DefaultMessage("UriEncode")
  @Description("")
  String UriEncodeMethods();

  @DefaultMessage("Encodes the given text value so that it can be used in a URL.")
  @Description("")
  String UriEncodeMethodDescriptions();

  @DefaultMessage("Vibrate")
  @Description("")
  String VibrateMethods();

  @DefaultMessage("Vibrates for the specified number of milliseconds.")
  @Description("")
  String VibrateMethodDescriptions();

  @DefaultMessage("ViewContact")
  @Description("")
  String ViewContactMethods();

  @DefaultMessage("view a contact via its URI")
  @Description("")
  String ViewContactMethodDescriptions();

  @DefaultMessage("Weekday")
  @Description("")
  String WeekdayMethods();

  @DefaultMessage("The day of the week represented as a number from 1 (Sunday) to 7 (Saturday)")
  @Description("")
  String WeekdayMethodDescriptions();

  @DefaultMessage("WeekdayName")
  @Description("")
  String WeekdayNameMethods();

  @DefaultMessage("The name of the day of the week")
  @Description("")
  String WeekdayNameMethodDescriptions();

  @DefaultMessage("XMLTextDecode")
  @Description("")
  String XMLTextDecodeMethods();

  @DefaultMessage("Decodes the given XML string to produce a list structure. See the App Inventor documentation on \"Other topics, notes, and details\" for information.")
  @Description("")
  String XMLTextDecodeMethodDescriptions();

  @DefaultMessage("Year")
  @Description("")
  String YearMethods();

  @DefaultMessage("The year")
  @Description("")
  String YearMethodDescriptions();

  @DefaultMessage("doFault")
  @Description("")
  String doFaultMethods();

  @DefaultMessage("Causes an Exception, used to debug exception processing.")
  @Description("")
  String doFaultMethodDescriptions();

  @DefaultMessage("installURL")
  @Description("")
  String installURLMethods();

  @DefaultMessage("Downloads the URL and installs it as an Android Package via the installed browser")
  @Description("")
  String installURLMethodDescriptions();

  @DefaultMessage("isConnected")
  @Description("")
  String isConnectedMethods();

  @DefaultMessage("Returns TRUE if the phone is on Wifi, FALSE otherwise")
  @Description("")
  String isConnectedMethodDescriptions();

  @DefaultMessage("isDirect")
  @Description("")
  String isDirectMethods();

  @DefaultMessage("Returns true if we are running in the emulator or USB Connection")
  @Description("")
  String isDirectMethodDescriptions();

  @DefaultMessage("setAssetsLoaded")
  @Description("")
  String setAssetsLoadedMethods();

  @DefaultMessage("Declare that we have loaded our initial assets and other assets should come from the sdcard")
  @Description("")
  String setAssetsLoadedMethodDescriptions();

  @DefaultMessage("setHmacSeedReturnCode")
  @Description("")
  String setHmacSeedReturnCodeMethods();

  @DefaultMessage("Establish the secret seed for HOTP generation. Return the SHA1 of the provided seed, this will be used to contact the rendezvous server. Note: This code also starts the connection negotiation process if we are using WebRTC. This is a bit of a kludge...")
  @Description("")
  String setHmacSeedReturnCodeMethodDescriptions();

  @DefaultMessage("shutdown")
  @Description("")
  String shutdownMethods();

  @DefaultMessage("Really Exit the Application")
  @Description("")
  String shutdownMethodDescriptions();

  @DefaultMessage("startHTTPD")
  @Description("")
  String startHTTPDMethods();

  @DefaultMessage("Start the internal AppInvHTTPD to listen for incoming forms. FOR REPL USE ONLY!")
  @Description("")
  String startHTTPDMethodDescriptions();

  @DefaultMessage("startWebRTC")
  @Description("")
  String startWebRTCMethods();

  @DefaultMessage("Start the WebRTC engine")
  @Description("")
  String startWebRTCMethodDescriptions();


  /* Events */
  @DefaultMessage("AboveRange")
  @Description("")
  String AboveRangeEvents();

  @DefaultMessage("Distance has gone above the range.")
  @Description("")
  String AboveRangeEventDescriptions();

  @DefaultMessage("AccelerationChanged")
  @Description("")
  String AccelerationChangedEvents();

  @DefaultMessage("Indicates the acceleration changed in the X, Y, and/or Z dimensions.")
  @Description("")
  String AccelerationChangedEventDescriptions();

  @DefaultMessage("ActivityCanceled")
  @Description("")
  String ActivityCanceledEvents();

  @DefaultMessage("Event raised if this ActivityStarter returns because the activity was canceled.")
  @Description("")
  String ActivityCanceledEventDescriptions();

  @DefaultMessage("AfterActivity")
  @Description("")
  String AfterActivityEvents();

  @DefaultMessage("Event raised after this ActivityStarter returns.")
  @Description("")
  String AfterActivityEventDescriptions();

  @DefaultMessage("AfterChoosing")
  @Description("")
  String AfterChoosingEvents();

  @DefaultMessage("Event after the user has made a selection for ShowChooseDialog.")
  @Description("")
  String AfterChoosingEventDescriptions();

  @DefaultMessage("AfterDateSet")
  @Description("")
  String AfterDateSetEvents();

  @DefaultMessage("Event that runs after the user chooses a Date in the dialog")
  @Description("")
  String AfterDateSetEventDescriptions();

  @DefaultMessage("AfterFileSaved")
  @Description("")
  String AfterFileSavedEvents();

  @DefaultMessage("Event indicating that the contents of the file have been written.")
  @Description("")
  String AfterFileSavedEventDescriptions();

  @DefaultMessage("AfterGettingText")
  @Description("")
  String AfterGettingTextEvents();

  @DefaultMessage("Simple event to raise after the VoiceReco activity has returned")
  @Description("")
  String AfterGettingTextEventDescriptions();

  @DefaultMessage("AfterPicking")
  @Description("")
  String AfterPickingEvents();

  @DefaultMessage("Event to be raised after the picker activity returns its result and the properties have been filled in.")
  @Description("")
  String AfterPickingEventDescriptions();

  @DefaultMessage("AfterPicture")
  @Description("")
  String AfterPictureEvents();

  @DefaultMessage("Indicates that a photo was taken with the camera and provides the path to the stored picture.")
  @Description("")
  String AfterPictureEventDescriptions();

  @DefaultMessage("AfterRecording")
  @Description("")
  String AfterRecordingEvents();

  @DefaultMessage("Indicates that a video was recorded with the camera and provides the path to the stored picture.")
  @Description("")
  String AfterRecordingEventDescriptions();

  @DefaultMessage("AfterScan")
  @Description("")
  String AfterScanEvents();

  @DefaultMessage("Indicates that the scanner has read a (text) result and provides the result")
  @Description("")
  String AfterScanEventDescriptions();

  @DefaultMessage("AfterSelecting")
  @Description("")
  String AfterSelectingEvents();

  @DefaultMessage("Event called after the user selects an item from the dropdown list.")
  @Description("")
  String AfterSelectingEventDescriptions();

  @DefaultMessage("AfterSoundRecorded")
  @Description("")
  String AfterSoundRecordedEvents();

  @DefaultMessage("Provides the location of the newly created sound.")
  @Description("")
  String AfterSoundRecordedEventDescriptions();

  @DefaultMessage("AfterSpeaking")
  @Description("")
  String AfterSpeakingEvents();

  @DefaultMessage("Event to raise after the message is spoken.")
  @Description("")
  String AfterSpeakingEventDescriptions();

  @DefaultMessage("AfterTextInput")
  @Description("")
  String AfterTextInputEvents();

  @DefaultMessage("Event raised after the user has responded to ShowTextDialog.")
  @Description("")
  String AfterTextInputEventDescriptions();

  @DefaultMessage("AfterTimeSet")
  @Description("")
  String AfterTimeSetEvents();

  @DefaultMessage("This event is run when a user has set the time in the popup dialog.")
  @Description("")
  String AfterTimeSetEventDescriptions();

  @DefaultMessage("BackPressed")
  @Description("")
  String BackPressedEvents();

  @DefaultMessage("Device back button pressed.")
  @Description("")
  String BackPressedEventDescriptions();

  @DefaultMessage("BeforeGettingText")
  @Description("")
  String BeforeGettingTextEvents();

  @DefaultMessage("Simple event to raise when VoiceReco is invoked but before the VoiceReco activity is started.")
  @Description("")
  String BeforeGettingTextEventDescriptions();

  @DefaultMessage("BeforePicking")
  @Description("")
  String BeforePickingEvents();

  @DefaultMessage("Event to raise when the button of the component is clicked or the list is shown using the Open block. This event occurs before the list of items is displayed, and can be used to prepare the list before it is shown.")
  @Description("")
  String BeforePickingEventDescriptions();

  @DefaultMessage("BeforeSpeaking")
  @Description("")
  String BeforeSpeakingEvents();

  @DefaultMessage("Event to raise when Speak is invoked, before the message is spoken.")
  @Description("")
  String BeforeSpeakingEventDescriptions();

  @DefaultMessage("BelowRange")
  @Description("")
  String BelowRangeEvents();

  @DefaultMessage("Distance has gone below the range.")
  @Description("")
  String BelowRangeEventDescriptions();

  @DefaultMessage("BoundsChange")
  @Description("")
  String BoundsChangeEvents();

  @DefaultMessage("User has changed the map bounds by panning or zooming the map.")
  @Description("")
  String BoundsChangeEventDescriptions();

  @DefaultMessage("CalibrationFailed")
  @Description("")
  String CalibrationFailedEvents();

  @DefaultMessage("Event for CalibrationFailed")
  @Description("")
  String CalibrationFailedEventDescriptions();

  @DefaultMessage("Changed")
  @Description("")
  String ChangedEvents();

  @DefaultMessage("Default Changed event handler.")
  @Description("")
  String ChangedEventDescriptions();

  @DefaultMessage("ChoosingCanceled")
  @Description("")
  String ChoosingCanceledEvents();

  @DefaultMessage("Event raised when the user canceled ShowChooseDialog.")
  @Description("")
  String ChoosingCanceledEventDescriptions();

  @DefaultMessage("Click")
  @Description("")
  String ClickEvents();

  @DefaultMessage("The user clicked on the feature.")
  @Description("")
  String ClickEventDescriptions();

  @DefaultMessage("CloudDBError")
  @Description("")
  String CloudDBErrorEvents();

  @DefaultMessage("Indicates that an error occurred while communicating with the CloudDB Redis server.")
  @Description("")
  String CloudDBErrorEventDescriptions();

  @DefaultMessage("CollidedWith")
  @Description("")
  String CollidedWithEvents();

  @DefaultMessage("Handler for CollidedWith events, called when two sprites collide. Note that checking for collisions with a rotated ImageSprite currently checks against the sprite''s unrotated position. Therefore, collision checking will be inaccurate for tall narrow or short wide sprites that are rotated.")
  @Description("")
  String CollidedWithEventDescriptions();

  @DefaultMessage("ColorChanged")
  @Description("")
  String ColorChangedEvents();

  @DefaultMessage("Detected color has changed. The ColorChanged event will not occur if the DetectColor property is set to False or if the ColorChangedEventEnabled property is set to False.")
  @Description("")
  String ColorChangedEventDescriptions();

  @DefaultMessage("Completed")
  @Description("")
  String CompletedEvents();

  @DefaultMessage("Indicates that the video has reached the end")
  @Description("")
  String CompletedEventDescriptions();

  @DefaultMessage("ConnectionAccepted")
  @Description("")
  String ConnectionAcceptedEvents();

  @DefaultMessage("Indicates that a bluetooth connection has been accepted.")
  @Description("")
  String ConnectionAcceptedEventDescriptions();

  @DefaultMessage("DataChanged")
  @Description("")
  String DataChangedEvents();

  @DefaultMessage("Indicates that the data in the Firebase has changed. Launches an event with the tag and value that have been updated.")
  @Description("")
  String DataChangedEventDescriptions();

  @DefaultMessage("DirectMessagesReceived")
  @Description("")
  String DirectMessagesReceivedEvents();

  @DefaultMessage("This event is raised when the recent messages requested through <code>RequestDirectMessages</code> have been retrieved. A list of the messages can then be found in the <code>messages</code> parameter or the <code>Messages</code> property.")
  @Description("")
  String DirectMessagesReceivedEventDescriptions();

  @DefaultMessage("DoubleTapAtPoint")
  @Description("")
  String DoubleTapAtPointEvents();

  @DefaultMessage("The user double-tapped at a point on the map. This event will be followed by a ZoomChanged event if zooming gestures are enabled and the map is not at the highest possible zoom level.")
  @Description("")
  String DoubleTapAtPointEventDescriptions();

  @DefaultMessage("Drag")
  @Description("")
  String DragEvents();

  @DefaultMessage("The user dragged the map feature.")
  @Description("")
  String DragEventDescriptions();

  @DefaultMessage("Dragged")
  @Description("")
  String DraggedEvents();

  @DefaultMessage("Handler for Dragged events. On all calls, the starting coordinates are where the screen was first touched, and the \"current\" coordinates describe the endpoint of the current line segment. On the first call within a given drag, the \"previous\" coordinates are the same as the starting coordinates; subsequently, they are the \"current\" coordinates from the prior call. Note that the Sprite won''t actually move anywhere in response to the Dragged event unless MoveTo is specifically called.")
  @Description("")
  String DraggedEventDescriptions();

  @DefaultMessage("EdgeReached")
  @Description("")
  String EdgeReachedEvents();

  @DefaultMessage("Event handler called when the sprite reaches an edge of the screen. If Bounce is then called with that edge, the sprite will appear to bounce off of the edge it reached. Edge here is represented as an integer that indicates one of eight directions north(1), northeast(2), east(3), southeast(4), south (-1), southwest(-2), west(-3), and northwest(-4).")
  @Description("")
  String EdgeReachedEventDescriptions();

  @DefaultMessage("ErrorOccurred")
  @Description("")
  String ErrorOccurredEvents();

  @DefaultMessage("Event raised when an error occurs. Only some errors will raise this condition. For those errors, the system will show a notification by default. You can use this event handler to prescribe an error behavior different than the default.")
  @Description("")
  String ErrorOccurredEventDescriptions();

  @DefaultMessage("FeatureClick")
  @Description("")
  String FeatureClickEvents();

  @DefaultMessage("The user clicked on a map feature.")
  @Description("")
  String FeatureClickEventDescriptions();

  @DefaultMessage("FeatureDrag")
  @Description("")
  String FeatureDragEvents();

  @DefaultMessage("The user dragged a map feature.")
  @Description("")
  String FeatureDragEventDescriptions();

  @DefaultMessage("FeatureLongClick")
  @Description("")
  String FeatureLongClickEvents();

  @DefaultMessage("The user long-pressed on a map feature.")
  @Description("")
  String FeatureLongClickEventDescriptions();

  @DefaultMessage("FeatureStartDrag")
  @Description("")
  String FeatureStartDragEvents();

  @DefaultMessage("The user started dragging a map feature.")
  @Description("")
  String FeatureStartDragEventDescriptions();

  @DefaultMessage("FeatureStopDrag")
  @Description("")
  String FeatureStopDragEvents();

  @DefaultMessage("The user stopped dragging a map feature.")
  @Description("")
  String FeatureStopDragEventDescriptions();

  @DefaultMessage("FirebaseError")
  @Description("")
  String FirebaseErrorEvents();

  @DefaultMessage("Indicates that the communication with the Firebase signaled an error.")
  @Description("")
  String FirebaseErrorEventDescriptions();

  @DefaultMessage("FirstRemoved")
  @Description("")
  String FirstRemovedEvents();

  @DefaultMessage("Event triggered by the \"RemoveFirst\" function. The argument \"value\" is the object that was the first in the list, and which is now removed.")
  @Description("")
  String FirstRemovedEventDescriptions();

  @DefaultMessage("Flung")
  @Description("")
  String FlungEvents();

  @DefaultMessage("When a fling gesture (quick swipe) is made on the sprite: provides the (x,y) position of the start of the fling, relative to the upper left of the canvas. Also provides the speed (pixels per millisecond) and heading (0-360 degrees) of the fling, as well as the x velocity and y velocity components of the fling''s vector.")
  @Description("")
  String FlungEventDescriptions();

  @DefaultMessage("FollowersReceived")
  @Description("")
  String FollowersReceivedEvents();

  @DefaultMessage("This event is raised when all of the followers of the logged-in user requested through <code>RequestFollowers</code> have been retrieved. A list of the followers can then be found in the <code>followers</code> parameter or the <code>Followers</code> property.")
  @Description("")
  String FollowersReceivedEventDescriptions();

  @DefaultMessage("FriendTimelineReceived")
  @Description("")
  String FriendTimelineReceivedEvents();

  @DefaultMessage("This event is raised when the messages requested through <code>RequestFriendTimeline</code> have been retrieved. The <code>timeline</code> parameter and the <code>Timeline</code> property will contain a list of lists, where each sub-list contains a status update of the form (username message)")
  @Description("")
  String FriendTimelineReceivedEventDescriptions();

  @DefaultMessage("FunctionCompleted")
  @Description("")
  String FunctionCompletedEvents();

  @DefaultMessage("Indicates that a function call completed.")
  @Description("")
  String FunctionCompletedEventDescriptions();

  @DefaultMessage("GPSAvailable")
  @Description("")
  String GPSAvailableEvents();

  @DefaultMessage("Event for GPSAvailable")
  @Description("")
  String GPSAvailableEventDescriptions();

  @DefaultMessage("GPSLost")
  @Description("")
  String GPSLostEvents();

  @DefaultMessage("Event for GPSLost")
  @Description("")
  String GPSLostEventDescriptions();

  @DefaultMessage("GotBallot")
  @Description("")
  String GotBallotEvents();

  @DefaultMessage("Event indicating that a ballot was retrieved from the Web service and that the properties <code>BallotQuestion</code> and <code>BallotOptions</code> have been set. This is always preceded by a call to the method <code>RequestBallot</code>.")
  @Description("")
  String GotBallotEventDescriptions();

  @DefaultMessage("GotBallotConfirmation")
  @Description("")
  String GotBallotConfirmationEvents();

  @DefaultMessage("Event confirming that the Voting service received the ballot.")
  @Description("")
  String GotBallotConfirmationEventDescriptions();

  @DefaultMessage("GotFeatures")
  @Description("")
  String GotFeaturesEvents();

  @DefaultMessage("A GeoJSON document was successfully read from url. The features specified in the document are provided as a list in features.")
  @Description("")
  String GotFeaturesEventDescriptions();

  @DefaultMessage("GotFile")
  @Description("")
  String GotFileEvents();

  @DefaultMessage("Event indicating that a request has finished.")
  @Description("")
  String GotFileEventDescriptions();

  @DefaultMessage("GotFocus")
  @Description("")
  String GotFocusEvents();

  @DefaultMessage("Indicates the cursor moved over the button so it is now possible to click it.")
  @Description("")
  String GotFocusEventDescriptions();

  @DefaultMessage("GotMessage")
  @Description("")
  String GotMessageEvents();

  @DefaultMessage("Indicates that a new message has been received.")
  @Description("")
  String GotMessageEventDescriptions();

  @DefaultMessage("GotResult")
  @Description("")
  String GotResultEvents();

  @DefaultMessage("Indicates that the Fusion Tables query has finished processing, with a result. The result of the query will generally be returned in CSV format, and can be converted to list format using the \"list from csv table\" or \"list from csv row\" blocks.")
  @Description("")
  String GotResultEventDescriptions();

  @DefaultMessage("GotText")
  @Description("")
  String GotTextEvents();

  @DefaultMessage("Event indicating that a request has finished.")
  @Description("")
  String GotTextEventDescriptions();

  @DefaultMessage("GotTranslation")
  @Description("")
  String GotTranslationEvents();

  @DefaultMessage("Event triggered when the Yandex.Translate service returns the translated text. This event also provides a response code for error handling. If the responseCode is not 200, then something went wrong with the call, and the translation will not be available.")
  @Description("")
  String GotTranslationEventDescriptions();

  @DefaultMessage("GotValue")
  @Description("")
  String GotValueEvents();

  @DefaultMessage("Indicates that a GetValue server request has succeeded.")
  @Description("")
  String GotValueEventDescriptions();

  @DefaultMessage("GyroscopeChanged")
  @Description("")
  String GyroscopeChangedEvents();

  @DefaultMessage("Indicates that the gyroscope sensor data has changed. The timestamp parameter is the time in nanoseconds at which the event occurred.")
  @Description("")
  String GyroscopeChangedEventDescriptions();

  @DefaultMessage("IncomingCallAnswered")
  @Description("")
  String IncomingCallAnsweredEvents();

  @DefaultMessage("Event indicating that an incoming phone call is answered. phoneNumber is the incoming call phone number.")
  @Description("")
  String IncomingCallAnsweredEventDescriptions();

  @DefaultMessage("Info")
  @Description("")
  String InfoEvents();

  @DefaultMessage("Indicates that something has occurred which the player should know about.")
  @Description("")
  String InfoEventDescriptions();

  @DefaultMessage("Initialize")
  @Description("")
  String InitializeEvents();

  @DefaultMessage("Screen starting")
  @Description("")
  String InitializeEventDescriptions();

  @DefaultMessage("InstanceIdChanged")
  @Description("")
  String InstanceIdChangedEvents();

  @DefaultMessage("Indicates that the InstanceId property has changed as a result of calling MakeNewInstance or SetInstance.")
  @Description("")
  String InstanceIdChangedEventDescriptions();

  @DefaultMessage("InvalidPoint")
  @Description("")
  String InvalidPointEvents();

  @DefaultMessage("An invalid coordinate was supplied during a maps operation. The message parameter will have more details about the issue.")
  @Description("")
  String InvalidPointEventDescriptions();

  @DefaultMessage("Invited")
  @Description("")
  String InvitedEvents();

  @DefaultMessage("Indicates that a user has been invited to this game instance.")
  @Description("")
  String InvitedEventDescriptions();

  @DefaultMessage("IsAuthorized")
  @Description("")
  String IsAuthorizedEvents();

  @DefaultMessage("This event is raised after the program calls <code>Authorize</code> if the authorization was successful. It is also called after a call to <code>CheckAuthorized</code> if we already have a valid access token. After this event has been raised, any other method for this component can be called.")
  @Description("")
  String IsAuthorizedEventDescriptions();

  @DefaultMessage("LoadError")
  @Description("")
  String LoadErrorEvents();

  @DefaultMessage("An error was encountered while processing a GeoJSON document at the given url. The responseCode parameter will contain an HTTP status code and the errorMessage parameter will contain a detailed error message.")
  @Description("")
  String LoadErrorEventDescriptions();

  @DefaultMessage("LocationChanged")
  @Description("")
  String LocationChangedEvents();

  @DefaultMessage("Indicates that a new location has been detected.")
  @Description("")
  String LocationChangedEventDescriptions();

  @DefaultMessage("LongClick")
  @Description("")
  String LongClickEvents();

  @DefaultMessage("The user long-pressed on the feature. This event will only trigger if Draggable is false.")
  @Description("")
  String LongClickEventDescriptions();

  @DefaultMessage("LongPressAtPoint")
  @Description("")
  String LongPressAtPointEvents();

  @DefaultMessage("The user long-pressed at a point on the map.")
  @Description("")
  String LongPressAtPointEventDescriptions();

  @DefaultMessage("LostFocus")
  @Description("")
  String LostFocusEvents();

  @DefaultMessage("Indicates the cursor moved away from the button so it is now no longer possible to click it.")
  @Description("")
  String LostFocusEventDescriptions();

  @DefaultMessage("MediaStored")
  @Description("")
  String MediaStoredEvents();

  @DefaultMessage("Indicates that a MediaStored server request has succeeded.")
  @Description("")
  String MediaStoredEventDescriptions();

  @DefaultMessage("MentionsReceived")
  @Description("")
  String MentionsReceivedEvents();

  @DefaultMessage("This event is raised when the mentions of the logged-in user requested through <code>RequestMentions</code> have been retrieved. A list of the mentions can then be found in the <code>mentions</code> parameter or the <code>Mentions</code> property.")
  @Description("")
  String MentionsReceivedEventDescriptions();

  @DefaultMessage("MessageReceived")
  @Description("")
  String MessageReceivedEvents();

  @DefaultMessage("Event that''s raised when a text message is received by the phone.")
  @Description("")
  String MessageReceivedEventDescriptions();

  @DefaultMessage("NewInstanceMade")
  @Description("")
  String NewInstanceMadeEvents();

  @DefaultMessage("Indicates that a new instance was successfully created after calling MakeNewInstance.")
  @Description("")
  String NewInstanceMadeEventDescriptions();

  @DefaultMessage("NewLeader")
  @Description("")
  String NewLeaderEvents();

  @DefaultMessage("Indicates that this game has a new leader as specified through SetLeader")
  @Description("")
  String NewLeaderEventDescriptions();

  @DefaultMessage("NoLongerCollidingWith")
  @Description("")
  String NoLongerCollidingWithEvents();

  @DefaultMessage("Event indicating that a pair of sprites are no longer colliding.")
  @Description("")
  String NoLongerCollidingWithEventDescriptions();

  @DefaultMessage("NoOpenPoll")
  @Description("")
  String NoOpenPollEvents();

  @DefaultMessage("Event indicating that the service has no open poll.")
  @Description("")
  String NoOpenPollEventDescriptions();

  @DefaultMessage("OnSettings")
  @Description("")
  String OnSettingsEvents();

  @DefaultMessage("This event is fired when the \"settings\" menu item is selected (only available in the Companion App, defined in ReplForm.java).")
  @Description("")
  String OnSettingsEventDescriptions();

  @DefaultMessage("OrientationChanged")
  @Description("")
  String OrientationChangedEvents();

  @DefaultMessage("Default OrientationChanged event handler. <p>This event is signalled when the device''s orientation has changed. It reports the new values of azimuth, pich, and roll, and it also sets the Azimuth, Pitch, and roll properties.</p> <p>Azimuth is the compass heading in degrees, pitch indicates how the device is tilted from top to bottom, and roll indicates how much the device is tilted from side to side.</p>")
  @Description("")
  String OrientationChangedEventDescriptions();

  @DefaultMessage("OtherPlayerStarted")
  @Description("")
  String OtherPlayerStartedEvents();

  @DefaultMessage("This event is signaled when another player has started (and the current player is playing or paused, but not stopped).")
  @Description("")
  String OtherPlayerStartedEventDescriptions();

  @DefaultMessage("OtherScreenClosed")
  @Description("")
  String OtherScreenClosedEvents();

  @DefaultMessage("Event raised when another screen has closed and control has returned to this screen.")
  @Description("")
  String OtherScreenClosedEventDescriptions();

  @DefaultMessage("PermissionDenied")
  @Description("")
  String PermissionDeniedEvents();

  @DefaultMessage("Event to handle when the app user has denied a needed permission.")
  @Description("")
  String PermissionDeniedEventDescriptions();

  @DefaultMessage("PermissionGranted")
  @Description("")
  String PermissionGrantedEvents();

  @DefaultMessage("Event to handle when the app user has granted a needed permission. This event is only run when permission is granted in response to the AskForPermission method.")
  @Description("")
  String PermissionGrantedEventDescriptions();

  @DefaultMessage("PhoneCallEnded")
  @Description("")
  String PhoneCallEndedEvents();

  @DefaultMessage("Event indicating that a phone call has ended. If status is 1, incoming call is missed or rejected; if status is 2, incoming call is answered before hanging up; if status is 3, outgoing call is hung up. phoneNumber is the ended call phone number.")
  @Description("")
  String PhoneCallEndedEventDescriptions();

  @DefaultMessage("PhoneCallStarted")
  @Description("")
  String PhoneCallStartedEvents();

  @DefaultMessage("Event indicating that a phonecall has started. If status is 1, incoming call is ringing; if status is 2, outgoing call is dialled. phoneNumber is the incoming/outgoing phone number.")
  @Description("")
  String PhoneCallStartedEventDescriptions();

  @DefaultMessage("PlayerJoined")
  @Description("")
  String PlayerJoinedEvents();

  @DefaultMessage("Indicates that a new player has joined this game instance.")
  @Description("")
  String PlayerJoinedEventDescriptions();

  @DefaultMessage("PlayerLeft")
  @Description("")
  String PlayerLeftEvents();

  @DefaultMessage("Indicates that a player has left this game instance.")
  @Description("")
  String PlayerLeftEventDescriptions();

  @DefaultMessage("PositionChanged")
  @Description("")
  String PositionChangedEvents();

  @DefaultMessage("Indicates that position of the slider thumb has changed.")
  @Description("")
  String PositionChangedEventDescriptions();

  @DefaultMessage("Pressed")
  @Description("")
  String PressedEvents();

  @DefaultMessage("Touch sensor has been pressed.")
  @Description("")
  String PressedEventDescriptions();

  @DefaultMessage("ProximityChanged")
  @Description("")
  String ProximityChangedEvents();

  @DefaultMessage("Triggered when distance (in cm) of the object to the device changes.")
  @Description("")
  String ProximityChangedEventDescriptions();

  @DefaultMessage("Ready")
  @Description("")
  String ReadyEvents();

  @DefaultMessage("Map has been initialized and is ready for user interaction.")
  @Description("")
  String ReadyEventDescriptions();

  @DefaultMessage("Released")
  @Description("")
  String ReleasedEvents();

  @DefaultMessage("Touch sensor has been released.")
  @Description("")
  String ReleasedEventDescriptions();

  @DefaultMessage("ScreenOrientationChanged")
  @Description("")
  String ScreenOrientationChangedEvents();

  @DefaultMessage("Screen orientation changed")
  @Description("")
  String ScreenOrientationChangedEventDescriptions();

  @DefaultMessage("SearchSuccessful")
  @Description("")
  String SearchSuccessfulEvents();

  @DefaultMessage("This event is raised when the results of the search requested through <code>SearchSuccessful</code> have been retrieved. A list of the results can then be found in the <code>results</code> parameter or the <code>Results</code> property.")
  @Description("")
  String SearchSuccessfulEventDescriptions();

  @DefaultMessage("SensorValueChanged")
  @Description("")
  String SensorValueChangedEvents();

  @DefaultMessage("Called then the sensor value changed.")
  @Description("")
  String SensorValueChangedEventDescriptions();

  @DefaultMessage("ServerCommandFailure")
  @Description("")
  String ServerCommandFailureEvents();

  @DefaultMessage("Indicates that a server command failed.")
  @Description("")
  String ServerCommandFailureEventDescriptions();

  @DefaultMessage("ServerCommandSuccess")
  @Description("")
  String ServerCommandSuccessEvents();

  @DefaultMessage("Indicates that a server command returned successfully.")
  @Description("")
  String ServerCommandSuccessEventDescriptions();

  @DefaultMessage("Shaking")
  @Description("")
  String ShakingEvents();

  @DefaultMessage("Indicates the device started being shaken or continues to be shaken.")
  @Description("")
  String ShakingEventDescriptions();

  @DefaultMessage("SimpleStep")
  @Description("")
  String SimpleStepEvents();

  @DefaultMessage("This event is run when a raw step is detected")
  @Description("")
  String SimpleStepEventDescriptions();

  @DefaultMessage("StartDrag")
  @Description("")
  String StartDragEvents();

  @DefaultMessage("The user started a drag operation.")
  @Description("")
  String StartDragEventDescriptions();

  @DefaultMessage("StartedMoving")
  @Description("")
  String StartedMovingEvents();

  @DefaultMessage("Event for StartedMoving")
  @Description("")
  String StartedMovingEventDescriptions();

  @DefaultMessage("StartedRecording")
  @Description("")
  String StartedRecordingEvents();

  @DefaultMessage("Indicates that the recorder has started, and can be stopped.")
  @Description("")
  String StartedRecordingEventDescriptions();

  @DefaultMessage("StatusChanged")
  @Description("")
  String StatusChangedEvents();

  @DefaultMessage("Indicates that the status of the location provider service has changed, such as when a provider is lost or a new provider starts being used.")
  @Description("")
  String StatusChangedEventDescriptions();

  @DefaultMessage("StopDrag")
  @Description("")
  String StopDragEvents();

  @DefaultMessage("The user stopped a drag operation.")
  @Description("")
  String StopDragEventDescriptions();

  @DefaultMessage("StoppedMoving")
  @Description("")
  String StoppedMovingEvents();

  @DefaultMessage("Event for StoppedMoving")
  @Description("")
  String StoppedMovingEventDescriptions();

  @DefaultMessage("StoppedRecording")
  @Description("")
  String StoppedRecordingEvents();

  @DefaultMessage("Indicates that the recorder has stopped, and can be started again.")
  @Description("")
  String StoppedRecordingEventDescriptions();

  @DefaultMessage("TachoCountChanged")
  @Description("")
  String TachoCountChangedEvents();

  @DefaultMessage("Called when the tacho count has changed.")
  @Description("")
  String TachoCountChangedEventDescriptions();

  @DefaultMessage("TagList")
  @Description("")
  String TagListEvents();

  @DefaultMessage("Event triggered when we have received the list of known tags. Used with the \"GetTagList\" Function.")
  @Description("")
  String TagListEventDescriptions();

  @DefaultMessage("TagRead")
  @Description("")
  String TagReadEvents();

  @DefaultMessage("Indicates that a new tag has been detected. Currently this is only a plain text tag, as specified in the manifest. See Compiler.java.")
  @Description("")
  String TagReadEventDescriptions();

  @DefaultMessage("TagWritten")
  @Description("")
  String TagWrittenEvents();

  @DefaultMessage("Event for TagWritten")
  @Description("")
  String TagWrittenEventDescriptions();

  @DefaultMessage("TapAtPoint")
  @Description("")
  String TapAtPointEvents();

  @DefaultMessage("The user tapped at a point on the map.")
  @Description("")
  String TapAtPointEventDescriptions();

  @DefaultMessage("TextInputCanceled")
  @Description("")
  String TextInputCanceledEvents();

  @DefaultMessage("Event raised when the user canceled ShowTextDialog.")
  @Description("")
  String TextInputCanceledEventDescriptions();

  @DefaultMessage("Timer")
  @Description("")
  String TimerEvents();

  @DefaultMessage("Timer has gone off.")
  @Description("")
  String TimerEventDescriptions();

  @DefaultMessage("TouchDown")
  @Description("")
  String TouchDownEvents();

  @DefaultMessage("Indicates that the button was pressed down.")
  @Description("")
  String TouchDownEventDescriptions();

  @DefaultMessage("TouchUp")
  @Description("")
  String TouchUpEvents();

  @DefaultMessage("Indicates that a button has been released.")
  @Description("")
  String TouchUpEventDescriptions();

  @DefaultMessage("Touched")
  @Description("")
  String TouchedEvents();

  @DefaultMessage("When the user touches the sprite and then immediately lifts finger: provides the (x,y) position of the touch, relative to the upper left of the canvas")
  @Description("")
  String TouchedEventDescriptions();

  @DefaultMessage("UserEmailAddressSet")
  @Description("")
  String UserEmailAddressSetEvents();

  @DefaultMessage("Indicates that the user email address has been set.")
  @Description("")
  String UserEmailAddressSetEventDescriptions();

  @DefaultMessage("ValueStored")
  @Description("")
  String ValueStoredEvents();

  @DefaultMessage("Event indicating that a StoreValue server request has succeeded.")
  @Description("")
  String ValueStoredEventDescriptions();

  @DefaultMessage("WalkStep")
  @Description("")
  String WalkStepEvents();

  @DefaultMessage("This event is run when a walking step is detected. A walking step is a step that appears to be involved in forward motion.")
  @Description("")
  String WalkStepEventDescriptions();

  @DefaultMessage("WebServiceError")
  @Description("")
  String WebServiceErrorEvents();

  @DefaultMessage("Event indicating that the communication with the Web service resulted in an error.")
  @Description("")
  String WebServiceErrorEventDescriptions();

  @DefaultMessage("WebViewStringChange")
  @Description("")
  String WebViewStringChangeEvents();

  @DefaultMessage("When the JavaScript calls AppInventor.setWebViewString this event is run.")
  @Description("")
  String WebViewStringChangeEventDescriptions();

  @DefaultMessage("WithinRange")
  @Description("")
  String WithinRangeEvents();

  @DefaultMessage("Distance has gone within the range.")
  @Description("")
  String WithinRangeEventDescriptions();

  @DefaultMessage("ZoomChange")
  @Description("")
  String ZoomChangeEvents();

  @DefaultMessage("User has changed the zoom level of the map.")
  @Description("")
  String ZoomChangeEventDescriptions();


  /* Parameters */
  @DefaultMessage("XmlText")
  @Description("")
  String XmlTextParams();

  @DefaultMessage("address")
  @Description("")
  String addressParams();

  @DefaultMessage("altitude")
  @Description("")
  String altitudeParams();

  @DefaultMessage("angle")
  @Description("")
  String angleParams();

  @DefaultMessage("arguments")
  @Description("")
  String argumentsParams();

  @DefaultMessage("azimuth")
  @Description("")
  String azimuthParams();

  @DefaultMessage("bottom")
  @Description("")
  String bottomParams();

  @DefaultMessage("button1Text")
  @Description("")
  String button1TextParams();

  @DefaultMessage("button2Text")
  @Description("")
  String button2TextParams();

  @DefaultMessage("buttonText")
  @Description("")
  String buttonTextParams();

  @DefaultMessage("cancelable")
  @Description("")
  String cancelableParams();

  @DefaultMessage("centroid")
  @Description("")
  String centroidParams();

  @DefaultMessage("centroids")
  @Description("")
  String centroidsParams();

  @DefaultMessage("choice")
  @Description("")
  String choiceParams();

  @DefaultMessage("clip")
  @Description("")
  String clipParams();

  @DefaultMessage("color")
  @Description("")
  String colorParams();

  @DefaultMessage("columns")
  @Description("")
  String columnsParams();

  @DefaultMessage("command")
  @Description("")
  String commandParams();

  @DefaultMessage("component")
  @Description("")
  String componentParams();

  @DefaultMessage("conditions")
  @Description("")
  String conditionsParams();

  @DefaultMessage("contents")
  @Description("")
  String contentsParams();

  @DefaultMessage("count")
  @Description("")
  String countParams();

  @DefaultMessage("currentX")
  @Description("")
  String currentXParams();

  @DefaultMessage("currentY")
  @Description("")
  String currentYParams();

  @DefaultMessage("day")
  @Description("")
  String dayParams();

  @DefaultMessage("description")
  @Description("")
  String descriptionParams();

  @DefaultMessage("destination")
  @Description("")
  String destinationParams();

  @DefaultMessage("distance")
  @Description("")
  String distanceParams();

  @DefaultMessage("duration")
  @Description("")
  String durationParams();

  @DefaultMessage("durationMs")
  @Description("")
  String durationMsParams();

  @DefaultMessage("edge")
  @Description("")
  String edgeParams();

  @DefaultMessage("emailAddress")
  @Description("")
  String emailAddressParams();

  @DefaultMessage("encoding")
  @Description("")
  String encodingParams();

  @DefaultMessage("end")
  @Description("")
  String endParams();

  @DefaultMessage("errorMessage")
  @Description("")
  String errorMessageParams();

  @DefaultMessage("errorNumber")
  @Description("")
  String errorNumberParams();

  @DefaultMessage("feature")
  @Description("")
  String featureParams();

  @DefaultMessage("features")
  @Description("")
  String featuresParams();

  @DefaultMessage("file")
  @Description("")
  String fileParams();

  @DefaultMessage("fileName")
  @Description("")
  String fileNameParams();

  @DefaultMessage("fill")
  @Description("")
  String fillParams();

  @DefaultMessage("followers2")
  @Description("")
  String followers2Params();

  @DefaultMessage("frequencyHz")
  @Description("")
  String frequencyHzParams();

  @DefaultMessage("from")
  @Description("")
  String fromParams();

  @DefaultMessage("functionName")
  @Description("")
  String functionNameParams();

  @DefaultMessage("heading")
  @Description("")
  String headingParams();

  @DefaultMessage("height")
  @Description("")
  String heightParams();

  @DefaultMessage("hour")
  @Description("")
  String hourParams();

  @DefaultMessage("htmlText")
  @Description("")
  String htmlTextParams();

  @DefaultMessage("iceServers")
  @Description("")
  String iceServersParams();

  @DefaultMessage("image")
  @Description("")
  String imageParams();

  @DefaultMessage("imagePath")
  @Description("")
  String imagePathParams();

  @DefaultMessage("instanceId")
  @Description("")
  String instanceIdParams();

  @DefaultMessage("instant")
  @Description("")
  String instantParams();

  @DefaultMessage("itemToAdd")
  @Description("")
  String itemToAddParams();

  @DefaultMessage("jsonText")
  @Description("")
  String jsonTextParams();

  @DefaultMessage("languageToTranslateTo")
  @Description("")
  String languageToTranslateToParams();

  @DefaultMessage("latitude")
  @Description("")
  String latitudeParams();

  @DefaultMessage("left")
  @Description("")
  String leftParams();

  @DefaultMessage("list")
  @Description("")
  String listParams();

  @DefaultMessage("locationName")
  @Description("")
  String locationNameParams();

  @DefaultMessage("longitude")
  @Description("")
  String longitudeParams();

  @DefaultMessage("mailbox")
  @Description("")
  String mailboxParams();

  @DefaultMessage("makePublic")
  @Description("")
  String makePublicParams();

  @DefaultMessage("mapFeature")
  @Description("")
  String mapFeatureParams();

  @DefaultMessage("mediafile")
  @Description("")
  String mediafileParams();

  @DefaultMessage("mentions")
  @Description("")
  String mentionsParams();

  @DefaultMessage("message")
  @Description("")
  String messageParams();

  @DefaultMessage("messageText")
  @Description("")
  String messageTextParams();

  @DefaultMessage("messages")
  @Description("")
  String messagesParams();

  @DefaultMessage("millis")
  @Description("")
  String millisParams();

  @DefaultMessage("milliseconds")
  @Description("")
  String millisecondsParams();

  @DefaultMessage("millisecs")
  @Description("")
  String millisecsParams();

  @DefaultMessage("minute")
  @Description("")
  String minuteParams();

  @DefaultMessage("mode")
  @Description("")
  String modeParams();

  @DefaultMessage("month")
  @Description("")
  String monthParams();

  @DefaultMessage("motorPortLetter")
  @Description("")
  String motorPortLetterParams();

  @DefaultMessage("ms")
  @Description("")
  String msParams();

  @DefaultMessage("name")
  @Description("")
  String nameParams();

  @DefaultMessage("no")
  @Description("")
  String noParams();

  @DefaultMessage("notice")
  @Description("")
  String noticeParams();

  @DefaultMessage("number")
  @Description("")
  String numberParams();

  @DefaultMessage("numberOfBytes")
  @Description("")
  String numberOfBytesParams();

  @DefaultMessage("other")
  @Description("")
  String otherParams();

  @DefaultMessage("otherScreenName")
  @Description("")
  String otherScreenNameParams();

  @DefaultMessage("path")
  @Description("")
  String pathParams();

  @DefaultMessage("pattern")
  @Description("")
  String patternParams();

  @DefaultMessage("permissionName")
  @Description("")
  String permissionNameParams();

  @DefaultMessage("phoneNumber")
  @Description("")
  String phoneNumberParams();

  @DefaultMessage("pitch")
  @Description("")
  String pitchParams();

  @DefaultMessage("playerEmail")
  @Description("")
  String playerEmailParams();

  @DefaultMessage("playerId")
  @Description("")
  String playerIdParams();

  @DefaultMessage("pointList")
  @Description("")
  String pointListParams();

  @DefaultMessage("power")
  @Description("")
  String powerParams();

  @DefaultMessage("prevX")
  @Description("")
  String prevXParams();

  @DefaultMessage("prevY")
  @Description("")
  String prevYParams();

  @DefaultMessage("programName")
  @Description("")
  String programNameParams();

  @DefaultMessage("provider")
  @Description("")
  String providerParams();

  @DefaultMessage("quantity")
  @Description("")
  String quantityParams();

  @DefaultMessage("query")
  @Description("")
  String queryParams();

  @DefaultMessage("radius")
  @Description("")
  String radiusParams();

  @DefaultMessage("regulationMode")
  @Description("")
  String regulationModeParams();

  @DefaultMessage("relative")
  @Description("")
  String relativeParams();

  @DefaultMessage("rendezvousServer")
  @Description("")
  String rendezvousServerParams();

  @DefaultMessage("response")
  @Description("")
  String responseParams();

  @DefaultMessage("responseCode")
  @Description("")
  String responseCodeParams();

  @DefaultMessage("responseContent")
  @Description("")
  String responseContentParams();

  @DefaultMessage("responseType")
  @Description("")
  String responseTypeParams();

  @DefaultMessage("result")
  @Description("")
  String resultParams();

  @DefaultMessage("right")
  @Description("")
  String rightParams();

  @DefaultMessage("roll")
  @Description("")
  String rollParams();

  @DefaultMessage("runState")
  @Description("")
  String runStateParams();

  @DefaultMessage("rxDataLength")
  @Description("")
  String rxDataLengthParams();

  @DefaultMessage("searchResults")
  @Description("")
  String searchResultsParams();

  @DefaultMessage("second")
  @Description("")
  String secondParams();

  @DefaultMessage("secure")
  @Description("")
  String secureParams();

  @DefaultMessage("seed")
  @Description("")
  String seedParams();

  @DefaultMessage("selection")
  @Description("")
  String selectionParams();

  @DefaultMessage("sender")
  @Description("")
  String senderParams();

  @DefaultMessage("sensorMode")
  @Description("")
  String sensorModeParams();

  @DefaultMessage("sensorPortLetter")
  @Description("")
  String sensorPortLetterParams();

  @DefaultMessage("sensorType")
  @Description("")
  String sensorTypeParams();

  @DefaultMessage("sensorValue")
  @Description("")
  String sensorValueParams();

  @DefaultMessage("serviceName")
  @Description("")
  String serviceNameParams();

  @DefaultMessage("simpleSteps")
  @Description("")
  String simpleStepsParams();

  @DefaultMessage("sound")
  @Description("")
  String soundParams();

  @DefaultMessage("source")
  @Description("")
  String sourceParams();

  @DefaultMessage("speed")
  @Description("")
  String speedParams();

  @DefaultMessage("start")
  @Description("")
  String startParams();

  @DefaultMessage("startAngle")
  @Description("")
  String startAngleParams();

  @DefaultMessage("startX")
  @Description("")
  String startXParams();

  @DefaultMessage("startY")
  @Description("")
  String startYParams();

  @DefaultMessage("status")
  @Description("")
  String statusParams();

  @DefaultMessage("sweepAngle")
  @Description("")
  String sweepAngleParams();

  @DefaultMessage("tableId")
  @Description("")
  String tableIdParams();

  @DefaultMessage("tachoCount")
  @Description("")
  String tachoCountParams();

  @DefaultMessage("tachoCounts")
  @Description("")
  String tachoCountsParams();

  @DefaultMessage("tachoLimit")
  @Description("")
  String tachoLimitParams();

  @DefaultMessage("tag")
  @Description("")
  String tagParams();

  @DefaultMessage("tagFromWebDB")
  @Description("")
  String tagFromWebDBParams();

  @DefaultMessage("target")
  @Description("")
  String targetParams();

  @DefaultMessage("text")
  @Description("")
  String textParams();

  @DefaultMessage("textToTranslate")
  @Description("")
  String textToTranslateParams();

  @DefaultMessage("thumbPosition")
  @Description("")
  String thumbPositionParams();

  @DefaultMessage("timeline")
  @Description("")
  String timelineParams();

  @DefaultMessage("timestamp")
  @Description("")
  String timestampParams();

  @DefaultMessage("title")
  @Description("")
  String titleParams();

  @DefaultMessage("top")
  @Description("")
  String topParams();

  @DefaultMessage("translation")
  @Description("")
  String translationParams();

  @DefaultMessage("turnRatio")
  @Description("")
  String turnRatioParams();

  @DefaultMessage("type")
  @Description("")
  String typeParams();

  @DefaultMessage("uri")
  @Description("")
  String uriParams();

  @DefaultMessage("url")
  @Description("")
  String urlParams();

  @DefaultMessage("useBrake")
  @Description("")
  String useBrakeParams();

  @DefaultMessage("useCenter")
  @Description("")
  String useCenterParams();

  @DefaultMessage("user")
  @Description("")
  String userParams();

  @DefaultMessage("uuid")
  @Description("")
  String uuidParams();

  @DefaultMessage("value")
  @Description("")
  String valueParams();

  @DefaultMessage("valueFromWebDB")
  @Description("")
  String valueFromWebDBParams();

  @DefaultMessage("valueToAdd")
  @Description("")
  String valueToAddParams();

  @DefaultMessage("valueToStore")
  @Description("")
  String valueToStoreParams();

  @DefaultMessage("values")
  @Description("")
  String valuesParams();

  @DefaultMessage("walkSteps")
  @Description("")
  String walkStepsParams();

  @DefaultMessage("width")
  @Description("")
  String widthParams();

  @DefaultMessage("wildcard")
  @Description("")
  String wildcardParams();

  @DefaultMessage("x")
  @Description("")
  String xParams();

  @DefaultMessage("x1")
  @Description("")
  String x1Params();

  @DefaultMessage("x2")
  @Description("")
  String x2Params();

  @DefaultMessage("xAccel")
  @Description("")
  String xAccelParams();

  @DefaultMessage("xAngularVelocity")
  @Description("")
  String xAngularVelocityParams();

  @DefaultMessage("xvel")
  @Description("")
  String xvelParams();

  @DefaultMessage("y")
  @Description("")
  String yParams();

  @DefaultMessage("y1")
  @Description("")
  String y1Params();

  @DefaultMessage("y2")
  @Description("")
  String y2Params();

  @DefaultMessage("yAccel")
  @Description("")
  String yAccelParams();

  @DefaultMessage("yAngularVelocity")
  @Description("")
  String yAngularVelocityParams();

  @DefaultMessage("year")
  @Description("")
  String yearParams();

  @DefaultMessage("yvel")
  @Description("")
  String yvelParams();

  @DefaultMessage("zAccel")
  @Description("")
  String zAccelParams();

  @DefaultMessage("zAngularVelocity")
  @Description("")
  String zAngularVelocityParams();

  @DefaultMessage("zoom")
  @Description("")
  String zoomParams();


  /* Component Categories */
  @DefaultMessage("Connectivity")
  @Description("")
  String connectivityComponentPallette();

  @DefaultMessage("Drawing and Animation")
  @Description("")
  String drawingAndAnimationComponentPallette();

  @DefaultMessage("Experimental")
  @Description("")
  String experimentalComponentPallette();

  @DefaultMessage("For internal use only")
  @Description("")
  String forInternalUseOnlyComponentPallette();

  @DefaultMessage("LEGO® MINDSTORMS®")
  @Description("")
  String legoMindstormsComponentPallette();

  @DefaultMessage("Layout")
  @Description("")
  String layoutComponentPallette();

  @DefaultMessage("Maps")
  @Description("")
  String mapsComponentPallette();

  @DefaultMessage("Media")
  @Description("")
  String mediaComponentPallette();

  @DefaultMessage("Sensors")
  @Description("")
  String sensorsComponentPallette();

  @DefaultMessage("Social")
  @Description("")
  String socialComponentPallette();

  @DefaultMessage("Storage")
  @Description("")
  String storageComponentPallette();

  @DefaultMessage("User Interface")
  @Description("")
  String userInterfaceComponentPallette();


  /* Property Categories */
  @DefaultMessage("Appearance")
  @Description("")
  String AppearancePropertyCategory();

  @DefaultMessage("Behavior")
  @Description("")
  String BehaviorPropertyCategory();

  @DefaultMessage("Unspecified")
  @Description("")
  String UnspecifiedPropertyCategory();

}
